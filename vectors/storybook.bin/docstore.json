[["0",{"pageContent":"---\ntitle: Addon knowledge base\n---\n\nOnce you understand the basics of writing addons, there are a variety of common enhancements to make your addon better. This page details additional information about addon creation. Use it as a quick reference guide when creating your own addons.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":1,"to":5}}}}],["1",{"pageContent":"Disable the addon panel\n\nIt’s possible to disable the addon panel for a particular story.\n\nTo make that possible, you need to pass the `paramKey` element when you register the panel:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addon-disable-addon.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThen when adding a story, you can pass a disabled parameter.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/button-story-disable-addon.ts.mdx',\n    'web-components/button-story-disable-addon.js.mdx',\n    'web-components/button-story-disable-addon.ts.mdx',\n    'common/button-story-disable-addon.js.mdx',\n    'common/button-story-disable-addon.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":7,"to":37}}}}],["2",{"pageContent":"Style your addon\n\nStorybook uses [Emotion](https://emotion.sh/docs/introduction) for styling. Alongside with a theme that you can customize!\n\nWe recommend using Emotion to style your addon’s UI components. That allows you to use the active Storybook theme to deliver a seamless developer experience.\nIf you don’t want to use Emotion, you can use inline styles or another css-in-js lib. You can receive the theme as a prop by using Emotion's `withTheme` HOC. [Read more about theming](../configure/theming.md).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":39,"to":44}}}}],["3",{"pageContent":"Storybook components\n\nAddon authors can develop their UIs using any React library. But we recommend using Storybook’s UI components in `@storybook/components` to build addons faster. When you use Storybook components, you get:\n\n- Battle-tested off-the-shelf components\n- Storybook native look and feel\n- Built-in support for Storybook theming\n\nUse the components listed below with your next addon.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":46,"to":54}}}}],["4",{"pageContent":"| Component          | Source                                                                                                                                            | Story                                                                                                                          |\n| ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |\n| Action Bar         | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/ActionBar/ActionBar.tsx)                 | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-actionbar--single-item)         |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":56,"to":58}}}}],["5",{"pageContent":"| Addon Panel        | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/addon-panel/addon-panel.tsx)             | N/A                                                                                                                            |\n| Badge              | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/Badge/Badge.tsx)                         | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-badge--all-badges)              |\n| Button             | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/Button/Button.tsx)                       | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-button--all-buttons)            |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":59,"to":61}}}}],["6",{"pageContent":"| Form               | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/form/index.tsx)                          | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-form-button--sizes)             |\n| Loader             | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/Loader/Loader.tsx)                       | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-loader--progress-bar)           |\n| PlaceHolder        | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/placeholder/placeholder.tsx)             | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-placeholder--single-child)      |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":62,"to":64}}}}],["7",{"pageContent":"| Scroll Area        | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/ScrollArea/ScrollArea.tsx)               | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-scrollarea--vertical)           |\n| Space              | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/spaced/Spaced.tsx)                       | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-spaced--row)                    |\n| Syntax Highlighter | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/syntaxhighlighter/syntaxhighlighter.tsx) | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-syntaxhighlighter--bash)        |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":65,"to":67}}}}],["8",{"pageContent":"| Tabs               | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/tabs/tabs.tsx)                           | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-tabs--stateful-static)          |\n| ToolBar            | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/bar/bar.tsx)                             | N/A                                                                                                                            |\n| ToolTip            | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/tooltip/Tooltip.tsx)                     | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-tooltip-tooltip--basic-default) |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":68,"to":70}}}}],["9",{"pageContent":"| Zoom               | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/Zoom/Zoom.tsx)                           | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-zoom--element-actual-size)      |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":71,"to":71}}}}],["10",{"pageContent":"Complementing the components, also included is a set of UI primitives. Use the content listed below as a reference for styling your addon.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":73,"to":73}}}}],["11",{"pageContent":"| Component                      | Source                                                                                                         | Story                                                                                                    |\n| ------------------------------ | -------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------- |\n| Color Palette (see note below) | [See implementation](https://github.com/storybookjs/storybook/tree/master/code/ui/components/src/Colors)       | [See story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-colorpalette--page) |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":75,"to":77}}}}],["12",{"pageContent":"| Icon                           | [See implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/icon/icons.tsx) | [See story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-icon--labels)       |\n| Typography                     | [See implementation](https://github.com/storybookjs/storybook/tree/master/code/ui/components/src/typography)   | [See story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-typography--all)    |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":78,"to":79}}}}],["13",{"pageContent":"<div class=\"aside\">\nThe color palette implemented by <code>@storybook/components</code> is a high-level abstraction of the <a href=\"https://github.com/storybookjs/storybook/tree/next/code/lib/theming/src\"><code>@storybook/theming</code></a> package.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":81,"to":83}}}}],["14",{"pageContent":"Build system\n\nWhen you're developing your addon as a package, you can’t use `npm link` to add it to your project. List your addon as a local dependency into your package.json:\n\n```json\n{\n  \"dependencies\": {\n    \"@storybook/addon-controls\": \"file:///home/username/myrepo\"\n  }\n}\n```\n\n<div class=\"aside\">\nRun either <code>yarn</code> or <code>npm install</code> to install the addon.\n</div>\n\n### Hot module replacement\n\nWhile developing your addon, you can configure HMR (hot module replacement) to reflect the changes made.\n\n### Standalone Storybook addons\n\nIf you're developing a standalone addon, add a new script to `package.json` with the following:\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"npm run build -- --watch\"\n  }\n}\n```\n\n#### Local Storybook addons\n\nIf you're developing a local Storybook addon built on top of an existing Storybook installation, HMR (hot module replacement) is available out of the box.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":85,"to":119}}}}],["15",{"pageContent":"Composing addons in presets\n\nIf you're working on a preset that loads third-party addons, which you don't have control over, and you need access to certain features (e.g., decorators) or provide additional configurations. In that case, you'll need to update your preset to the following to allow you to load and configure the other addons:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addon-load-external-addons-preset.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nIf you have control over the addons you want to customize. In that case, you can update your preset and implement a custom function to load any additional presets and provide the necessary configuration, similar to how it's implemented in the [Essentials](../../addons/essentials/src/index.ts) addon.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-knowledge-base.md","loc":{"lines":{"from":121,"to":135}}}}],["16",{"pageContent":"---\ntitle: Addon migration guide for Storybook 7.0\n---\n\nStorybook 7 is our first major release in over two years. While Storybook’s addon API has not changed much in the past couple of years, addons require several changes for compatibility with Storybook 7. This guide will walk you through the upgrade process.\n\n<div class=\"aside\">\n\nAs we gather feedback from the community, we’ll update this page. We also have a general [Storybook migration guide](../migration-guide.md) if you’re looking for that.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-migration-guide.md","loc":{"lines":{"from":1,"to":11}}}}],["17",{"pageContent":"Dependencies\n\nThe first thing to do is upgrade any Storybook dependencies in your project. We release the next version of all our packages on the `next` npm tag, so the easiest thing is to reference that in your `package.json`:\n\n```json\n{\n  \"dependencies\": {\n    \"@storybook/client-logger\": \"next\"\n  }\n}\n```\n\nIf you'd rather depend on the latest version of Storybook, you can use the `latest` tag:\n\n```json\n{\n  \"dependencies\": {\n    \"@storybook/client-logger\": \"latest\"\n  }\n}\n```\n\nOr use a version specifier:\n\n```json\n{\n  \"dependencies\": {\n    \"@storybook/client-logger\": \"^7.0.0\"\n  }\n}\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-migration-guide.md","loc":{"lines":{"from":13,"to":43}}}}],["18",{"pageContent":"Breaking changes\n\n### `@storybook/addons` has been split into `@storybook/manager-api` and `@storybook/preview-api`\n\nThe default export from `@storybook/addons` can now be used via named imports from `@storybook/manager-api` and `@storybook/preview-api`, depending on which environment you need the API from. The manager is the Storybook UI and includes your addon's Addon Panel. While the preview is used to render stories and includes your addon's decorators.\n\nYou might also depend (and use) these packages in your addon's decorators: `@storybook/store`, `@storybook/preview-web`, `@storybook/core-client`, `@storybook/client-api`. These have all been consolidated into `@storybook/preview-api`. If you use any of these packages, please import what you need from `@storybook/preview-api` instead.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-migration-guide.md","loc":{"lines":{"from":45,"to":51}}}}],["19",{"pageContent":"Some components were moved from `@storybook/components` to a new package `@storybook/blocks`\n\nComponents like `ColorControl`, `ColorPalette`, `ArgsTable`, `ArgRow`, `TabbedArgsTable`, `SectionRow`, `Source`, AND `Code` were moved into a new package. In Storybook 7.0, they should be imported from `@storybook/blocks` instead.\n\n```js\n// import { ColorControl } from '@storybook/components';\nimport { ColorControl } from '@storybook/blocks';\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-migration-guide.md","loc":{"lines":{"from":53,"to":60}}}}],["20",{"pageContent":"Deprecations and detailed migrations\n\nWe’ve also deprecated a few packages and APIs in 7.0. After you’ve made your addon working with 7.0, make sure to check the browser console in a Storybook running your addon. If you’re using deprecated packages, you should see warnings that link to migration instructions.\n\nThere are more technical details available in the [migration notes for addon authors](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#specific-instructions-for-addon-creators).\n\nFinally, for an exhaustive list of noteworthy changes in 7.0, check [the full migration notes](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-65x-to-700).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-migration-guide.md","loc":{"lines":{"from":62,"to":68}}}}],["21",{"pageContent":"Releasing\n\nYou should release a new major version of this addon that supports Storybook 7. If you want to continue making changes that support Storybook 6, you should release a minor or a patch of the previous major version.\n\nWe also recommend releasing your own addon using the `next` tag to test it out in projects.\n\n## Support\n\nIf you’ve followed this guide and your addon is still not working, please reach out on the [Storybook Discord](https://discord.gg/storybook) in the `#addons` channel and we’ll help you get to the bottom of it and upgrade the guide accordingly.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-migration-guide.md","loc":{"lines":{"from":70,"to":78}}}}],["22",{"pageContent":"---\ntitle: 'Types of addons'\n---\n\nEach Storybook addon is classified into two general categories, UI-based or Presets. Each type of addons feature is documented here. Use this as a reference when creating your addon.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-types.md","loc":{"lines":{"from":1,"to":5}}}}],["23",{"pageContent":"UI-based addons\n\nUI-based addons allow you to customize Storybook's UI with the following elements.\n\n### Panels\n\nPanel addons allow you to add your own UI in Storybook's addon panel. This is the most common type of addon in the ecosystem. For example, the official [@storybook/actions](../essentials/actions.md) and [@storybook/a11y](https://github.com/storybookjs/storybook/tree/next/code/addons/a11y) use this pattern.\n\n![Storybook panel](./storybook-panel.png)\n\nUse this boilerplate code to add a new `Panel` to Storybook's UI:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addon-panel-example.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-types.md","loc":{"lines":{"from":7,"to":27}}}}],["24",{"pageContent":"Toolbars\n\nToolbar addons allow you to add your own custom tools in Storybook's Toolbar. For example, the official [@storybook/backgrounds](../essentials/backgrounds.md) and the [@storybook/addon-outline/](../essentials/measure-and-outline.md#outline-addon) use this pattern.\n\n![Storybook toolbar addon](./storybook-toolbar.png)\n\nUse this boilerplate code to add a new `button` to Storybook's Toolbar:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addon-toolbar-example.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\nThe <code>icon</code> element used in the example loads the icons from the <code>@storybook/components</code> package. See [here](../faq.md#what-icons-are-available-for-my-toolbar-or-my-addon) for the list of available icons that you can use.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-types.md","loc":{"lines":{"from":29,"to":51}}}}],["25",{"pageContent":"Tabs\n\nTab addons allow you to create your own custom tabs in Storybook. For example, the official [@storybook/addon-docs](../writing-docs/introduction.md) uses this pattern.\n\n![Storybook tab addon](./storybook-tab.png)\n\nUse this boilerplate code to add a new `Tab` to Storybook's UI:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addon-tab-example.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\nLearn how to write your own addon that includes these UI elements <a href=\"./writing-addons\">here</a>.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-types.md","loc":{"lines":{"from":53,"to":73}}}}],["26",{"pageContent":"Preset addons\n\nStorybook preset addons are grouped collections of `babel`, `webpack`, and `addons` configurations to integrate Storybook and other technologies. For example the official [preset-create-react-app](https://github.com/storybookjs/presets/tree/master/packages/preset-create-react-app).\n\nUse this boilerplate code while writing your own preset addon.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preset-full-config-object.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\nLearn more about writing your own preset addon <a href=\"./writing-presets\">here</a>.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addon-types.md","loc":{"lines":{"from":75,"to":93}}}}],["27",{"pageContent":"---\ntitle: 'Addon API'\n---\n\nStorybook's API allows developers to interact programmatically with Storybook. With the API, developers can build and deploy custom addons and other tools that enhance Storybook's functionality.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":1,"to":5}}}}],["28",{"pageContent":"Core Addon API\n\nOur API is exposed via two distinct packages, each one with a different purpose:\n\n- `@storybook/manager-api` used to interact with the Storybook manager UI or access the Storybook API.\n- `@storybook/preview-api` used to control and configure the addon's behavior.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-imports.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":7,"to":22}}}}],["29",{"pageContent":"addons.add()\n\nThe `add` method allows you to register the type of UI component associated with the addon (e.g., panels, toolbars, tabs). For a minimum viable Storybook addon, you should provide the following arguments:\n\n- `type`: The type of UI component to register.\n- `title`: The title to feature in the Addon Panel.\n- `render`: The function that renders the addon's UI component.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addon-panel-initial.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\nℹ️  The render function is called with `active` and `key`. The `active` value will be true when the panel is focused on the UI.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":24,"to":44}}}}],["30",{"pageContent":"addons.register()\n\nServes as the entry point for all addons. It allows you to register an addon and access the Storybook [API](#storybook-api). For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-register.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nNow you'll get an instance to our StorybookAPI. See the [api docs](#storybook-api) for Storybook API regarding using that.\n\n### addons.getChannel()\n\nGet an instance to the channel to communicate with the manager and the preview. You can find this in both the addon register code and your addon’s wrapper component (where used inside a story).\n\nIt has a NodeJS [EventEmitter](https://nodejs.org/api/events.html) compatible API. So, you can use it to emit events and listen to events.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-getchannel.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":46,"to":76}}}}],["31",{"pageContent":"makeDecorator\n\nUse the `makeDecorator` API to create decorators in the style of the official addons. Like so:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-makedecorator.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\nℹ️ If the story's parameters include `{ exampleParameter: { disable: true } }` (where `exampleParameter` is the `parameterName` of your addon), your decorator will not be called.\n\n</div>\n\nThe `makeDecorator` API requires the following arguments:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":78,"to":98}}}}],["32",{"pageContent":"</div>\n\nThe `makeDecorator` API requires the following arguments:\n\n- `name`: Unique name to identify the custom addon decorator.\n- `parameterName`: Sets a unique parameter to be consumed by the addon.\n- `skipIfNoParametersOrOptions`: (Optional) Doesn't run the decorator if the user hasn't options either via [decorators](../writing-stories/decorators.md) or [parameters](../writing-stories/parameters.md).\n- `wrapper`: your decorator function. Takes the `getStory`, `context`, and both the `options` and `parameters` (as defined in `skipIfNoParametersOrOptions` above).\n\n---","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":98,"to":107}}}}],["33",{"pageContent":"Storybook API\n\nStorybook's API allows you to access different functionalities of Storybook UI.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":109,"to":111}}}}],["34",{"pageContent":"api.selectStory()\n\nThe `selectStory` API method allows you to select a single story. It accepts the following two parameters; story kind name and an optional story name. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-with-addon-example.js.mdx',\n    'react/button-story-with-addon-example.ts.mdx',\n    'vue/button-story-with-addon-example.js.mdx',\n    'vue/button-story-with-addon-example.ts.mdx',\n    'angular/button-story-with-addon-example.ts.mdx',\n    'svelte/button-story-with-addon-example.js.mdx',\n    'web-components/button-story-with-addon-example.js.mdx',\n    'web-components/button-story-with-addon-example.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"addons/addons-api#snippet-button-story-with-addon-example\"\n/>\n\n<!-- prettier-ignore-end -->\n\nThis is how you can select the above story:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-selectstory.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":113,"to":146}}}}],["35",{"pageContent":"api.selectInCurrentKind()\n\nSimilar to the `selectStory` API method, but it only accepts the story as the only parameter.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-selectincurrentkind.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n### api.setQueryParams()\n\nThis method allows you to set query string parameters. You can use that as temporary storage for addons. Here's how you define query params:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-setqueryparams.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nAdditionally, if you need to remove a query parameter, set it as `null` instead of removing them from the addon. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-disablequeryparams.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":148,"to":186}}}}],["36",{"pageContent":"api.getQueryParam()\n\nAllows retrieval of a query parameter enabled via the `setQueryParams` API method. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-getqueryparam.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n### api.getUrlState(overrideParams)\n\nThis method allows you to get the application URL state, including any overridden or custom parameter values. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-geturlstate.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n### api.on(eventName, fn)\n\nThis method allows you to register a handler function called whenever the user navigates between stories.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-on.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":188,"to":228}}}}],["37",{"pageContent":"addons.setConfig(config)\n\nThis method allows you to override the default Storybook UI configuration (e.g., set up a [theme](../configure/theming.md) or hide UI elements):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-config-layout.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThe following table details how to use the API values:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":230,"to":244}}}}],["38",{"pageContent":"| Name                |     Type      |                    Description                     |             Example Value             |\n| ------------------- | :-----------: | :------------------------------------------------: | :-----------------------------------: |\n| **isFullscreen**    |    Boolean    |        Show story component as full screen         |                `false`                |\n| **showNav**         |    Boolean    |     Display panel that shows a list of stories     |                `true`                 |\n| **showPanel**       |    Boolean    |   Display panel that shows addon configurations    |                `true`                 |\n| **panelPosition**   | String/Object |           Where to show the addon panel            |          `bottom` or `right`          |\n| **enableShortcuts** |    Boolean    |              Enable/disable shortcuts              |                `true`                 |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":246,"to":252}}}}],["39",{"pageContent":"| **enableShortcuts** |    Boolean    |              Enable/disable shortcuts              |                `true`                 |\n| **showToolbar**     |    Boolean    |                 Show/hide toolbar                  |                `true`                 |\n| **theme**           |    Object     |         Storybook Theme, see next section          |              `undefined`              |\n| **selectedPanel**   |    String     |            Id to select an addon panel             |       `storybook/actions/panel`       |\n| **initialActive**   |    String     |      Select the default active tab on Mobile       |   `sidebar` or `canvas` or `addons`   |\n| **sidebar**         |    Object     |             Sidebar options, see below             |        `{ showRoots: false }`         |\n| **toolbar**         |    Object     | Modify the tools in the toolbar using the addon id | `{ fullscreen: { hidden: false } } }` |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":252,"to":258}}}}],["40",{"pageContent":"The following options are configurable under the `sidebar` namespace:\n\n| Name               |   Type   |                          Description                          |                  Example Value                   |\n| ------------------ | :------: | :-----------------------------------------------------------: | :----------------------------------------------: |\n| **showRoots**      | Boolean  |    Display the top-level nodes as a \"root\" in the sidebar     |                     `false`                      |\n| **collapsedRoots** |  Array   |     Set of root node IDs to visually collapse by default      |               `['misc', 'other']`                |\n| **renderLabel**    | Function | Create a custom label for tree nodes; must return a ReactNode | `(item) => <abbr title=\"...\">{item.name}</abbr>` |\n\nThe following options are configurable under the `toolbar` namespace:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":260,"to":268}}}}],["41",{"pageContent":"The following options are configurable under the `toolbar` namespace:\n\n| Name   |  Type  |            Description             |    Example Value    |\n| ------ | :----: | :--------------------------------: | :-----------------: |\n| **id** | String | Toggle visibility for toolbar item | `{ hidden: false }` |\n\n---","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":268,"to":274}}}}],["42",{"pageContent":"Storybook hooks\n\nTo help streamline addon development and reduce boilerplate code, the API exposes a set of hooks to access Storybook's internals. These hooks are an extension of the `@storybook/manager-api` package.\n\n### useStorybookState\n\nIt allows access to Storybook's internal state. Similar to the [`useglobals`](#useglobals) hook, we recommend optimizing your addon to rely on [`React.memo`](https://reactjs.org/docs/react-api.html#reactmemo), or the following hooks; [`useMemo`](https://reactjs.org/docs/hooks-reference.html#usememo), [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback) to prevent a high volume of re-render cycles.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-usestorybookstate.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":276,"to":292}}}}],["43",{"pageContent":"useStorybookApi\n\nThe `useStorybookApi` hook is a convenient helper to allow you full access to the [Storybook API](#storybook-api) methods.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-useapi.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n### useChannel\n\nAllows setting subscriptions to events and getting the emitter to emit custom events to the channel.\n\nThe messages can be listened to on both the iframe and the manager.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-usechannel.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n### useAddonState\n\nThe `useAddonState` is a useful hook for addons that require data persistence, either due to Storybook's UI lifecycle or for more complex addons involving multiple types (e.g., toolbars, panels).\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-useaddonstate.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":294,"to":336}}}}],["44",{"pageContent":"useParameter\n\nThe `useParameter` retrieves the current story's parameters. If the parameter's value is not defined, it will automatically default to the second value defined.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-useparameter.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n### useGlobals\n\nExtremely useful hook for addons that rely on Storybook [Globals](../essentials/toolbars-and-globals.md). It allows you to obtain and update `global` values. We also recommend optimizing your addon to rely on [`React.memo`](https://reactjs.org/docs/react-api.html#reactmemo), or the following hooks; [`useMemo`](https://reactjs.org/docs/hooks-reference.html#usememo), [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback) to prevent a high volume of re-render cycles.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addons-api-useglobal.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":338,"to":364}}}}],["45",{"pageContent":"useArgs\n\nHook that allows you to retrieve or update a story's [`args`](../writing-stories/args.md).\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/args-usage-with-addons.js.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/addons-api.md","loc":{"lines":{"from":366,"to":378}}}}],["46",{"pageContent":"---\ntitle: 'Configure and communicate with an addon'\n---\n\nThe addon API is designed for customization. It offers addon authors different ways to configure and communicate with their users' Storybook. Let's look at what these are and their suggested use cases.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/configure-addons.md","loc":{"lines":{"from":1,"to":5}}}}],["47",{"pageContent":"Preset\n\nPresets offload the burden of configuration from the user to the addon. Preset options are global and are accessible from NodeJS. They're ideal for pre-configuring Webpack loaders, Babel plugins, and other library or framework-specific configurations.\n\nFor example, many libraries require that the app be wrapped by a `Provider` which _provides_ data to components down the tree. Presets can describe behavior like adding wrappers automatically, without users having to do any manual configuration. If a user installs an addon that has Presets, the addon can instruct Storybook to wrap all stories in `Provider`. This allows folks to start using your library with Storybook, with just 1 line of config!\n\nFor more on presets, see: [Write a preset addon](./writing-presets.md)\n\nThe mechanism for wrapping each story is referred to as a Storybook [decorator](../writing-stories/decorators.md). They allow you to augment stories with extra rendering functionality or by providing data.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/configure-addons.md","loc":{"lines":{"from":7,"to":15}}}}],["48",{"pageContent":"Parameters\n\nParameters are available in the browser and are great for configuring addon behavior globally, at the component level, or at the story level.\n\nFor example, the [Pseudo States addon](https://storybook.js.org/addons/storybook-addon-pseudo-states) uses parameters to enable the various pseudo-states. Users can provide global defaults and then override them at the story level.\n\nUse the [`useParameter`](./addons-api.md#useparameter) hook to access the parameter values within your addon.\n\n```js\nexport const Hover = {\n  render: () => <Button>Label</Button>,\n  parameters: { pseudo: { hover: true } },\n};\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/configure-addons.md","loc":{"lines":{"from":17,"to":30}}}}],["49",{"pageContent":"Channels\n\nChannels enable two-way communication between the manager and the preview pane, using a NodeJS [EventEmitter](https://nodejs.org/api/events.html) compatible API. Your addons can plug into specific channels and respond to these events.\n\nFor example, the [Actions addon](https://storybook.js.org/addons/@storybook/addon-actions) captures user events and displays their data in a panel.\n\nUse the [`useChannel`](./addons-api.md#usechannel) hook to access the channel data within your addon.\n\nFor a complete example, check out [storybookjs/addon-kit/withRoundTrip.ts](https://github.com/storybookjs/addon-kit/blob/main/src/withRoundTrip.ts)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/configure-addons.md","loc":{"lines":{"from":32,"to":40}}}}],["50",{"pageContent":"---\ntitle: 'Install addons'\n---\n\nStorybook has [hundreds of reusable addons](https://storybook.js.org/addons) that are packaged as NPM modules. Let's walk through how to extend Storybook by installing and registering addons.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/install-addons.md","loc":{"lines":{"from":1,"to":5}}}}],["51",{"pageContent":"Using addons\n\nWith the exception of preset addons, all addons have the same installation process: install and register.\n\nFor example, to include accessibility testing in Storybook, run the following command to install the necessary addon:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-a11y-install.yarn.js.mdx',\n    'common/storybook-a11y-install.npm.js.mdx',\n    'common/storybook-a11y-install.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nNext, update [`.storybook/main.js|ts`](../configure/overview.md#configure-story-rendering) to the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-a11y-register.js.mdx',\n    'common/storybook-a11y-register.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\nAddons may also require addon-specific configuration. Read their respective READMEs.\n</div>\n\nNow when you run Storybook the accessibility testing addon will be enabled.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/install-addons.md","loc":{"lines":{"from":7,"to":42}}}}],["52",{"pageContent":"<div class=\"aside\">\nAddons may also require addon-specific configuration. Read their respective READMEs.\n</div>\n\nNow when you run Storybook the accessibility testing addon will be enabled.\n\n![Storybook addon installed and registered](./storybook-addon-installed-registered.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/install-addons.md","loc":{"lines":{"from":42,"to":48}}}}],["53",{"pageContent":"Using preset addons\n\nStorybook preset addons are grouped collections of specific `babel`, `webpack` and `addons` configurations for distinct use cases. Each one with its own set of instructions. Preset addons have a three-step installation process: install, register and optionally configuration.\n\nFor example, to use SCSS styling, run the following command to install the addon and the required dependencies:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preset-scss.webpack-4.js.mdx',\n    'common/storybook-preset-scss.webpack-5.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n 💡 Tip: Use the Webpack 5 snippet only if your framework already includes support for this version. Otherwise, use the Webpack 4 snippet. \n</div>\n\nNext, update [`.storybook/main.js|ts`](../configure/overview.md#configure-story-rendering) to the following:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/install-addons.md","loc":{"lines":{"from":50,"to":73}}}}],["54",{"pageContent":"Next, update [`.storybook/main.js|ts`](../configure/overview.md#configure-story-rendering) to the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-preset-config.js.mdx',\n    'common/storybook-main-preset-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nNow when you run Storybook it will configure itself to use SCSS styling. No further configuration is needed.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/install-addons.md","loc":{"lines":{"from":73,"to":86}}}}],["55",{"pageContent":"Optional configuration\n\nMost preset addons can also take additional parameters. The most common use cases are:\n\n- Addon configuration\n- Webpack loader configuration\n\nConsider the following example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preset-configuration.js.mdx',\n    'common/storybook-preset-configuration.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\nPreset addons may also have addon-specific configurations. Read their respective READMEs.\n</div>\n\nNow, when Storybook starts up, it will update webpack's CSS loader to use modules and adjust how styling is defined.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/install-addons.md","loc":{"lines":{"from":88,"to":112}}}}],["56",{"pageContent":"---\ntitle: 'Add to the integration catalog'\n---\n\nStorybook has two types of integrations, addons and recipes, which are listed in the [integration catalog](https://storybook.js.org/integrations/).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/integration-catalog.md","loc":{"lines":{"from":1,"to":5}}}}],["57",{"pageContent":"Addons\n\nStorybook addons are distributed via npm. The catalog is populated by querying npm's registry for Storybook-specific metadata in `package.json`.\n\nAdd your addon to the catalog by publishing a npm package that follows these requirements:\n\n- `package.json` with [module information](./writing-addons.md#get-started) and [addon metadata](#addon-metadata)\n- `README.md` file with installation and configuration instructions\n- `/dist` directory containing transpiled ES5 code\n- `preset.js` file written as an ES5 module at the root level\n\n<div class=\"aside\">\n\nGet a refresher on how to [write a Storybook addon](./writing-addons.md).\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/integration-catalog.md","loc":{"lines":{"from":7,"to":22}}}}],["58",{"pageContent":"Addon metadata\n\nWe rely on metadata to organize your addon in the catalog. You must add the <code>storybook-addons</code> as the first keyword, followed by your addon's category. Additional keywords will be used in search and as tags.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/integration-catalog.md","loc":{"lines":{"from":24,"to":26}}}}],["59",{"pageContent":"| Property      | Description                            | Example                                                                   |\n| ------------- | -------------------------------------- | ------------------------------------------------------------------------- |\n| `name`        | Addon package name                     | storybook-addon-outline                                                   |\n| `description` | Addon description                      | Outline all elements with CSS to help with layout placement and alignment |\n| `author`      | Name of the author                     | winkerVSbecks                                                             |\n| `keywords`    | List of keywords to describe the addon | `[\"storybook-addons\",\"style\",\"debug\"]`                                    |\n| `repository`  | Addon repository                       | `{\"type\": \"git\",\"url\": \"https://github.com/someone/my-addon\" }`           |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/integration-catalog.md","loc":{"lines":{"from":28,"to":34}}}}],["60",{"pageContent":"Customize your addon's appearance by adding the `storybook` property with the following fields.\n\n| Property                | Description                                               | Example                               |\n| ----------------------- | --------------------------------------------------------- | ------------------------------------- |\n| `displayName`           | Display name                                              | Outline                               |\n| `icon`                  | Link to custom icon for the addon (SVG are not supported) | https://yoursite.com/outline-icon.png |\n| `unsupportedFrameworks` | List of unsupported frameworks                            | `[\"vue\"]`                             |\n| `supportedFrameworks`   | List of supported frameworks                              | `[\"react\", \"angular\"]`                |\n\nUse the list below as a reference when filling in the values for both the `supportedFrameworks` and `unsupportedFrameworks` fields.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/integration-catalog.md","loc":{"lines":{"from":36,"to":45}}}}],["61",{"pageContent":"Use the list below as a reference when filling in the values for both the `supportedFrameworks` and `unsupportedFrameworks` fields.\n\n- react\n- vue\n- angular\n- web-components\n- ember\n- html\n- svelte\n- preact\n- aurelia\n- marionette\n- react-native\n\n<div class=\"aside\">\n💡 Make sure to copy each item <strong>exactly</strong> as listed so that we can properly index your addon in our catalog.\n</div>\n\n```json\n{\n  // package.json\n\n  \"name\": \"storybook-addon-outline\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Outline all elements with CSS to help with layout placement and alignment\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/chromaui/storybook-outline\"\n  },\n  \"author\": \"winkerVSbecks\",\n  \"keywords\": [\"storybook-addons\", \"style\", \"debug\", \"layout\", \"css\"],\n  \"storybook\": {\n    \"displayName\": \"Outline\",\n    \"unsupportedFrameworks\": [\"vue\"],\n    \"supportedFrameworks\": [\"react\", \"angular\"],\n    \"icon\": \"https://yoursite.com/outline-icon.png\"\n  }\n}","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/integration-catalog.md","loc":{"lines":{"from":45,"to":82}}}}],["62",{"pageContent":"The `package.json` above appears like below in the catalog. See an example of a production package.json [here](https://github.com/chromaui/storybook-outline/blob/main/package.json).\n\n![Storybook addon in the catalog](./addon-display.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/integration-catalog.md","loc":{"lines":{"from":85,"to":87}}}}],["63",{"pageContent":"How long does it take for my addon to show up in the catalog?\n\nOnce you publish the addon, it will appear in the catalog. There may be a delay between the time you publish your addon and when it's listed in the catalog. If your addon doesn't show up within 24 hours, [open an issue](https://github.com/storybookjs/frontpage/issues).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/integration-catalog.md","loc":{"lines":{"from":89,"to":91}}}}],["64",{"pageContent":"Recipes\n\nRecipes are a set of instructions to integrate third-party libraries into Storybook in cases where an addon does not exist or the integration requires some manual effort.\n\n### Who owns them?\n\nRecipes are written and maintained by the Storybook team. We create recipes based on community popularity, tool maturity, and stability of the integration. Our goal is to ensure that recipes continue to work over time.\n\nNot finding the recipe that you want? If it's popular in the community, our docs team will write one. In the mean time, try searching for a solution — it's likely that someone has the same requirements as you do. You can also help us out by writing recipes on your own site which speeds up the research process.\n\n### Request a recipe\n\nIf you'd like to request a recipe, head over to the [#maintenance channel](https://discord.com/channels/486522875931656193/490070912448724992) of our community Discord and ask.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/integration-catalog.md","loc":{"lines":{"from":93,"to":105}}}}],["65",{"pageContent":"---\ntitle: 'Introduction to addons'\n---\n\nAddons extend Storybook with features and integrations that are not built into the core. Most Storybook features are implemented as addons. For instance: [documentation](../writing-docs/introduction.md), [accessibility testing](https://github.com/storybookjs/storybook/tree/master/addons/a11y), [interactive controls](../essentials/controls.md), among others.\nThe [addon API](./addons-api.md) makes it easy for you to configure and customize Storybook in new ways. There are countless addons made by the community that unlocks time-saving workflows.\n\nBrowse our [addon catalog](https://storybook.js.org/addons) to install an existing addon or as inspiration for your own addon.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/introduction.md","loc":{"lines":{"from":1,"to":8}}}}],["66",{"pageContent":"Storybook basics\n\nBefore writing your first [addon](https://storybook.js.org/addons), let’s take a look at the basics of Storybook’s architecture. While Storybook presents a unified user interface, under the hood it’s divided down the middle into **Manager** and **Preview**.\n\nThe **Manager** is the UI responsible for rendering the:\n\n- 🔍 Search\n- 🧭 Navigation\n- 🔗 Toolbars\n- 📦 Addons\n\nThe **Preview** area is an `iframe` where your stories are rendered.\n\n![Storybook detailed window](./manager-preview.png)\n\nBecause both elements run in their own separate `iframes`, they use a communication channel to keep in sync. For example, when you select a story in the Manager an event is dispatched across the channel notifying the Preview to render the story.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/introduction.md","loc":{"lines":{"from":10,"to":25}}}}],["67",{"pageContent":"Anatomy of an addon\n\nStorybook addons allow you to extend what's already possible with Storybook, everything from the [user interface](./addon-types.md) to the [API](./addons-api.md). Each one is classified into two broader categories.\n\n### UI-based addons\n\n[UI-based addons](./addon-types.md#ui-based-addons) focus on customizing Storybook's user interface to extend your development workflow. Examples of UI-based addons include: [Controls](../essentials/controls.md), [Docs](../writing-docs/introduction.md) and [Accessibility](https://github.com/storybookjs/storybook/tree/master/addons/a11y).\n\n[Learn how to write an addon »](./writing-addons.md)\n\n### Preset addons\n\n[Preset addons](./addon-types.md#preset-addons) help you integrate Storybook with other technologies and libraries. An examples of a preset addons is [preset-create-react-app](https://github.com/storybookjs/presets/tree/master/packages/preset-create-react-app).\n\n[Learn how to write a preset addon »](./writing-presets.md)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/introduction.md","loc":{"lines":{"from":27,"to":41}}}}],["68",{"pageContent":"---\ntitle: 'Write an addon'\n---\n\nOne of Storybook's main features is its robust addon ecosystem. Use addons to enhance and extend your development workflow. This page shows you how to create your own addon.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-addons.md","loc":{"lines":{"from":1,"to":5}}}}],["69",{"pageContent":"What we're building\n\nFor this example, we're going to build a bare-bones addon that:\n\n- Adds a new panel in Storybook.\n- Retrieves a custom parameter from the stories.\n- Displays the parameter data in the panel.\n\n### Addon kit\n\nThis guide shows you how to setup an addon from scratch. Alternatively, you can jumpstart your addon development with the [`addon-kit`](https://github.com/storybookjs/addon-kit).\n\n### Addon directory structure\n\nWe recommend a common addon file and directory structure for consistency.\n\n| Files/Directories | Description                        |\n| :---------------- | :--------------------------------- |\n| dist              | Transpiled directory for the addon |\n| src               | Source code for the addon          |\n| .babelrc.js       | Babel configuration                |\n| preset.js         | Addon entry point                  |\n| package.json      | Addon metadata information         |\n| README.md         | General information for the addon  |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-addons.md","loc":{"lines":{"from":7,"to":30}}}}],["70",{"pageContent":"Get started\n\nOpen a new terminal and create a new directory called `my-addon`. Inside it, run `npm init` to initialize a new node project. For your project's name, choose `my-addon` and for entry point `dist/preset.js`.\n\nOnce you've gone through the prompts, your `package.json` should look like:\n\n```json\n{\n  \"name\": \"my-addon\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A barebones Storybook addon\",\n  \"main\": \"dist/preset.js\",\n  \"files\": [\"dist/**/*\", \"README.md\", \"*.js\"],\n  \"keywords\": [\"storybook\", \"addons\"],\n  \"author\": \"YourUsername\",\n  \"license\": \"MIT\"\n}\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-addons.md","loc":{"lines":{"from":32,"to":49}}}}],["71",{"pageContent":"Build system\n\nWe'll need to add the necessary dependencies and make some adjustments. Run the following command to install the required dependencies:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-write-addon-install-dependencies.yarn.js.mdx',\n    'common/storybook-write-addon-install-dependencies.npm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nInitialize a local Storybook instance to allow you to test your addon.\n\n```shell\nnpx storybook@latest init","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-addons.md","loc":{"lines":{"from":51,"to":69}}}}],["72",{"pageContent":"<div class=\"aside\">\n💡 Initializing Storybook adds the building blocks for our addon. If you're building a standalone Storybook addon, set the React and Storybook packages as peer dependencies. It prevents the addon from breaking Storybook when there are different versions available.\n</div>\n\nNext, create a `.babelrc.js` file in the root directory with the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/my-addon-babel-configuration.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\nBabel configuration is required because our addon uses ES6 and JSX.\n</div>\n\nChange your `package.json` and add the following script to build the addon:\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"babel ./src --out-dir ./dist\"\n  }\n}","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-addons.md","loc":{"lines":{"from":72,"to":99}}}}],["73",{"pageContent":"<div class=\"aside\">\n💡 Running <code>yarn build</code> at this stage will output the code into the <code>dist</code> directory, transpiled into a ES5 module ready to be installed into any Storybook.\n</div>\n\nFinally, create a new directory called `src` and inside a new file called `preset.js` with the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/my-addon-preset-implementation.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nPresets are the way addons hook into Storybook. Among other tasks they allow you to:\n\n- Add to [Storybook's UI](#add-a-panel)\n- Add to the [preview iframe](./writing-presets.md#preview-entries)\n- Modify [babel](./writing-presets.md#babel) and [webpack settings](./writing-presets.md#webpack)\n\nFor this example, we'll modify Storybook's UI.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-addons.md","loc":{"lines":{"from":102,"to":124}}}}],["74",{"pageContent":"Add a panel\n\nNow let’s add a panel to Storybook. Inside the `src` directory, create a new file called `manager.js` and add the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/my-addon-initial-panel-state.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n💡 Make sure to include the <code>key</code> when you register the addon. It will prevent any issues when the addon renders.\n</div>\n\nGoing over the code snippet in more detail. When Storybook starts up:\n\n1. It [registers](./addons-api.md#addonsregister) the addon\n2. [Adds](./addons-api.md#addonsadd) a new `panel` titled `My Addon` to the UI\n3. When selected, the `panel` renders the static `div` content","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-addons.md","loc":{"lines":{"from":126,"to":148}}}}],["75",{"pageContent":"Register the addon\n\nFinally, let’s hook it all up. Change `.storybook/main.js` to the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/my-addon-storybook-registration.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n💡 When you register a Storybook addon, it will look for either <code>register.js</code> or <code>preset.js</code> as the entry points.\n</div>\n\nRun `yarn storybook` and you should see something similar to:\n\n![Storybook addon initial state](./addon-initial-state.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-addons.md","loc":{"lines":{"from":150,"to":170}}}}],["76",{"pageContent":"Display story parameter\n\nNext, let’s replace the `MyPanel` component from above to show the parameter.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addon-change-panel.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThe new version is made smarter by [`useParameter`](./addons-api.md#useparameter), which is a [React hook](https://reactjs.org/docs/hooks-intro.html) that updates the parameter value and re-renders the panel every time the story changes.\n\nThe [addon API](./addons-api.md) provides hooks like this, so all of that communication can happen behind the scenes. That means you can focus on your addon's functionality.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-addons.md","loc":{"lines":{"from":172,"to":188}}}}],["77",{"pageContent":"Using the addon with a story\n\nWhen Storybook was initialized, it provided a small set of example stories. Change your `Button.stories.js` to the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-with-addon-example.js.mdx',\n    'react/button-story-with-addon-example.ts.mdx',\n    'react/button-story-with-addon-example.ts.mdx',\n    'vue/button-story-with-addon-example.js.mdx',\n    'vue/button-story-with-addon-example.ts.mdx',\n    'angular/button-story-with-addon-example.ts.mdx',\n    'svelte/button-story-with-addon-example.js.mdx',\n    'web-components/button-story-with-addon-example.js.mdx',\n    'web-components/button-story-with-addon-example.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"addons/writing-addons#snippet-button-story-with-addon-example\"\n/>\n\n<!-- prettier-ignore-end -->\n\nAfter applying the changes to the story, the Storybook UI will show the following:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-addons.md","loc":{"lines":{"from":190,"to":214}}}}],["78",{"pageContent":"<!-- prettier-ignore-end -->\n\nAfter applying the changes to the story, the Storybook UI will show the following:\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"addon-final-stage-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-addons.md","loc":{"lines":{"from":214,"to":223}}}}],["79",{"pageContent":"Root level preset.js\n\nBefore publishing the addon, we'll need to make one last change. In the root directory of the addon, create a new file called `preset.js` and add the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/my-addon-root-level-preset.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThis auto-registers the addon without any additional configuration from the user. Storybook looks for either a `preset.js` or a `manager.js` file located at the root level.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-addons.md","loc":{"lines":{"from":225,"to":239}}}}],["80",{"pageContent":"Packaging and publishing\n\nNow that you've seen how to create a bare-bones addon let's see how to share it with the community. Before we begin, make sure your addon meets the following requirements:\n\n- `package.json` file with metadata about the addon\n- Peer dependencies of `react` and `@storybook/addons`\n- `preset.js` file at the root level written as an ES5 module\n- `src` directory containing the ES6 addon code\n- `dist` directory containing transpiled ES5 code on publish\n- [GitHub](https://github.com/) account to host your code\n- [NPM](https://www.npmjs.com/) account to publish the addon\n\nReference the [storybook-addon-outline](https://www.npmjs.com/package/storybook-addon-outline) to see a project that meets these requirements.\n\nLearn how to [add to the addon catalog](../addons/integration-catalog.md#addons).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-addons.md","loc":{"lines":{"from":241,"to":255}}}}],["81",{"pageContent":"More guides and tutorials\n\nIn the previous example, we introduced the structure of an addon but barely scratched the surface of what addons can do.\n\nTo dive deeper, we recommend Storybook's [creating an addon](https://storybook.js.org/tutorials/create-an-addon/) tutorial. It’s an excellent walkthrough covering the same ground as the above introduction but goes further and leads you through the entire process of creating a realistic addon.\n\n### Addon kit\n\nTo help you jumpstart the addon development, the Storybook maintainers created an [`addon-kit`](https://github.com/storybookjs/addon-kit), use it to bootstrap your next addon.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-addons.md","loc":{"lines":{"from":257,"to":265}}}}],["82",{"pageContent":"---\ntitle: 'Write a preset addon'\n---\n\n[Storybook preset addons](./addon-types.md#preset-addons) are grouped collections of `babel`, `webpack`, and `addons` configurations that support specific use cases in Storybook, such as TypeScript or MDX support.\n\nThis doc covers the [presets API](#presets-api) and how to use the presets mechanism for [advanced configuration](#advanced-configuration).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-presets.md","loc":{"lines":{"from":1,"to":7}}}}],["83",{"pageContent":"Presets API\n\nA preset is a set of hooks that are called by Storybook on initialization and can override configurations for `babel`, `webpack`, `addons`, and `entries`.\n\nEach configuration has a similar signature, accepting a base configuration object and options, as in this Webpack example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-webpack-preset-config.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-presets.md","loc":{"lines":{"from":9,"to":23}}}}],["84",{"pageContent":"Babel\n\nThe babel functions `babel` and `babelDefault` all configure babel in different ways.\n\nAll functions take a [Babel configuration object](https://babeljs.io/docs/en/configuration) as their argument and can modify it or return a new object.\n\nFor example, Storybook's Mihtril support uses plugins internally and here's how it configures babel:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-babel-configuration-example.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n- `babel` is applied to the preview config, after it has been initialized by storybook\n- `babelDefault` is applied to the preview config before any user presets have been applied","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-presets.md","loc":{"lines":{"from":25,"to":44}}}}],["85",{"pageContent":"Webpack\n\nThe Webpack functions `webpack`, `webpackFinal`, and `managerWebpack` configure Webpack.\n\nAll functions take a [webpack4 configuration object](https://webpack.js.org/configuration/).\n\nFor example, here is how Storybook automatically adopts `create-react-app`'s configuration if it's installed, where `applyCRAWebpackConfig` is a set of smart heuristics for modifying the input config.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-webpackfinal-example.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n- `webpack` is applied to the preview config after it has been initialized by Storybook\n- `webpackFinal` is applied to the preview config after all user presets have been applied\n- `managerWebpack` is applied to the manager config","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-presets.md","loc":{"lines":{"from":46,"to":66}}}}],["86",{"pageContent":"As of Storybook 6.3, Storybook can run with either `webpack4` or `webpack5` builder. If your addon needs to know which version of Webpack it's running inside, the version and the actual Webpack instance itself are both available inside your preset:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-versioned-webpack.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-presets.md","loc":{"lines":{"from":68,"to":78}}}}],["87",{"pageContent":"Manager entries\n\nThe addon config `managerEntries` allows you to add addons to Storybook from within a preset. For addons that require custom Webpack/Babel configuration, it is easier to install the preset, and it will take care of everything.\n\nFor example, the Storysource preset contains the following code:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-storysource-manager-entries.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThis is equivalent to [registering the addon manually](../get-started/browse-stories.md#addons) in [`main.js`](../configure/overview.md#configure-story-rendering):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-use-manager-entries.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-presets.md","loc":{"lines":{"from":80,"to":106}}}}],["88",{"pageContent":"Preview entries\n\nThe addon `config` function allows you to add extra preview configuration from within a preset, for example to add parameters or decorators from an addon.\n\nFor example, the Backgrounds preset contains the following code:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-backgrounds-preset-config.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nWhich in turn invokes:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-backgrounds-addon-default-params.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThis is equivalent to exporting the `backgrounds` parameter manually in `main.js`.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-presets.md","loc":{"lines":{"from":108,"to":136}}}}],["89",{"pageContent":"Addons\n\nFor users, the name `managerEntries` might be a bit too technical, so instead both users and preset-authors can simply use the `addons` property:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-register-storysource-example.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThe array of values can support both references to other presets and addons that should be included into the manager.\n\nStorybook will automatically detect whether a reference to an addon is a preset or a manager entry by checking if the package contains a `./preset.js` or `./register.js` (manager entry), falling back to preset if it is unsure.\n\nIf this heuristic is incorrect for an addon you are using, you can explicitly opt-in to an entry being a manager entry using the `managerEntries` key.\n\nHere's what it looks when combining presets and manager entries in the `addons` property:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-presets.md","loc":{"lines":{"from":138,"to":160}}}}],["90",{"pageContent":"Here's what it looks when combining presets and manager entries in the `addons` property:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-register-presets-managerentry.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-presets.md","loc":{"lines":{"from":160,"to":170}}}}],["91",{"pageContent":"Entries\n\nEntries are the place to register entry points for the preview. For example, it could be used to make a basic configure-storybook preset that loads all the `*.stories.js` files into SB, instead of forcing people to copy-paste the same thing everywhere.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-presets.md","loc":{"lines":{"from":172,"to":174}}}}],["92",{"pageContent":"Advanced Configuration\n\nThe presets API is also more powerful than the [standard configuration options](../builders/webpack.md#override-the-default-configuration) available in Storybook, so it's also possible to use presets for more advanced configuration without actually publishing a preset yourself.\n\nFor example, some users want to configure the Webpack for Storybook's UI and addons ([issue](https://github.com/storybookjs/storybook/issues/4995)), but this is not possible using [standard Webpack configuration](../builders/webpack.md#configure) (it used to be possible before SB4.1). However, you can achieve this with a private preset.\n\nIf it doesn't exist yet, create a file `.storybook/main.js`:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-advanced-config-example.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-presets.md","loc":{"lines":{"from":176,"to":192}}}}],["93",{"pageContent":"Preview/Manager templates\n\nIt's also possible to programmatically modify the preview head/body HTML using a preset, similar to the way `preview-head.html`/`preview-body.html` can be used to [configure story rendering](../configure/story-rendering.md). The `previewHead` and `previewBody` functions accept a string, which is the existing head/body, and return a modified string.\n\nFor example, the following snippet adds a style tag to the preview head programmatically:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-preview-head.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nSimilarly, the `managerHead` can be used to modify the surrounding \"manager\" UI, analogous to `manager-head.html`.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-presets.md","loc":{"lines":{"from":194,"to":210}}}}],["94",{"pageContent":"<!-- prettier-ignore-end -->\n\nSimilarly, the `managerHead` can be used to modify the surrounding \"manager\" UI, analogous to `manager-head.html`.\n\nFinally, the preview's main page _template_ can also be overridden using the `previewMainTemplate`, which should return a reference to a file containing an `.ejs` template that gets interpolated with some environment variables. For an example, see the [Storybook's default template](https://github.com/storybookjs/storybook/blob/next/code/lib/core-common/templates/preview.ejs).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-presets.md","loc":{"lines":{"from":210,"to":214}}}}],["95",{"pageContent":"Sharing advanced configuration\n\nChange your `main.js` file to:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-import-preset-config.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nand extract the configuration to a new file `./storybook/my-preset.js`:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preset-full-config-object.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nPlace your `my-preset.js` file wherever you want, if you want to share it far and wide you'll want to make it its own package.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/addons/writing-presets.md","loc":{"lines":{"from":216,"to":242}}}}],["96",{"pageContent":"---\ntitle: 'ArgTypes'\n---\n\nArgTypes are a first-class feature in Storybook for specifying the behaviour of [Args](../writing-stories/args.md). By specifying the type of an arg, you constrain the values that it can take and provide information about args that are not explicitly set (i.e., not required).\n\nYou can also use argTypes to “annotate” args with information used by addons that make use of those args. For instance, to instruct the controls addon to render a color, you could choose a string-valued arg.\n\nThe most concrete realization of argTypes is the [`ArgTypes` doc block](./doc-block-argtypes.md) ([`Controls`](./doc-block-controls.md) is similar). Each row in the table corresponds to a single argType and the current value of that arg.\n\n![Storybook inferring automatically the argType](./doc-block-argtypes.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/argtypes.md","loc":{"lines":{"from":1,"to":11}}}}],["97",{"pageContent":"Automatic argType inference\n\nIf you are using the Storybook [docs](../writing-docs/introduction.md) addon (installed by default as part of [essentials](../essentials/introduction.md)), then Storybook will infer a set of argTypes for each story based on the `component` specified in the [default export](./csf.md#default-export) of the CSF file.\n\nTo do so, Storybook uses various static analysis tools depending on your framework.\n\n- React\n  - [react-docgen](https://github.com/reactjs/react-docgen)\n  - [react-docgen-typescript](https://github.com/styleguidist/react-docgen-typescript)\n- Vue\n  - [vue-docgen-api](https://github.com/vue-styleguidist/vue-styleguidist/tree/dev/packages/vue-docgen-api)\n- Angular\n  - [compodoc](https://compodoc.app/)\n- WebComponents\n  - [custom-element.json](https://github.com/webcomponents/custom-elements-json)\n- Ember\n  - [YUI doc](https://github.com/ember-learn/ember-cli-addon-docs-yuidoc#documenting-components)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/argtypes.md","loc":{"lines":{"from":13,"to":29}}}}],["98",{"pageContent":"The format of the generated argType will look something like this:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-generated-argtypes.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThis ArgTypes data structure, name, type, defaultValue, and description are standard fields in all ArgTypes (analogous to PropTypes in React). The table and control fields are addon-specific annotations. So, for example, the table annotation provides extra information to customize how the label gets rendered, and the control annotation includes additional information for the control editing the property.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/argtypes.md","loc":{"lines":{"from":31,"to":43}}}}],["99",{"pageContent":"Manual specification\n\nIf you want more control over the args table or any other aspect of using argTypes, you can overwrite the generated argTypes for your component on a per-arg basis. For instance, with the above-inferred argTypes and the following default export:\n\n<div class=\"aside\">\n💡 As with other Storybook properties (e.g., args, decorators), you can also override ArgTypes per story basis.\n</div>\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/storybook-customize-argtypes.ts.mdx',\n    'web-components/storybook-customize-argtypes.js.mdx',\n    'web-components/storybook-customize-argtypes.ts.mdx',\n    'common/storybook-customize-argtypes.js.mdx',\n    'common/storybook-customize-argtypes.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThe `values.description`, `table.type`, and `controls.type` are merged into the defaults extracted by Storybook. The final merged values would be:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/argtypes.md","loc":{"lines":{"from":45,"to":69}}}}],["100",{"pageContent":"The `values.description`, `table.type`, and `controls.type` are merged into the defaults extracted by Storybook. The final merged values would be:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-merged-argtypes.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nIn particular, this would render a row with a modified description, a type display with a dropdown that shows the detail, and no control.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/argtypes.md","loc":{"lines":{"from":69,"to":81}}}}],["101",{"pageContent":"Available properties\n\nHere's an explanation of each available property:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/argtypes.md","loc":{"lines":{"from":83,"to":85}}}}],["102",{"pageContent":"| Property                     | Description                                                                                                                                                                                        |\n| ---------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `name`                       | The name of the property. <br/> `argTypes: { label: { name: 'Something' } }`                                                                                                                       |\n| `type.name`                  | Sets a type for the property. <br/> `argTypes: { label: { type: { name: 'number' } } }`                                                                                                            |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/argtypes.md","loc":{"lines":{"from":87,"to":90}}}}],["103",{"pageContent":"| `type.required`              | Sets the property as optional or required. <br/> `argTypes: { label: { type: { required: true } }`                                                                                                 |\n| `description`                | Sets a Markdown description for the property. <br/> `argTypes: { label: { description: 'Something' } }`                                                                                            |\n| `table.type.summary`         | Provide a short version of the type. <br/> `argTypes: { label: { table: { type: { summary: 'a short summary' } }}}`                                                                                |\n| `table.type.detail`          | Provides an extended version of the type. <br/> `argTypes: { label: { table: { type: { detail: 'something' } }}}`                                                                                  |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/argtypes.md","loc":{"lines":{"from":91,"to":94}}}}],["104",{"pageContent":"| `table.defaultValue.summary` | Provide a short version of the default value. <br/> `argTypes: { label: { table: { defaultValue: { summary: 'Hello World' } }}}`                                                                   |\n| `table.defaultValue.detail`  | Provides a longer version of the default value. <br/> `argTypes: { label: { table: { defaultValue: { detail: 'Something' } }}}`                                                                    |\n| `control`                    | Associates a control for the property. <br/> `argTypes: { label: { control: { type: 'text'} } }` <br/>Read the [Essentials documentation](../essentials/controls.md) to learn more about controls. |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/argtypes.md","loc":{"lines":{"from":95,"to":97}}}}],["105",{"pageContent":"Shorthands\n\n<div class=\"aside\">\n\n💡 The `@storybook/addon-docs` provide a shorthand for common tasks:\n\n- `type: 'number'` is shorthand for type: { name: 'number' }\n- `control: 'radio'` is shorthand for control: { type: 'radio' }\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/argtypes.md","loc":{"lines":{"from":99,"to":108}}}}],["106",{"pageContent":"Grouping\n\nYou can also manually specify groups to organize related `argTypes` into categories or even subcategories. Based on the following component implementation:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-implementation.js.mdx',\n    'react/button-implementation.ts.mdx',\n    'angular/button-implementation.ts.mdx',\n    'vue/button-implementation.2.js.mdx',\n    'vue/button-implementation.2.ts.mdx',\n    'vue/button-implementation.3.js.mdx',\n    'vue/button-implementation.3.ts.mdx',\n    'svelte/button-implementation.js.mdx',\n    'web-components/button-implementation.js.mdx',\n    'web-components/button-implementation.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nYou could group similar properties for better organization and structure. Using the table below as a reference:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/argtypes.md","loc":{"lines":{"from":110,"to":133}}}}],["107",{"pageContent":"<!-- prettier-ignore-end -->\n\nYou could group similar properties for better organization and structure. Using the table below as a reference:\n\n| Field               | Category |\n| :------------------ | :------: |\n| **backgroundColor** |  Colors  |\n| **primary**         |  Colors  |\n| **label**           |   Text   |\n| **onClick**         |  Events  |\n| **size**            |  Sizes   |\n\nResults in the following change into your story and UI.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/button-story-argtypes-with-categories.ts.mdx',\n    'web-components/button-story-argtypes-with-categories.js.mdx',\n    'web-components/button-story-argtypes-with-categories.ts.mdx',\n    'common/button-story-argtypes-with-categories.js.mdx',\n    'common/button-story-argtypes-with-categories.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n![button story with args grouped into categories](./button-args-grouped-categories.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/argtypes.md","loc":{"lines":{"from":133,"to":161}}}}],["108",{"pageContent":"<!-- prettier-ignore-end -->\n\n![button story with args grouped into categories](./button-args-grouped-categories.png)\n\nYou can also extend the formula above and introduce subcategories, allowing better structuring and organization. Using the table below as a reference leads to the following change to your story and UI:\n\n| Field               | Category |   Subcategory   |\n| :------------------ | :------: | :-------------: |\n| **backgroundColor** |  Colors  |  Button colors  |\n| **primary**         |  Colors  |  Button style   |\n| **label**           |   Text   | Button contents |\n| **onClick**         |  Events  |  Button Events  |\n| **size**            |  Sizes   |                 |\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/argtypes.md","loc":{"lines":{"from":161,"to":175}}}}],["109",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/button-story-argtypes-with-subcategories.ts.mdx',\n    'web-components/button-story-argtypes-with-subcategories.js.mdx',\n    'web-components/button-story-argtypes-with-subcategories.ts.mdx',\n    'common/button-story-argtypes-with-subcategories.js.mdx',\n    'common/button-story-argtypes-with-subcategories.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n![button story with args grouped into categories](./button-args-grouped-subcategories.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/argtypes.md","loc":{"lines":{"from":175,"to":189}}}}],["110",{"pageContent":"Global `argTypes`\n\nYou can also define arg types at the global level; they will apply to every component's stories unless you overwrite them. To do so, export the `argTypes` key in your `preview.js`:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/button-story-project-args-theme.js.mdx',\n    'common/button-story-project-args-theme.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n💡 If you define a global arg type for a story that does not have that arg (e.g. if there is no corresponding global arg definition), then the arg type will have no effect.\n</div>\n\n#### Using argTypes in addons\n\nIf you want to access the argTypes of the current component inside an addon, you can use the `useArgTypes` hook from the `@storybook/manager-api` package:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-argtypes-with-addon.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/argtypes.md","loc":{"lines":{"from":191,"to":222}}}}],["111",{"pageContent":"---\ntitle: 'CLI options'\n---\n\nThe Storybook command line interface (CLI) is the main tool you use to build and develop Storybook.\n\n<div class=\"aside\">\n\nStorybook collects completely anonymous data to help us improve user experience. Participation is optional, and you may [opt-out](../configure/telemetry.md#how-to-opt-out) if you'd not like to share any information.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":1,"to":11}}}}],["112",{"pageContent":"API commands\n\nAll of the following documentation is available in the CLI by running `storybook --help`.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":13,"to":15}}}}],["113",{"pageContent":"`dev`\n\nCompiles and serves a development build of your Storybook that reflects your source code changes in the browser in real time. Should be run from the root of your project.\n\n```shell\nstorybook dev [options]","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":17,"to":22}}}}],["114",{"pageContent":"Options include:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":25,"to":25}}}}],["115",{"pageContent":"| Option                          | Description                                                                                                                                                               |\n| ------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `--help`                        | Output usage information <br/>`storybook dev --help`                                                                                                                      |\n| `-V`, `--version`               | Output the version number <br/>`storybook dev -V`                                                                                                                         |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":27,"to":30}}}}],["116",{"pageContent":"| `-p`, `--port [number]`         | Port to run Storybook <br/>`storybook dev -p 9009`                                                                                                                        |\n| `-h`, `--host [string]`         | Host to run Storybook <br/>`storybook dev -h my-host.com`                                                                                                                 |\n| `-s`, `--static-dir`            | **Deprecated** [see note](#static-dir-deprecation). Directory where to load static files from, comma-separated list<br/>`storybook dev -s public`                         |\n| `-c`, `--config-dir [dir-name]` | Directory where to load Storybook configurations from <br/>`storybook dev -c .storybook`                                                                                  |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":31,"to":34}}}}],["117",{"pageContent":"| `--https`                       | Serve Storybook over HTTPS. Note: You must provide your own certificate information<br/>`storybook dev --https`                                                           |\n| `--ssl-ca`                      | Provide an SSL certificate authority. (Optional with --https, required if using a self-signed certificate)<br/>`storybook dev --ssl-ca my-certificate`                    |\n| `--ssl-cert`                    | Provide an SSL certificate. (Required with --https)<br/>`storybook dev --ssl-cert my-ssl-certificate`                                                                     |\n| `--ssl-key`                     | Provide an SSL key. (Required with --https)<br/>`storybook dev --ssl-key my-ssl-key`                                                                                      |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":35,"to":38}}}}],["118",{"pageContent":"| `--smoke-test`                  | Exit after successful start<br/>`storybook dev --smoke-test`                                                                                                              |\n| `--ci`                          | CI mode (skip interactive prompts, don't open browser)<br/>`storybook dev --ci`                                                                                           |\n| `--no-open`                     | Do not open Storybook automatically in the browser<br/>`storybook dev --no-open`                                                                                          |\n| `--quiet`                       | Suppress verbose build output<br/>`storybook dev --quiet`                                                                                                                 |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":39,"to":42}}}}],["119",{"pageContent":"| `--debug-webpack`               | Display final webpack configurations for debugging purposes<br/>`storybook dev --debug-webpack`                                                                           |\n| `--webpack-stats-json`          | Write Webpack Stats JSON to disk<br/>`storybook dev --webpack-stats-json /tmp/webpack-stats`                                                                              |\n| `--docs`                        | Starts Storybook in documentation mode. Learn more about it in [here](../writing-docs/build-documentation.md#preview-storybooks-documentation)<br/>`storybook dev --docs` |\n| `--disable-telemetry`           | Disables Storybook's telemetry. Learn more about it [here](../configure/telemetry.md)<br/>`storybook dev --disable-telemetry`                                             |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":43,"to":46}}}}],["120",{"pageContent":"<div class=\"aside\" id=\"static-dir-deprecation\">\n\n💡 Starting in 6.4 the `-s` flag is deprecated. Instead, use a configuration object in your `.storybook/main.js` file. See the [images and assets documentation](../configure/images-and-assets.md#serving-static-files-via-storybook) for more information.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":48,"to":52}}}}],["121",{"pageContent":"`build`\n\nCompiles your Storybook instance so it can be [deployed](../sharing/publish-storybook.md). Should be run from the root of your project.\n\n```shell\nstorybook build [options]","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":54,"to":59}}}}],["122",{"pageContent":"Options include:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":59,"to":59}}}}],["123",{"pageContent":"| Option                          | Description                                                                                                                                                                 |\n| ------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `-h`, `--help`                  | Output usage information<br/>`storybook build --help`                                                                                                                       |\n| `-V`, `--version`               | Output the version number<br/>`storybook build -V`                                                                                                                          |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":98,"to":101}}}}],["124",{"pageContent":"| `-s`, `--static-dir`            | **Deprecated** [see note](#static-dir-deprecation).<br/> Directory where to load static files from, comma-separated list<br/>`storybook build -s public`                    |\n| `-o`, `--output-dir [dir-name]` | Directory where to store built files<br/>`storybook build -o /my-deployed-storybook`                                                                                        |\n| `-c`, `--config-dir [dir-name]` | Directory where to load Storybook configurations from<br/>`storybook build -c .storybook`                                                                                   |\n| `--loglevel [level]`            | Controls level of logging during build.<br/> Available options: `silly`, `verbose`, `info` (default), `warn`, `error`, `silent`<br/>`storybook build --loglevel warn`       |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":102,"to":105}}}}],["125",{"pageContent":"| `--quiet`                       | Suppress verbose build output<br/>`storybook build --quiet`                                                                                                                 |\n| `--debug-webpack`               | Display final webpack configurations for debugging purposes<br/>`storybook build --debug-webpack`                                                                           |\n| `--webpack-stats-json`          | Write Webpack Stats JSON to disk<br/>`storybook build --webpack-stats-json /my-storybook/webpack-stats`                                                                     |\n| `--docs`                        | Builds Storybook in documentation mode. Learn more about it in [here](../writing-docs/build-documentation.md#publish-storybooks-documentation)<br/>`storybook build --docs` |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":106,"to":109}}}}],["126",{"pageContent":"| `--disable-telemetry`           | Disables Storybook's telemetry. Learn more about it [here](../configure/telemetry.md).<br/>`storybook build --disable-telemetry`                                            |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":110,"to":110}}}}],["127",{"pageContent":"<div class=\"aside\">\n💡  If you're using npm instead of yarn to publish Storybook, the commands work slightly different. For example, <code>npm run storybook build -- -o ./path/to/build</code>.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/cli-options.md","loc":{"lines":{"from":112,"to":114}}}}],["128",{"pageContent":"---\ntitle: 'Component Story Format (CSF)'\n---\n\n<YouTubeCallout id=\"uH9_dfc-6Kc\" title=\"Test components the EASY way | Component Story Format 3\" />\n\nComponent Story Format (CSF) is the recommended way to [write stories](../writing-stories/introduction.md). It's an [open standard](https://github.com/ComponentDriven/csf) based on ES6 modules that is portable beyond Storybook.\n\n<div class=\"aside\">\n\n💡 If you are writing stories in the older `storiesOf()` syntax, you can find documentation in an [advanced README](../../lib/preview-api/docs/storiesOf.md).\n\n</div>\n\nIn CSF, stories and component metadata are defined as ES Modules. Every component story file consists of a required [default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export) and one or more [named exports](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":1,"to":15}}}}],["129",{"pageContent":"CSF is supported in all frameworks except React Native, where you should use the [storiesOf API](../../lib/preview-api/docs/storiesOf.md) instead.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":17,"to":17}}}}],["130",{"pageContent":"Default export\n\nThe default export defines metadata about your component, including the `component` itself, its `title` (where it will show up in the [navigation UI story hierarchy](../writing-stories/naming-components-and-hierarchy.md#sorting-stories)), [decorators](../writing-stories/decorators.md), and [parameters](../writing-stories/parameters.md).\n\nThe `component` field is required and used by addons for automatic prop table generation and display of other component metadata. The `title` field is optional and should be unique (i.e., not re-used across files).\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/my-component-story-mandatory-export.ts.mdx',\n    'web-components/my-component-story-mandatory-export.js.mdx',\n    'web-components/my-component-story-mandatory-export.ts.mdx',\n    'common/my-component-story-mandatory-export.js.mdx',\n    'common/my-component-story-mandatory-export.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":19,"to":37}}}}],["131",{"pageContent":"<!-- prettier-ignore-end -->\n\nFor more examples, see [writing stories](../writing-stories/introduction.md).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":37,"to":39}}}}],["132",{"pageContent":"Named story exports\n\nWith CSF, every named export in the file represents a story object by default.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/my-component-story-basic-and-props.js.mdx',\n    'react/my-component-story-basic-and-props.ts.mdx',\n    'vue/my-component-story-basic-and-props.js.mdx',\n    'vue/my-component-story-basic-and-props.ts.mdx',\n    'svelte/my-component-story-basic-and-props.js.mdx',\n    'angular/my-component-story-basic-and-props.ts.mdx',\n    'web-components/my-component-story-basic-and-props.js.mdx',\n    'web-components/my-component-story-basic-and-props.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"api/csf#snippet-my-component-story-basic-and-props\"\n/>\n\n<!-- prettier-ignore-end -->\n\nThe exported identifiers will be converted to \"start case\" using Lodash's [startCase](https://lodash.com/docs/#startCase) function. For example:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":41,"to":64}}}}],["133",{"pageContent":"<!-- prettier-ignore-end -->\n\nThe exported identifiers will be converted to \"start case\" using Lodash's [startCase](https://lodash.com/docs/#startCase) function. For example:\n\n| Identifier       |  Transformation   |\n| ---------------- | :---------------: |\n| name             |       Name        |\n| someName         |     Some Name     |\n| someNAME         |     Some NAME     |\n| some_custom_NAME | Some Custom NAME  |\n| someName1234     | Some Name 1 2 3 4 |\n\nWe recommend that all export names to start with a capital letter.\n\nStory objects can be annotated with a few different fields to define story-level [decorators](../writing-stories/decorators.md) and [parameters](../writing-stories/parameters.md), and also to define the `name` of the story.\n\nStorybook's `name` configuration element is helpful in specific circumstances. Common use cases are names with special characters or Javascript restricted words. If not specified, Storybook defaults to the named export.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":64,"to":82}}}}],["134",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/my-component-story-with-storyname.ts.mdx',\n    'web-components/my-component-story-with-storyname.js.mdx',\n    'web-components/my-component-story-with-storyname.ts.mdx',\n    'common/my-component-story-with-storyname.js.mdx',\n    'common/my-component-story-with-storyname.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"api/csf#snippet-my-component-story-with-storyname\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":82,"to":96}}}}],["135",{"pageContent":"Args story inputs\n\nStarting in SB 6.0, stories accept named inputs called Args. Args are dynamic data that are provided (and possibly updated by) Storybook and its addons.\n\nConsider Storybook’s [\"Button\" example](../writing-stories/introduction.md#defining-stories) of a text button that logs its click events:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-click-handler.js.mdx',\n    'react/button-story-click-handler.ts.mdx',\n    'vue/button-story-click-handler.2.js.mdx',\n    'vue/button-story-click-handler.2.ts.mdx',\n    'vue/button-story-click-handler.3.js.mdx',\n    'vue/button-story-click-handler.3.ts.mdx',\n    'svelte/button-story-click-handler.js.mdx',\n    'angular/button-story-click-handler.ts.mdx',\n    'web-components/button-story-click-handler.js.mdx',\n    'web-components/button-story-click-handler.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"api/csf#snippet-button-story-click-handler\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":98,"to":123}}}}],["136",{"pageContent":"<!-- prettier-ignore-end -->\n\nNow consider the same example, re-written with args:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-click-handler-args.js.mdx',\n    'react/button-story-click-handler-args.ts.mdx',\n    'vue/button-story-click-handler-args.2.js.mdx',\n    'vue/button-story-click-handler-args.2.ts.mdx',\n    'vue/button-story-click-handler-args.3.js.mdx',\n    'vue/button-story-click-handler-args.3.ts.mdx',\n    'angular/button-story-click-handler-args.ts.mdx',\n    'svelte/button-story-click-handler-args.js.mdx',\n    'web-components/button-story-click-handler-args.js.mdx',\n    'web-components/button-story-click-handler-args.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"api/csf#snippet-button-story-click-handler-args\"\n/>\n\n<!-- prettier-ignore-end -->\n\nOr even more simply:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":123,"to":150}}}}],["137",{"pageContent":"<!-- prettier-ignore-end -->\n\nOr even more simply:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-click-handler-simplificated.js.mdx',\n    'react/button-story-click-handler-simplificated.ts.mdx',\n    'angular/button-story-click-handler-simplificated.ts.mdx',\n    'vue/button-story-click-handler-simplificated.js.mdx',\n    'vue/button-story-click-handler-simplificated.ts.mdx',\n    'web-components/button-story-click-handler-simplificated.js.mdx',\n    'web-components/button-story-click-handler-simplificated.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"api/csf#snippet-button-story-click-handler-simplificated\"\n/>\n\n<!-- prettier-ignore-end -->\n\nNot only are these versions shorter and more accessible to write than their no-args counterparts, but they are also more portable since the code doesn't depend on the actions addon specifically.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":150,"to":172}}}}],["138",{"pageContent":"Not only are these versions shorter and more accessible to write than their no-args counterparts, but they are also more portable since the code doesn't depend on the actions addon specifically.\n\nFor more information on setting up [Docs](../writing-docs/introduction.md) and [Actions](../essentials/actions.md), see their respective documentation.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":172,"to":174}}}}],["139",{"pageContent":"Play function\n\nStorybook's `play` functions are small snippets of code executed when the story renders in the UI. They are convenient helper methods to help you test use cases that otherwise weren't possible or required user intervention.\n\nA good use case for the `play` function is a form component. With previous Storybook versions, you'd write your set of stories and had to interact with the component to validate it. With Storybook's play functions, you could write the following story:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":176,"to":182}}}}],["140",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/login-form-with-play-function.js.mdx',\n    'react/login-form-with-play-function.ts.mdx',\n    'angular/login-form-with-play-function.ts.mdx',\n    'vue/login-form-with-play-function.js.mdx',\n    'vue/login-form-with-play-function.ts.mdx',\n    'web-components/login-form-with-play-function.js.mdx',\n    'web-components/login-form-with-play-function.ts.mdx',\n    'svelte/login-form-with-play-function.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"api/csf#snippet-login-form-with-play-function\"\n/>\n\n<!-- prettier-ignore-end -->\n\nWhen the story renders in the UI, Storybook executes each step defined in the `play` function and runs the assertions without the need for user interaction.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":182,"to":201}}}}],["141",{"pageContent":"Custom render functions\n\nStarting in Storybook 6.4, you can write your stories as JavaScript objects, reducing the boilerplate code you need to generate to test your components, thus improving functionality and usability. `Render` functions are helpful methods to give you additional control over how the story renders. For example, if you were writing a story as an object and you wanted to specify how your component should render, you could write the following:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":203,"to":207}}}}],["142",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'react/component-story-with-custom-render-function.js.mdx',\n   'react/component-story-with-custom-render-function.ts.mdx',\n   'angular/component-story-with-custom-render-function.ts.mdx',\n   'vue/component-story-with-custom-render-function.js.mdx',\n   'vue/component-story-with-custom-render-function.ts.mdx',\n   'preact/component-story-with-custom-render-function.js.mdx',\n   'web-components/component-story-with-custom-render-function.js.mdx',\n   'web-components/component-story-with-custom-render-function.ts.mdx',\n  ]}\n  usesCsf3\n/>\n\n<!-- prettier-ignore-end -->\n\nWhen Storybook loads this story, it will detect the existence of a `render` function and adjust the component rendering accordingly based on what's defined.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":207,"to":225}}}}],["143",{"pageContent":"Storybook export vs. name handling\n\nStorybook handles named exports and the `name` option slightly differently. When should you use one vs. the other?\n\nStorybook will always use the named export to determine the story ID and URL.\n\nIf you specify the `name` option, it will be used as the story display name in the UI. Otherwise, it defaults to the named export, processed through Storybook's `storyNameFromExport` and `lodash.startCase` functions.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-with-storyname.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nWhen you want to change the name of your story, rename the CSF export. It will change the name of the story and also change the story's ID and URL.\n\nIt would be best if you used the `name` configuration element in the following cases:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":227,"to":247}}}}],["144",{"pageContent":"It would be best if you used the `name` configuration element in the following cases:\n\n1. You want the name to show up in the Storybook UI in a way that's not possible with a named export, e.g., reserved keywords like \"default\", special characters like emoji, spacing/capitalization other than what's provided by `storyNameFromExport`.\n2. You want to preserve the Story ID independently from changing how it's displayed. Having stable Story IDs is helpful for integration with third-party tools.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":247,"to":250}}}}],["145",{"pageContent":"Non-story exports\n\nIn some cases, you may want to export a mixture of stories and non-stories (e.g., mocked data).\n\nYou can use the optional configuration fields `includeStories` and `excludeStories` in the default export to make this possible. You can define them as an array of strings or regular expressions.\n\nConsider the following story file:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/my-component-story-with-nonstory.js.mdx',\n    'react/my-component-story-with-nonstory.ts.mdx',\n    'vue/my-component-story-with-nonstory.js.mdx',\n    'vue/my-component-story-with-nonstory.ts.mdx',\n    'svelte/my-component-story-with-nonstory.js.mdx',\n    'angular/my-component-story-with-nonstory.ts.mdx',\n    'web-components/my-component-story-with-nonstory.js.mdx',\n    'web-components/my-component-story-with-nonstory.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"api/csf#snippet-my-component-story-with-nonstory\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":252,"to":277}}}}],["146",{"pageContent":"<!-- prettier-ignore-end -->\n\nWhen this file renders in Storybook, it treats `ComplexStory` and `SimpleStory` as stories and ignores the `data` named exports.\n\nFor this particular example, you could achieve the same result in different ways, depending on what's convenient:\n\n- `includeStories: /^[A-Z]/`\n- `includeStories: /.*Story$/`\n- `includeStories: ['SimpleStory', 'ComplexStory']`\n- `excludeStories: /^[a-z]/`\n- `excludeStories: /.*Data$/`\n- `excludeStories: ['simpleData', 'complexData']`\n\nThe first option is the recommended solution if you follow the best practice of starting story exports with an uppercase letter (i.e., use UpperCamelCase).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":277,"to":290}}}}],["147",{"pageContent":"Upgrading from CSF 2 to CSF 3\n\nIn CSF 2, the named exports are always functions that instantiate a component, and those functions can be annotated with configuration options. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/csf-2-example-starter.js.mdx',\n    'react/csf-2-example-starter.ts.mdx',\n    'vue/csf-2-example-starter.2.js.mdx',\n    'vue/csf-2-example-starter.2.ts.mdx',\n    'vue/csf-2-example-starter.3.js.mdx',\n    'vue/csf-2-example-starter.3.ts.mdx',\n    'angular/csf-2-example-starter.ts.mdx',\n    'web-components/csf-2-example-starter.js.mdx',\n    'web-components/csf-2-example-starter.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThis declares a Primary story for a Button that renders itself by spreading `{ primary: true }` into the component. The `default.title` metadata says where to place the story in a navigation hierarchy.\n\nHere's the CSF 3 equivalent:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":292,"to":318}}}}],["148",{"pageContent":"Here's the CSF 3 equivalent:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/csf-3-example-starter.js.mdx',\n    'react/csf-3-example-starter.ts.mdx',\n    'vue/csf-3-example-starter.ts.mdx',\n    'angular/csf-3-example-starter.ts.mdx',\n    'web-components/csf-3-example-starter.js.mdx',\n    'web-components/csf-3-example-starter.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nLet's go through the changes individually to understand what's going on.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":318,"to":335}}}}],["149",{"pageContent":"Spreadable story objects\n\nIn CSF 3, the named exports are **objects**, not functions. This allows us to reuse stories more efficiently with the JS spread operator.\n\nConsider the following addition to the intro example, which creates a `PrimaryOnDark` story that renders against a dark background:\n\nHere's the CSF 2 implementation:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/csf-2-example-primary-dark-story.js.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n`Primary.bind({})` copies the story function, but it doesn't copy the annotations hanging off the function, so we must add `PrimaryOnDark.args = Primary.args` to inherit the args.\n\nIn CSF 3, we can spread the `Primary` object to carry over all its annotations:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/csf-3-example-primary-dark-story.js.mdx',\n    'common/csf-3-example-primary-dark-story.ts.mdx',\n  ]}\n/>\n\nLearn more about [named story exports](#named-story-exports).\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":337,"to":370}}}}],["150",{"pageContent":"Default render functions\n\nIn CSF 3, you specify how a story renders through a `render` function. We can rewrite a CSF 2 example to CSF 3 through the following steps.\n\nLet's start with a simple CSF 2 story function:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/csf-2-example-story.js.mdx',\n    'react/csf-2-example-story.ts.mdx',\n    'vue/csf-2-example-story.2.js.mdx',\n    'vue/csf-2-example-story.2.ts.mdx',\n    'vue/csf-2-example-story.3.js.mdx',\n    'vue/csf-2-example-story.3.ts.mdx',\n    'angular/csf-2-example-story.ts.mdx',\n    'web-components/csf-2-example-story.js.mdx',\n    'web-components/csf-2-example-story.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nNow, let's rewrite it as a story object in CSF 3 with an explicit `render` function that tells the story how to render itself. Like CSF 2, this gives us full control of how we render a component or even a collection of components.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":372,"to":398}}}}],["151",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/csf-3-example-render.js.mdx',\n    'react/csf-3-example-render.ts.mdx',\n    'vue/csf-3-example-render.2.js.mdx',\n    'vue/csf-3-example-render.2.ts.mdx',\n    'vue/csf-3-example-render.3.js.mdx',\n    'vue/csf-3-example-render.3.ts.mdx',\n    'angular/csf-3-example-render.ts.mdx',\n    'web-components/csf-3-example-render.js.mdx',\n    'web-components/csf-3-example-render.ts.mdx',\n  ]}\n/>\n\nLearn more about [render functions](#custom-render-functions).\n\n<!-- prettier-ignore-end -->\n\nBut in CSF 2, a lot of story functions are identical: take the component specified in the default export and spread args into it. What's interesting about these stories is not the function, but the args passed into the function.\n\nCSF 3 provides default render functions for each renderer. If all you're doing is spreading args into your component—which is the most common case—you don't need to specify any `render` function at all:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":398,"to":420}}}}],["152",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/csf-3-example-default-render.js.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nFor more information, see the section on [custom render functions](#custom-render-functions).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":422,"to":432}}}}],["153",{"pageContent":"Generate titles automatically\n\nFinally, CSF 3 can automatically generate titles.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/csf-2-example-title.js.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/csf-3-example-auto-title.js.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nYou can still specify a title like in CSF 2, but if you don't specify one, it can be inferred from the story's path on disk. For more information, see the section on [configuring story loading](../configure/overview#configure-story-loading).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/csf.md","loc":{"lines":{"from":434,"to":458}}}}],["154",{"pageContent":"---\ntitle: 'ArgTypes'\n---\n\nThe `ArgTypes` block can be used to show a static table of [arg types](./argtypes.md) for a given component, as a way to document its interface.\n\n<div class=\"aside\">\n\n💡 If you’re looking for a dynamic table that shows a story’s current arg values for a story and supports users changing them, see the [`Controls`](./doc-block-controls.md) block instead.\n\n</div>\n\n![Screenshot of ArgTypes block](./doc-block-argtypes.png)\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<ArgTypes of={ButtonStories} />\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-argtypes.md","loc":{"lines":{"from":1,"to":26}}}}],["155",{"pageContent":"ArgTypes\n\n```js\nimport { ArgTypes } from '@storybook/blocks';","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-argtypes.md","loc":{"lines":{"from":28,"to":31}}}}],["156",{"pageContent":"<details>\n<summary>Configuring with props <strong>and</strong> parameters</summary>\n\nℹ️ Like most blocks, the `ArgTypes` block is configured with props in MDX. Many of those props derive their default value from a corresponding [parameter](../writing-stories/parameters.md) in the block's namespace, `parameters.docs.argTypes`.\n\nThe following `exclude` configurations are equivalent:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/api-doc-block-argtypes-parameter.ts.mdx',\n    'web-components/api-doc-block-argtypes-parameter.js.mdx',\n    'web-components/api-doc-block-argtypes-parameter.ts.mdx',\n    'web-components/api-doc-block-argtypes-parameter.ts.mdx',\n    'common/api-doc-block-argtypes-parameter.js.mdx',\n    'common/api-doc-block-argtypes-parameter.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\n<ArgTypes of={ButtonStories} exclude={['style']} />\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-argtypes.md","loc":{"lines":{"from":34,"to":62}}}}],["157",{"pageContent":"<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\n<ArgTypes of={ButtonStories} exclude={['style']} />\n```\n<!-- prettier-ignore-end -->\n\nThe example above applied the parameter at the [component](../writing-stories/parameters.md#component-parameters) (or meta) level, but it could also be applied at the [project](../writing-stories/parameters.md#global-parameters) or [story](../writing-stories/parameters.md#story-parameters) level.\n\n</details>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-argtypes.md","loc":{"lines":{"from":62,"to":74}}}}],["158",{"pageContent":"`exclude`\n\nType: `string[] | RegExp`\n\nDefault: `parameters.docs.argTypes.exclude`\n\nSpecifies which arg types to exclude from the args table. Any arg types whose names match the regex or are part of the array will be left out.\n\n### `include`\n\nType: `string[] | RegExp`\n\nDefault: `parameters.docs.argTypes.include`\n\nSpecifies which arg types to include in the args table. Any arg types whose names don’t match the regex or are not part of the array will be left out.\n\n### `of`\n\nType: Story export or CSF file exports\n\nSpecifies which story to get the arg types from. If a CSF file exports is provided, it will use the primary (first) story in the file.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-argtypes.md","loc":{"lines":{"from":76,"to":96}}}}],["159",{"pageContent":"`of`\n\nType: Story export or CSF file exports\n\nSpecifies which story to get the arg types from. If a CSF file exports is provided, it will use the primary (first) story in the file.\n\n### `sort`\n\nType: `'none' | 'alpha' | 'requiredFirst'`\n\nDefault: `parameters.docs.argTypes.sort` or `'none'`\n\nSpecifies how the arg types are sorted.\n\n- **none**: Unsorted, displayed in the same order the arg types are processed in\n- **alpha**: Sorted alphabetically, by the arg type's name\n- **requiredFirst**: Same as `alpha`, with any required arg types displayed first","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-argtypes.md","loc":{"lines":{"from":96,"to":112}}}}],["160",{"pageContent":"---\ntitle: 'Canvas'\n---\n\nThe `Canvas` block is a wrapper around a [`Story`](./doc-block-story.md), featuring a toolbar that allows you to interact with its content while automatically providing the required [`Source`](./doc-block-source.md) snippets.\n\n![Screenshot of Canvas block](./doc-block-canvas.png)\n\nWhen using the Canvas block in MDX, it references a story with the `of` prop:\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta, Canvas } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<Canvas of={ButtonStories.Primary} />\n```\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 In previous versions of Storybook it was possible to pass in arbitrary components as children to `Canvas`. That is deprecated and the `Canvas` block now only supports a single story.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-canvas.md","loc":{"lines":{"from":1,"to":28}}}}],["161",{"pageContent":"Canvas\n\n```js\nimport { Canvas } from '@storybook/blocks';","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-canvas.md","loc":{"lines":{"from":30,"to":33}}}}],["162",{"pageContent":"<details>\n<summary>Configuring with props <strong>and</strong> parameters</summary>\n\nℹ️ Like most blocks, the `Canvas` block is configured with props in MDX. Many of those props derive their default value from a corresponding [parameter](../writing-stories/parameters.md) in the block's namespace, `parameters.docs.canvas`.\n\nThe following `sourceState` configurations are equivalent:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/api-doc-block-canvas-parameter.ts.mdx',\n    'web-components/api-doc-block-canvas-parameter.js.mdx',\n    'web-components/api-doc-block-canvas-parameter.ts.mdx',\n    'common/api-doc-block-canvas-parameter.js.mdx',\n    'common/api-doc-block-canvas-parameter.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\n<Canvas of={ButtonStories.Basic} sourceState=\"shown\" />\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-canvas.md","loc":{"lines":{"from":36,"to":63}}}}],["163",{"pageContent":"<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\n<Canvas of={ButtonStories.Basic} sourceState=\"shown\" />\n```\n<!-- prettier-ignore-end -->\n\nThe example above applied the parameter at the [story](../writing-stories/parameters.md#story-parameters) level, but it could also be applied at the [component](../writing-stories/parameters.md#component-parameters) (or meta) level or [project](../writing-stories/parameters.md#global-parameters) level.\n\n</details>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-canvas.md","loc":{"lines":{"from":63,"to":75}}}}],["164",{"pageContent":"`additionalActions`\n\nType:\n\n<!-- prettier-ignore-start -->\n```ts\nArray<{\n  title: string | JSX.Element;\n  className?: string;\n  onClick: () => void;\n  disabled?: boolean;\n}>;\n```\n<!-- prettier-ignore-end -->\n\nDefault: `parameters.docs.canvas.additionalActions`\n\nProvides any additional custom actions to show in the bottom right corner. These are simple buttons that do anything you specify in the `onClick` function.\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta, Story, Canvas, SourceState } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n{/* with an additional action */}\n<Canvas\n  additionalActions={[\n    {\n      title: 'Open in GitHub',\n      onClick: () => {\n        window.open(\n          'https://github.com/storybookjs/storybook/blob/next/code/ui/blocks/src/examples/Button.stories.tsx',\n          '_blank'\n        );\n      },\n    }\n  ]}\n  of={ButtonStories.Primary}\n/>\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-canvas.md","loc":{"lines":{"from":77,"to":121}}}}],["165",{"pageContent":"`className`\n\nType: `string`\n\nDefault: `parameters.docs.canvas.className`\n\nProvides HTML class(es) to the preview element, for custom styling.\n\n### `layout`\n\nType: `'padded' | 'centered' | 'fullscreen'`\n\nDefault: `parameters.layout` or `parameters.docs.canvas.layout` or `'padded'`\n\nSpecifies how the canvas should layout the story.\n\n- **padded**: Add padding to the story\n- **centered**: Center the story within the canvas\n- **fullscreen**: Show the story as-is, without padding\n\nIn addition to the `parameters.docs.canvas.layout` property or the `layout` prop, the `Canvas` block will respect the `parameters.layout` value that defines [how a story is laid out](../configure/story-layout.md) in the regular story view.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-canvas.md","loc":{"lines":{"from":123,"to":143}}}}],["166",{"pageContent":"`meta`\n\nType: CSF file exports\n\nSpecifies the CSF file to which the story is associated.\n\nYou can render a story from a CSF file that you haven’t attached to the MDX file (via `Meta`) by using the `meta` prop. Pass the **full set of exports** from the CSF file (not the default export!).\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta, Canvas } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\nimport * as HeaderStories from './Header.stories';\n\n<Meta of={ButtonStories} />\n\n{/* Although this MDX file is largely concerned with Button,\n    it can render Header stories too */}\n<Canvas of={HeaderStories.LoggedIn} meta={HeaderStories} />\n```\n<!-- prettier-ignore-end -->\n\n### `of`\n\nType: Story export\n\nSpecifies which story's source is displayed.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-canvas.md","loc":{"lines":{"from":145,"to":173}}}}],["167",{"pageContent":"`of`\n\nType: Story export\n\nSpecifies which story's source is displayed.\n\n### `source`\n\nType: `SourceProps['code'] | SourceProps['format'] | SourceProps['language'] | SourceProps['type']`\n\nSpecifies props passed to the inner `Source` block. See [SourceProps](./doc-block-source.md#sourceprops).\n\n<div class=\"aside\">\n\n💡 The dark prop is ignored, as the `Source` block is always rendered in dark mode when shown as part of a `Canvas` block.\n\n</div>\n\n### `sourceState`\n\nType: `'hidden' | 'shown' | 'none'`\n\nDefault: `parameters.docs.canvas.sourceState` or `'hidden'`\n\nSpecifies the initial state of the source panel.\n\n- **hidden**: the source panel is hidden by default\n- **shown**: the source panel is shown by default\n- **none**: the source panel is not available and the button to show it is not rendered\n\n### `story`\n\nType: `StoryProps['inline'] | StoryProps['height'] | StoryProps['autoplay']`\n\nSpecifies props passed to the inner `Story` block. See [StoryProps](./doc-block-story.md#storyprops).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-canvas.md","loc":{"lines":{"from":173,"to":207}}}}],["168",{"pageContent":"`story`\n\nType: `StoryProps['inline'] | StoryProps['height'] | StoryProps['autoplay']`\n\nSpecifies props passed to the inner `Story` block. See [StoryProps](./doc-block-story.md#storyprops).\n\n### `withToolbar`\n\nType: `boolean`\n\nDefault: `parameters.docs.canvas.withToolbar`\n\nDetermines whether to render a toolbar containing tools to interact with the story.\n\n### `children` (deprecated)\n\nType: `React.ReactNode`\n\nExpects only [Story](./doc-block-story.md) children. Reference the story with the `of` prop instead.\n\n### `columns` (deprecated)\n\nType: `number`\n\nSplits the stories based on the number of defined columns. Multiple stories are not supported.\n\n### `isColumn` (deprecated)\n\nType: `boolean`\n\nDisplays the stories one above the other. Multiple stories are not supported.\n\n### `mdxSource` (deprecated)\n\nType: `string`\n\nProvides source to display. Use [`source.code`](#source) instead.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-canvas.md","loc":{"lines":{"from":207,"to":243}}}}],["169",{"pageContent":"`mdxSource` (deprecated)\n\nType: `string`\n\nProvides source to display. Use [`source.code`](#source) instead.\n\n### `withSource` (deprecated)\n\nType: `'open' | 'closed' | 'none'`\n\nControls the source code block visibility. Use [`sourceState`](#sourcestate) instead.\n\n### `withToolbar` (deprecated)\n\nType: `boolean`\n\nSets the Canvas toolbar visibility. Use [`story.withToolbar`](#story) instead.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-canvas.md","loc":{"lines":{"from":243,"to":259}}}}],["170",{"pageContent":"---\ntitle: 'ColorPalette'\n---\n\nThe `ColorPalette` block allows you to document all color-related items (e.g., swatches) used throughout your project.\n\n![Screenshot of ColorPalette and ColorItem blocks](./doc-block-colorpalette.png)\n\n<!-- prettier-ignore-start -->\n```md\n{/* Colors.mdx */}\n\nimport { Meta, ColorPalette, ColorItem } from '@storybook/blocks';\n\n<Meta title=\"Colors\" />","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-colorpalette.md","loc":{"lines":{"from":1,"to":15}}}}],["171",{"pageContent":"<!-- prettier-ignore-start -->\n```md\n{/* Colors.mdx */}\n\nimport { Meta, ColorPalette, ColorItem } from '@storybook/blocks';\n\n<Meta title=\"Colors\" />\n\n<ColorPalette>\n  <ColorItem\n    title=\"theme.color.greyscale\"\n    subtitle=\"Some of the greys\"\n    colors={{ White: '#FFFFFF', Alabaster: '#F8F8F8', Concrete: '#F3F3F3' }}\n  />\n  <ColorItem \n    title=\"theme.color.primary\" \n    subtitle=\"Coral\" \n    colors={{ WildWatermelon: '#FF4785' }} \n  />\n  <ColorItem \n    title=\"theme.color.secondary\" \n    subtitle=\"Ocean\" \n    colors={{ DodgerBlue: '#1EA7FD' }} \n  />\n  <ColorItem\n    title=\"theme.color.positive\"\n    subtitle=\"Green\"\n    colors={{\n      Apple: 'rgba(102,191,60,1)',\n      Apple80: 'rgba(102,191,60,.8)',\n      Apple60: 'rgba(102,191,60,.6)',\n      Apple30: 'rgba(102,191,60,.3)',\n    }}\n  />\n</ColorPalette>\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-colorpalette.md","loc":{"lines":{"from":15,"to":51}}}}],["172",{"pageContent":"ColorPalette\n\n```js\nimport { ColorPalette } from '@storybook/blocks';\n```\n\n`ColorPalette` is configured with the following props:\n\n### `children`\n\nType: `React.ReactNode`\n\n`ColorPalette` expects only `ColorItem` children.\n\n## ColorItem\n\n```js\nimport { ColorItem } from '@storybook/blocks';\n```\n\n`ColorItem` is configured with the following props:\n\n### `colors` (required)\n\nType: `string[] | { [key: string]: string }`\n\nProvides the list of colors to be displayed. Accepts any valid CSS color format (hex, RGB, HSL, etc.). When an object is provided, the keys will be displayed above the values.\n\n### `subtitle` (required)\n\nType: `string`\n\nProvides an additional description of the color.\n\n### `title` (required)\n\nType: `string`\n\nSets the name of the color to be displayed.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-colorpalette.md","loc":{"lines":{"from":53,"to":91}}}}],["173",{"pageContent":"---\ntitle: 'Controls'\n---\n\nThe `Controls` block can be used to show a dynamic table of args for a given story, as a way to document its interface, and to allow you to change the args for a (separately) rendered story (via the [`Story`](./doc-block-story.md) or [`Canvas`](./doc-block-canvas.md) blocks).\n\n<div class=\"aside\">\n\n💡 If you’re looking for a static table that shows a component's arg types with no controls, see the [`ArgTypes`](./doc-block-argtypes.md) block instead.\n\n</div>\n\n![Screenshot of Controls block](./doc-block-controls.png)\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta, Canvas, Controls } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories'\n\n<Meta of={ButtonStories} />\n\n<Canvas of={ButtonStories.Primary} />\n\n<Controls of={ButtonStories.Primary} />\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-controls.md","loc":{"lines":{"from":1,"to":28}}}}],["174",{"pageContent":"Controls\n\n```js\nimport { Controls } from '@storybook/blocks';","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-controls.md","loc":{"lines":{"from":30,"to":33}}}}],["175",{"pageContent":"<details>\n<summary>Configuring with props <strong>and</strong> parameters</summary>\n\nℹ️ Like most blocks, the `Controls` block is configured with props in MDX. Many of those props derive their default value from a corresponding [parameter](../writing-stories/parameters.md) in the block's namespace, `parameters.docs.controls`.\n\nThe following `exclude` configurations are equivalent:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/api-doc-block-controls-parameter.ts.mdx',\n    'web-components/api-doc-block-controls-parameter.js.mdx',\n    'web-components/api-doc-block-controls-parameter.ts.mdx',\n    'common/api-doc-block-controls-parameter.js.mdx',\n    'common/api-doc-block-controls-parameter.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\n<Controls of={ButtonStories} exclude={['style']} />\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-controls.md","loc":{"lines":{"from":36,"to":63}}}}],["176",{"pageContent":"<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\n<Controls of={ButtonStories} exclude={['style']} />\n```\n<!-- prettier-ignore-end -->\n\nThe example above applied the parameter at the [component](../writing-stories/parameters.md#component-parameters) (or meta) level, but it could also be applied at the [project](../writing-stories/parameters.md#global-parameters) or [story](../writing-stories/parameters.md#story-parameters) level.\n\n</details>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-controls.md","loc":{"lines":{"from":63,"to":75}}}}],["177",{"pageContent":"`exclude`\n\nType: `string[] | RegExp`\n\nDefault: `parameters.docs.controls.exclude`\n\nSpecifies which controls to exclude from the args table. Any controls whose names match the regex or are part of the array will be left out.\n\n### `include`\n\nType: `string[] | RegExp`\n\nDefault: `parameters.docs.controls.include`\n\nSpecifies which controls to include in the args table. Any controls whose names don't match the regex or are not part of the array will be left out.\n\n### `of`\n\nType: Story export or CSF file exports\n\nSpecifies which story to get the controls from. If a CSF file exports is provided, it will use the primary (first) story in the file.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-controls.md","loc":{"lines":{"from":77,"to":97}}}}],["178",{"pageContent":"`of`\n\nType: Story export or CSF file exports\n\nSpecifies which story to get the controls from. If a CSF file exports is provided, it will use the primary (first) story in the file.\n\n### `sort`\n\nType: `'none' | 'alpha' | 'requiredFirst'`\n\nDefault: `parameters.docs.controls.sort` or `'none'`\n\nSpecifies how the controls are sorted.\n\n- **none**: Unsorted, displayed in the same order the controls are processed in\n- **alpha**: Sorted alphabetically, by the arg type's name\n- **requiredFirst**: Same as `alpha`, with any required controls displayed first","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-controls.md","loc":{"lines":{"from":97,"to":113}}}}],["179",{"pageContent":"---\ntitle: 'Description'\n---\n\nThe `Description` block displays the description for a component, story, or meta, obtained from their respective JSDoc comments.\n\n![Screenshot of Description block](./doc-block-title-subtitle-description.png)\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta, Description } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<Description of={ButtonStories.Primary} />\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-description.md","loc":{"lines":{"from":1,"to":20}}}}],["180",{"pageContent":"Description\n\n```js\nimport { Description } from '@storybook/blocks';\n```\n\n`Description` is configured with the following props:\n\n### `of`\n\nType: Story export or CSF file exports\n\nSpecifies where to pull the description from. It can either point to a story or a meta, depending on which description you want to show.\n\nDescriptions are pulled from the JSDoc comments or parameters, and they are rendered as markdown. See [Writing descriptions](#writing-descriptions) for more details.\n\n### `children` (deprecated)\n\nType: `string`\n\nSee [Migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#description-block-parametersnotes-and-parametersinfo).\n\n### `markdown` (deprecated)\n\nType: `string`\n\nSee [Migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#description-block-parametersnotes-and-parametersinfo).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-description.md","loc":{"lines":{"from":22,"to":48}}}}],["181",{"pageContent":"`markdown` (deprecated)\n\nType: `string`\n\nSee [Migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#description-block-parametersnotes-and-parametersinfo).\n\n### `type` (deprecated)\n\nType: `'info' | 'notes' | 'docgen' | 'auto'`\n\nSee [Migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#description-block-parametersnotes-and-parametersinfo).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-description.md","loc":{"lines":{"from":48,"to":58}}}}],["182",{"pageContent":"Writing descriptions\n\nThere are multiple places to write the description of a component/story, depending on what you want to achieve. Descriptions can be written at the story level to describe each story of a component, or they can be written at the meta or component level to describe the component in general.\n\nDescriptions can be written as [JSDoc comments](https://jsdoc.app/about-getting-started.html) above stories, meta, or components. Alternatively they can also be specified in [`parameters`](../writing-stories/parameters.md). To describe a story via parameters instead of comments, add it to `parameters.docs.description.story`; to describe meta/component, add it to `parameters.docs.description.component`.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-description.md","loc":{"lines":{"from":60,"to":64}}}}],["183",{"pageContent":"We recommend using JSDoc comments for descriptions, and only use the `parameters.docs.description.X` properties in situations where comments are not possible to write for some reason, or where you want the description shown in Storybook to be different from the comments. Comments provide a better writing experience as you don’t have to worry about indentation, and they are more discoverable for other developers that are exploring the story/component sources.\n\nWhen documenting a story, reference a story export in the `of` prop (see below) and the Description block will look for descriptions in the following order:\n\n1. `parameters.docs.description.story` in the story\n2. JSDoc comments above the story\n\nWhen documenting a component, reference a meta export in the `of` prop (see below) and the Description block will look for descriptions in the following order:\n\n1. `parameters.docs.description.component` in the meta\n2. JSDoc comments above the meta\n3. JSDoc comments above the component","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-description.md","loc":{"lines":{"from":66,"to":77}}}}],["184",{"pageContent":"1. `parameters.docs.description.component` in the meta\n2. JSDoc comments above the meta\n3. JSDoc comments above the component\n\nThis flow gives you powerful ways to override the description for each scenario. Take the following example:\n\n```jsx\n// Button.jsx\n\n/**\n * # The Button component\n * Shows a button\n */\nexport const Button = () => <button>Click me</button>;","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-description.md","loc":{"lines":{"from":77,"to":90}}}}],["185",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/api-doc-block-description-example.ts.mdx',\n    'web-components/api-doc-block-description-example.js.mdx',\n    'web-components/api-doc-block-description-example.ts.mdx',\n    'common/api-doc-block-description-example.js.mdx',\n    'common/api-doc-block-description-example.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta, Description } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n{/* Shows the description for the default export (the meta).\n    If that didn't have any comments, it would show the \n    comments from the component instead */}\n<Description of={ButtonStories} />\n\n{/* Shows the description for the Primary export */}\n<Description of={ButtonStories.Primary} />\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-description.md","loc":{"lines":{"from":93,"to":124}}}}],["186",{"pageContent":"---\ntitle: 'IconGallery'\n---\n\nThe `IconGallery` block enables you to easily document React icon components associated with your project, displayed in a neat grid.\n\n![Screenshot of IconGallery and IconItem blocks](./doc-block-icongallery.png)\n\n<!-- prettier-ignore-start -->\n```md\n{/* Iconography.mdx */}\n\nimport { Meta, Title, IconGallery, IconItem } from '@storybook/blocks';\n\nimport { Icon as IconExample } from './Icon';\n\n<Meta title=\"Iconography\" />\n\n# Iconography","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-icongallery.md","loc":{"lines":{"from":1,"to":19}}}}],["187",{"pageContent":"import { Meta, Title, IconGallery, IconItem } from '@storybook/blocks';\n\nimport { Icon as IconExample } from './Icon';\n\n<Meta title=\"Iconography\" />\n\n# Iconography\n\n<IconGallery>\n  <IconItem name=\"mobile\">\n    <IconExample name=\"mobile\" />\n  </IconItem>\n  <IconItem name=\"user\">\n    <IconExample name=\"user\" />\n  </IconItem>\n  <IconItem name=\"browser\">\n    <IconExample name=\"browser\" />\n  </IconItem>\n  <IconItem name=\"component\">\n    <IconExample name=\"component\" />\n  </IconItem>\n  <IconItem name=\"calendar\">\n    <IconExample name=\"calendar\" />\n  </IconItem>\n   <IconItem name=\"paintbrush\">\n    <IconExample name=\"paintbrush\" />\n  </IconItem>\n   <IconItem name=\"add\">\n    <IconExample name=\"add\" />\n  </IconItem>\n  <IconItem name=\"subtract\">\n    <IconExample name=\"subtract\" />\n  </IconItem>\n   <IconItem name=\"document\">\n    <IconExample name=\"document\" />\n  </IconItem>\n  <IconItem name=\"graphline\">\n    <IconExample name=\"graphline\" />\n  </IconItem>\n</IconGallery>\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-icongallery.md","loc":{"lines":{"from":19,"to":60}}}}],["188",{"pageContent":"IconGallery\n\n```js\nimport { IconGallery } from '@storybook/blocks';\n```\n\n`IconGallery` is configured with the following props:\n\n### `children`\n\nType: `React.ReactNode`\n\n`IconGallery` expects only `IconItem` children.\n\n## IconItem\n\n```js\nimport { IconItem } from '@storybook/blocks';\n```\n\n`IconItem` is configured with the following props:\n\n### `children`\n\nType: `React.ReactNode`\n\nProvides the icon to be displayed.\n\n### `name` (required)\n\nType: `string`\n\nSets the name of the icon.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-icongallery.md","loc":{"lines":{"from":62,"to":94}}}}],["189",{"pageContent":"---\ntitle: 'Markdown'\n---\n\nThe `Markdown` block allows you to import and include plain markdown in your MDX files.\n\n![Screenshot of Markdown block](./doc-block-markdown.png)\n\nWhen importing markdown files, it’s important to use the `?raw` suffix on the import path to ensure the content is imported as-is, and isn’t being evaluated:\n\n<!-- prettier-ignore-start -->\n````md\n<!-- README.md -->\n\n# Button\n\nPrimary UI component for user interaction\n\n```js\nimport { Button } from \"@storybook/design-system\";\n```\n````\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```md\n// DON'T do this, will error\nimport ReadMe from './README.md';\n// DO this, will work\nimport ReadMe from './README.md?raw';\n\nimport { Markdown } from '@storybook/blocks';\n\n# A header \n\n<Markdown>{ReadMe}</Markdown>\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-markdown.md","loc":{"lines":{"from":1,"to":38}}}}],["190",{"pageContent":"Markdown\n\n```js\nimport { Markdown } from '@storybook/blocks';\n```\n\n`Markdown` is configured with the following props:\n\n### `children`\n\nType: `string`\n\nProvides the markdown-formatted string to parse and display.\n\n### `options`\n\nSpecifies the options passed to the underlying [`markdown-to-jsx` library](https://github.com/probablyup/markdown-to-jsx/blob/main/README.md).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-markdown.md","loc":{"lines":{"from":40,"to":56}}}}],["191",{"pageContent":"Why not import markdown directly?\n\nFrom a purely technical standpoint, we could include the imported markdown directly in the MDX file like this:\n\n<!-- prettier-ignore-start -->\n```md\n{/* THIS WON'T WORK, THIS IS TO DEMONSTRATE AN ERROR */}\n\nimport ReadMe from './README.md';\n\n# A header \n\n{ReadMe}\n```\n<!-- prettier-ignore-end -->\n\nHowever, there are small syntactical differences between plain markdown and MDX2. MDX2 is more strict and will interpret certain content as JSX expressions. Here’s an example of a perfectly valid markdown file, that would break if it was handled directly by MDX2:\n\n<!-- prettier-ignore-start -->\n```md\n# A header\n\n{ this is valid in a plain markdown file, but MDX2 will try to evaluate this as an expression }\n\n<This is also valid, but MDX2 thinks this is a JSX component />\n```\n<!-- prettier-ignore-end -->\n\nFurthermore, MDX2 wraps all strings on newlines in `p` tags or similar, meaning that content would render differently between a plain `.md` file and an `.mdx` file.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-markdown.md","loc":{"lines":{"from":58,"to":86}}}}],["192",{"pageContent":"Furthermore, MDX2 wraps all strings on newlines in `p` tags or similar, meaning that content would render differently between a plain `.md` file and an `.mdx` file.\n\n<!-- prettier-ignore-start -->\n```md\n# A header\n\n<div>\n  Some text\n</div>\n\nThe example above will remain as-is in plain markdown, but MDX2 will compile it to:\n\n# A header\n\n<div>\n  <p>Some text</p>\n</div>\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-markdown.md","loc":{"lines":{"from":86,"to":104}}}}],["193",{"pageContent":"---\ntitle: 'Meta'\n---\n\nThe `Meta` block is used to [attach](#attached-vs-unattached) a custom MDX docs page alongside a component’s list of stories. It doesn’t render any content, but serves two purposes in an MDX file:\n\n- Attaches the MDX file to a component and its stories, or\n- Controls the location of the unattached docs entry in the sidebar.\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n```\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 The Meta block doesn’t render anything visible.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-meta.md","loc":{"lines":{"from":1,"to":25}}}}],["194",{"pageContent":"Meta\n\n```js\nimport { Meta } from '@storybook/blocks';\n```\n\n`Meta` is configured with the following props:\n\n### `isTemplate`\n\nType: `boolean`\n\nDetermines whether the MDX file serves as an [automatic docs template](../writing-docs/autodocs.md#with-mdx). When true, the MDX file is not indexed as it normally would be.\n\n### `name`\n\nType: `string`\n\nSets the name of the [attached](#attached-vs-unattached) doc entry. You can attach more than one MDX file to the same component in the sidebar by setting different names for each file's `Meta`.\n\n<!-- prettier-ignore-start -->\n```md\n{/* Component.mdx */}\n\nimport { Meta } from '@storybook/blocks';\nimport * as ComponentStories from './component.stories';\n\n{/* This MDX file is now called \"Special Docs\" */}\n<Meta of={ComponentStories} name=\"Special Docs\" />\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-meta.md","loc":{"lines":{"from":27,"to":57}}}}],["195",{"pageContent":"`of`\n\nType: CSF file exports\n\nSpecifies which CSF file is [attached](#attached-vs-unattached) to this MDX file. Pass the **full set of exports** from the CSF file (not the default export!).\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta, Story } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n```\n<!-- prettier-ignore-end -->\n\nAttaching an MDX file to a component’s stories with the `of` prop serves two purposes:\n\n1. Ensures the MDX content appears in the sidebar inside the component’s story list. By default, it will be named whatever the `docs.defaultName` (which defaults to `\"Docs\"`) option is set to in `main.js`. But this can be overridden with the [`name` prop](#name).\n2. Attaches the component and its stories to the MDX file, allowing you to use other doc blocks in “attached” mode (for instance to use the `Stories` block).\n\n<div class=\"aside\">","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-meta.md","loc":{"lines":{"from":59,"to":81}}}}],["196",{"pageContent":"<div class=\"aside\">\n\n💡 The `of` prop is optional. If you don’t want to attach a specific CSF file to this MDX file, you can either use the `title` prop to control the location, or emit `Meta` entirely, and let [autotitle](../configure/sidebar-and-urls.md#csf-30-auto-titles) decide where it goes.\n\n</div >","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-meta.md","loc":{"lines":{"from":81,"to":85}}}}],["197",{"pageContent":"`title`\n\nType: `string`\n\nSets the title of an [unattached](#attached-vs-unattached) MDX file.\n\n<!-- prettier-ignore-start -->\n```md\n{/* Introduction.mdx */}\n\nimport { Meta } from '@storybook/blocks';\n\n{/* Override the docs entry's location in the sidebar with title */}\n<Meta title=\"path/to/Introduction\" />\n```\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 If you want to change the sorting of the docs entry with the component’s stories, use [Story Sorting](../writing-stories/naming-components-and-hierarchy.md#sorting-stories), or add specific MDX files to your `stories` field in `main.js` in order.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-meta.md","loc":{"lines":{"from":87,"to":108}}}}],["198",{"pageContent":"Attached vs. unattached\n\nIn Storybook, a docs entry (MDX file) is \"attached\" when it is associated with a stories file, via `Meta`'s [`of` prop](#of). Attached docs entries display next to the stories list under the component in the sidebar.\n\n\"Unattached\" docs entries are not associated with a stories file and can be displayed anywhere in the sidebar via `Meta`'s [`title` prop](#title).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-meta.md","loc":{"lines":{"from":110,"to":114}}}}],["199",{"pageContent":"---\ntitle: 'Primary'\n---\n\nThe `Primary` block displays the primary (first defined in the stories file) story, in a [`Story`](./doc-block-story.md) block. It is typically rendered immediately under the title in a docs entry.\n\n![Screenshot of Primary block](./doc-block-primary.png)\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta, Primary } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<Primary />\n```\n<!-- prettier-ignore-end -->\n\n## Primary\n\n```js\nimport { Primary } from '@storybook/blocks';\n```\n\n`Primary` is configured with the following props:\n\n### `name` (deprecated)\n\nType: `string`\n\nPrimary block should only be used to render the primary story, which is automatically found.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-primary.md","loc":{"lines":{"from":1,"to":34}}}}],["200",{"pageContent":"---\ntitle: 'Source'\n---\n\nThe `Source` block is used to render a snippet of source code directly.\n\n![Screenshot of Source block](./doc-block-source.png)\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta, Source } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<Source of={ButtonStories.Primary} />\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-source.md","loc":{"lines":{"from":1,"to":20}}}}],["201",{"pageContent":"Source\n\n```js\nimport { Source } from '@storybook/blocks';","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-source.md","loc":{"lines":{"from":22,"to":25}}}}],["202",{"pageContent":"<details>\n<summary>Configuring with props <strong>and</strong> parameters</summary>\n\nℹ️ Like most blocks, the `Source` block is configured with props in MDX. Many of those props derive their default value from a corresponding [parameter](../writing-stories/parameters.md) in the block's namespace, `parameters.docs.source`.\n\nThe following `language` configurations are equivalent:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/api-doc-block-source-parameter.ts.mdx',\n    'web-components/api-doc-block-source-parameter.js.mdx',\n    'web-components/api-doc-block-source-parameter.ts.mdx',\n    'common/api-doc-block-source-parameter.js.mdx',\n    'common/api-doc-block-source-parameter.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\n<Source of={ButtonStories.Basic} language=\"tsx\" />\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-source.md","loc":{"lines":{"from":28,"to":55}}}}],["203",{"pageContent":"<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\n<Source of={ButtonStories.Basic} language=\"tsx\" />\n```\n<!-- prettier-ignore-end -->\n\nThe example above applied the parameter at the [story](../writing-stories/parameters.md#story-parameters) level, but it could also be applied at the [component](../writing-stories/parameters.md#component-parameters) (or meta) level or [project](../writing-stories/parameters.md#global-parameters) level.\n\n</details>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-source.md","loc":{"lines":{"from":55,"to":67}}}}],["204",{"pageContent":"`code`\n\nType: `string`\n\nDefault: `parameters.docs.source.code`\n\nProvides the source code to be rendered.\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta, Source } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<Source code={`const thisIsCustomSource = true;\nif (isSyntaxHighlighted) {\n  console.log('syntax highlighting is working');\n}`} />\n```\n<!-- prettier-ignore-end -->\n\n### `dark`\n\nType: `boolean`\n\nDefault: `parameters.docs.source.dark`\n\nDetermines if the snippet is rendered in dark mode.\n\n<div class=\"aside\">\n\n💡 Light mode is only supported when the `Source` block is rendered independently. When rendered as part of a [`Canvas` block](./doc-block-canvas.md)—like it is in [autodocs](../writing-docs/autodocs.md)—it will always use dark mode.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-source.md","loc":{"lines":{"from":69,"to":105}}}}],["205",{"pageContent":"`format`\n\nType: `boolean | 'dedent' | BuiltInParserName`\n\nDefault: `parameters.docs.source.format` or `true`\n\nSpecifies the formatting used on source code. Both `true` and `'dedent'` have the same effect of removing any extraneous indentation. Supports all valid [prettier parser names](https://prettier.io/docs/en/configuration.html#setting-the-parserdocsenoptionshtmlparser-option).\n\n### `language`\n\nType:\n\n<!-- prettier-ignore-start -->\n```ts\n'jsextra' | 'jsx' | 'json' | 'yml' | 'md' | 'bash' | 'css' | 'html' | 'tsx' | 'typescript' | 'graphql'\n```\n<!-- prettier-ignore-end -->\n\nDefault: `parameters.docs.source.language` or `'jsx'`\n\nSpecifies the language used for syntax highlighting.\n\n### `of`\n\nType: Story export\n\nSpecifies which story's source is rendered.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-source.md","loc":{"lines":{"from":107,"to":133}}}}],["206",{"pageContent":"`of`\n\nType: Story export\n\nSpecifies which story's source is rendered.\n\n### `transform`\n\nType: `(code: string, storyContext: StoryContext) => string`\n\nDefault: `parameters.docs.source.transform`\n\nA function to dynamically transform the source before being rendered, based on the original source and any story context necessary. The returned string is displayed as-is.\nIf both [`code`](#code) and `transform` are specified, `transform` will be ignored.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-source.md","loc":{"lines":{"from":133,"to":146}}}}],["207",{"pageContent":"`type`\n\nType: `'auto' | 'code' | 'dynamic'`\n\nDefault: `parameters.docs.source.type` or `'auto'`\n\nSpecifies how the source code is rendered.\n\n- **auto**: Same as **dynamic**, if supported by the framework in use; otherwise same as **code**\n- **code**: Renders the value of [`code` prop](#code), otherwise renders static story source\n- **dynamic**: Renders the story source with dynamically updated arg values\n\n<div class=\"aside\">\n\n💡 Note that dynamic snippets will only work if the story uses [`args`](../writing-stories/args.md) and the [`Story` block](./doc-block-story.md) for that story is rendered along with the `Source` block.\n\n</div>\n\n### `id` (deprecated)\n\nType: `string`\n\nSpecifies the story id for which to render the source code. Referencing a story this way is no longer supported; use the [`of` prop](#of), instead.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-source.md","loc":{"lines":{"from":148,"to":170}}}}],["208",{"pageContent":"`id` (deprecated)\n\nType: `string`\n\nSpecifies the story id for which to render the source code. Referencing a story this way is no longer supported; use the [`of` prop](#of), instead.\n\n### `ids` (deprecated)\n\nType: `string[]`\n\nSpecifies the story ids for which to render source code. Multiple stories are no longer supported; to render a single story's source, use the [`of` prop](#of).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-source.md","loc":{"lines":{"from":170,"to":180}}}}],["209",{"pageContent":"---\ntitle: 'Stories'\n---\n\nThe `Stories` block renders the full collection of stories in a stories file.\n\n![Screenshot of Stories block](./doc-block-stories.png)\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta, Stories } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<Stories />\n```\n<!-- prettier-ignore-end -->\n\n## Stories\n\n```js\nimport { Stories } from '@storybook/blocks';\n```\n\n`Stories` is configured with the following props:\n\n### `includePrimary`\n\nType: `boolean`\n\nDefault: `true`\n\nDetermines if the collection of stories includes the primary (first) story.\n\n<div class=\"aside\">\n\n💡 If a stories file contains only one story and `includePrimary={true}`, the `Stories` block will render nothing to avoid a potentially confusing situation.\n\n</div>\n\n### `title`\n\nType: `string`\n\nDefault: `'Stories'`\n\nSets the heading content preceding the collection of stories.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-stories.md","loc":{"lines":{"from":1,"to":50}}}}],["210",{"pageContent":"---\ntitle: 'Story'\n---\n\nStories (component tests) are Storybook's fundamental building blocks.\n\nIn Storybook Docs, you can render any of your stories from your CSF files in the context of an MDX file with all annotations (parameters, args, loaders, decorators, play function) applied using the `Story` block.\n\n<div class=\"aside\">\n\nTypically you want to use the [`Canvas` block](./doc-block-canvas.md) to render a story with a surrounding border and the source block, but you can use the `Story` block to render just the story.\n\n</div>\n\n![Screenshot of Story block](./doc-block-story.png)\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta, Story } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<Story of={ButtonStories.Primary} />\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-story.md","loc":{"lines":{"from":1,"to":28}}}}],["211",{"pageContent":"Story\n\n```js\nimport { Story } from '@storybook/blocks';","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-story.md","loc":{"lines":{"from":30,"to":33}}}}],["212",{"pageContent":"<details>\n<summary>Configuring with props <strong>and</strong> parameters</summary>\n\nℹ️ Like most blocks, the `Story` block is configured with props in MDX. Many of those props derive their default value from a corresponding [parameter](../writing-stories/parameters.md) in the block's namespace, `parameters.docs.story`.\n\nThe following `autoplay` configurations are equivalent:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/api-doc-block-story-parameter.ts.mdx',\n    'web-components/api-doc-block-story-parameter.js.mdx',\n    'web-components/api-doc-block-story-parameter.ts.mdx',\n    'common/api-doc-block-story-parameter.js.mdx',\n    'common/api-doc-block-story-parameter.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\n<Story of={ButtonStories.Basic} autoplay />\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-story.md","loc":{"lines":{"from":36,"to":63}}}}],["213",{"pageContent":"<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\n<Story of={ButtonStories.Basic} autoplay />\n```\n<!-- prettier-ignore-end -->\n\nThe example above applied the parameter at the [story](../writing-stories/parameters.md#story-parameters) level, but it could also be applied at the [component](../writing-stories/parameters.md#component-parameters) (or meta) level or [project](../writing-stories/parameters.md#global-parameters) level.\n\n</details>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-story.md","loc":{"lines":{"from":63,"to":75}}}}],["214",{"pageContent":"`autoplay`\n\nType: `boolean`\n\nDefault: `parameters.docs.story.autoplay`\n\nDetermines whether a story's play function runs.\n\nBecause all stories render simultaneously in docs entries, play functions can perform arbitrary actions that can interact with each other (such as stealing focus or scrolling the screen). For that reason, by default, stories **do not run play functions in docs mode**.\n\nHowever, if you know your play function is “safe” to run in docs, you can use this prop to run it automatically.\n\n### `height`\n\nType: `string`\n\nDefault: `parameters.docs.story.height`\n\nSet a minimum height (note for an iframe this is the actual height) when rendering a story in an iframe or inline. This overrides `parameters.docs.story.iframeHeight` for iframes.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-story.md","loc":{"lines":{"from":77,"to":95}}}}],["215",{"pageContent":"`inline`\n\nType: `boolean`\n\nDefault: `parameters.docs.story.inline` or `true` (for [supported frameworks](../configure/frameworks-feature-support.md))\n\nDetermines whether the story is rendered `inline` (in the same browser frame as the other docs content) or in an iframe.\n\n### `meta`\n\nType: CSF file exports\n\nSpecifies the CSF file to which the story is associated.\n\nYou can render a story from a CSF file that you haven’t attached to the MDX file (via `Meta`) by using the `meta` prop. Pass the **full set of exports** from the CSF file (not the default export!).\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta, Story } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\nimport * as HeaderStories from './Header.stories';\n\n<Meta of={ButtonStories} />\n\n{/* Although this MDX file is largely concerned with Button,\n    it can render Header stories too */}\n<Story of={HeaderStories.LoggedIn} meta={HeaderStories} />\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-story.md","loc":{"lines":{"from":97,"to":127}}}}],["216",{"pageContent":"`of`\n\nType: Story export\n\nSpecifies which story is rendered by the `Story` block. If no `of` is defined and the MDX file is [attached](./doc-block-meta.md#attached-vs-unattached), the primary (first) story will be rendered.\n\n### `args` (deprecated)\n\nType: `Partial<TArgs>`\n\nDefining and configuring stories in MDX is deprecated. See the [Migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#mdx-docs-files) for details.\n\n### `argTypes` (deprecated)\n\nType: `Partial<ArgTypes<TArgs>>`\n\nDefining and configuring stories in MDX is deprecated. See the [Migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#mdx-docs-files) for details.\n\n### `decorators` (deprecated)\n\nType: `DecoratorFunction<TRenderer, TArgs>[]`\n\nDefining and configuring stories in MDX is deprecated. See the [Migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#mdx-docs-files) for details.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-story.md","loc":{"lines":{"from":129,"to":151}}}}],["217",{"pageContent":"`loaders` (deprecated)\n\nType: `LoaderFunction<TRenderer, TArgs>[]`\n\nDefining and configuring stories in MDX is deprecated. See the [Migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#mdx-docs-files) for details.\n\n### `name` (deprecated)\n\nType: `StoryName`\n\nDefining and configuring stories in MDX is deprecated. See the [Migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#mdx-docs-files) for details.\n\n### `parameters` (deprecated)\n\nType: `Parameters`\n\nDefining and configuring stories in MDX is deprecated. See the [Migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#mdx-docs-files) for details.\n\n### `play` (deprecated)\n\nType: `PlayFunction<TRenderer, TArgs>`\n\nDefining and configuring stories in MDX is deprecated. See the [Migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#mdx-docs-files) for details.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-story.md","loc":{"lines":{"from":153,"to":175}}}}],["218",{"pageContent":"`render` (deprecated)\n\nType: `ArgsStoryFn<TRenderer, TArgs>`\n\nDefining and configuring stories in MDX is deprecated. See the [Migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#mdx-docs-files) for details.\n\n### `story` (deprecated)\n\nType: `Omit<StoryAnnotations<TRenderer, TArgs>, 'story'>`\n\nDefining and configuring stories in MDX is deprecated. See the [Migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#mdx-docs-files) for details.\n\n### `storyName` (deprecated)\n\nType: `StoryName`\n\nDefining and configuring stories in MDX is deprecated. See the [Migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#mdx-docs-files) for details.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-story.md","loc":{"lines":{"from":177,"to":193}}}}],["219",{"pageContent":"---\ntitle: 'Subtitle'\n---\n\nThe `Subtitle` block can serve as a secondary heading for your docs entry.\n\n![Screenshot of Subtitle block](./doc-block-title-subtitle-description.png)\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Subtitle } from '@storybook/blocks';\n\n<Subtitle>This is the subtitle</Subtitle>\n```\n<!-- prettier-ignore-end -->\n\n## Subtitle\n\n```js\nimport { Subtitle } from '@storybook/blocks';\n```\n\n`Subtitle` is configured with the following props:\n\n### `children`\n\nType: `JSX.Element | string`\n\nDefault: `parameters.componentSubtitle`\n\nProvides the content.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-subtitle.md","loc":{"lines":{"from":1,"to":33}}}}],["220",{"pageContent":"---\ntitle: 'Title'\n---\n\nThe `Title` block serves as the primary heading for your docs entry. It is typically used to provide the component or page name.\n\n![Screenshot of Title block](./doc-block-title-subtitle-description.png)\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Title } from '@storybook/blocks';\n\n<Title>This is the title</Title>\n```\n<!-- prettier-ignore-end -->\n\n## Title\n\n```js\nimport { Title } from '@storybook/blocks';\n```\n\n`Title` is configured with the following props:\n\n### `children`\n\nType: `JSX.Element | string`\n\nProvides the content. Falls back to value of `title` in an [attached](./doc-block-meta.md#attached-vs-unattached) CSF file (or value derived from [autotitle](../configure/sidebar-and-urls.md#csf-30-auto-titles)), trimmed to the last segment. For example, if the title value is `'path/to/components/Button'`, the default content is `'Button'`.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-title.md","loc":{"lines":{"from":1,"to":31}}}}],["221",{"pageContent":"---\ntitle: 'Typeset'\n---\n\nThe `Typeset` block helps document the fonts used throughout your project.\n\n![Screenshot of Typeset block](./doc-block-typeset.png)\n\n<!-- prettier-ignore-start -->\n\n```md\n{/* Typography.mdx */}\n\nimport { Meta, Typeset } from '@storybook/blocks';\n\n<Meta title=\"Typography\" />\n\nexport const typography = {\n  type: {\n    primary: '\"Nunito Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n  },\n  weight: {\n    regular: '400',\n    bold: '700',\n    extrabold: '800',\n    black: '900',\n  },\n  size: {\n    s1: 12,\n    s2: 14,\n    s3: 16,\n    m1: 20,\n    m2: 24,\n    m3: 28,\n    l1: 32,\n    l2: 40,\n    l3: 48,\n  },\n};\n\nexport const SampleText = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';\n\n# Typography\n\n**Font:** Nunito Sans\n\n**Weights:** 400(regular), 700(bold), 800(extrabold), 900(black)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-typeset.md","loc":{"lines":{"from":1,"to":47}}}}],["222",{"pageContent":"export const SampleText = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';\n\n# Typography\n\n**Font:** Nunito Sans\n\n**Weights:** 400(regular), 700(bold), 800(extrabold), 900(black)\n\n<Typeset\n  fontSizes={[\n    Number(typography.size.s1),\n    Number(typography.size.s2),\n    Number(typography.size.s3),\n    Number(typography.size.m1),\n    Number(typography.size.m2),\n    Number(typography.size.m3),\n    Number(typography.size.l1),\n    Number(typography.size.l2),\n    Number(typography.size.l3),\n  ]}\n  fontWeight={typography.weight.black}\n  sampleText={SampleText}\n  fontFamily={typography.type.primary}\n/>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-typeset.md","loc":{"lines":{"from":47,"to":70}}}}],["223",{"pageContent":"<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-typeset.md","loc":{"lines":{"from":73,"to":73}}}}],["224",{"pageContent":"Typeset\n\n```js\nimport { Typeset } from '@storybook/blocks';\n```\n\n`Typeset` is configured with the following props:\n\n### `fontFamily`\n\nType: `string`\n\nProvides a font family to be displayed.\n\n### `fontSizes`\n\nType: `number[]`\n\nProvides a list of available font sizes (in `px`).\n\n### `fontWeight`\n\nType: `number`\n\nSpecifies the weight of the font to be displayed.\n\n### `sampleText`\n\nType: `string`\n\nSets the text to be displayed.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-typeset.md","loc":{"lines":{"from":75,"to":105}}}}],["225",{"pageContent":"---\ntitle: 'Unstyled'\n---\n\nThe `Unstyled` block is a special block that disables Storybook's default styling in MDX docs wherever it is added.\n\nBy default, most elements (like `h1`, `p`, etc.) in docs have a few default styles applied to ensure the docs look good. However, sometimes you might want some of your content to not have these styles applied. In those cases, wrap the content with the `Unstyled` block to remove the default styles.\n\n<!-- prettier-ignore-start -->\n```md\nimport { Meta, Unstyled } from \"@storybook/blocks\";\nimport { Header } from \"./Header.tsx\";\n\n<Meta title=\"Unstyled\" />\n\n> This block quote will be styled\n\n... and so will this paragraph.\n\n<Unstyled>\n  > This block quote will not be styled\n\n  ... neither will this paragraph, nor the following component (which contains an \\<h1\\>):\n\n  <Header />\n\n</Unstyled>\n```\n<!-- prettier-ignore-end -->\n\nYields:\n\n![Screenshot of Unstyled Doc Block](./doc-block-unstyled.png)\n\n<div class=\"aside\">","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-unstyled.md","loc":{"lines":{"from":1,"to":35}}}}],["226",{"pageContent":"<Header />\n\n</Unstyled>\n```\n<!-- prettier-ignore-end -->\n\nYields:\n\n![Screenshot of Unstyled Doc Block](./doc-block-unstyled.png)\n\n<div class=\"aside\">\n\nℹ️ The other blocks like [`Story`](./doc-block-story.md) and [`Canvas`](./doc-block-canvas.md) are already unstyled, so there’s no need to wrap those in the `Unstyled` block to ensure that Storybook’s styles don’t bleed into the stories. However, if you import your components directly in the MDX, you most likely want to wrap them in the Unstyled block.\n\n</div>\n\n<div class=\"aside\">\n\n💡 Due to how CSS inheritance works it’s best to always add the Unstyled block to the root of your MDX, and not nested into other elements. The following example will cause some Storybook styles like `color` to be inherited into `CustomComponent` because they are applied to the root `div`:\n\n<!-- prettier-ignore-start -->\n```md\n<div>\n  <Unstyled>\n    <CustomComponent/>\n  </Unstyled>\n</div>\n```\n<!-- prettier-ignore-end -->\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-unstyled.md","loc":{"lines":{"from":35,"to":65}}}}],["227",{"pageContent":"Unstyled\n\n```js\nimport { Unstyled } from '@storybook/blocks';\n```\n\n`Unstyled` is configured with the following props:\n\n### `children`\n\nType: `React.ReactNode`\n\nProvides the content to which you do _not_ want to apply default docs styles.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-unstyled.md","loc":{"lines":{"from":67,"to":79}}}}],["228",{"pageContent":"---\ntitle: 'useOf'\n---\n\nThe default blocks supplied by Storybook do not fit all use cases, so you might want to write your own blocks.\n\nIf your own doc blocks need to interface with annotations from Storybook—that is stories, meta or components—you can use the `useOf` hook. Pass in a module export of a story, meta, or component and it will return its annotated form (with applied parameters, args, loaders, decorators, play function) that you can then use for anything you like. In fact, most of the existing blocks like [`Description`](./doc-block-description.md) and [`Canvas`](./doc-block-canvas.md) use `useOf` under the hood.\n\nHere’s an example of how the`useOf` hook could be used to create a custom block that displays the name of the story:\n\n```jsx\n// .storybook/blocks/StoryName.jsx\n\nimport { useOf } from '@storybook/blocks';","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-useof.md","loc":{"lines":{"from":1,"to":14}}}}],["229",{"pageContent":"Here’s an example of how the`useOf` hook could be used to create a custom block that displays the name of the story:\n\n```jsx\n// .storybook/blocks/StoryName.jsx\n\nimport { useOf } from '@storybook/blocks';\n\n/**\n * A block that displays the story name or title from the of prop\n * - if a story reference is passed, it renders the story name\n * - if a meta reference is passed, it renders the stories' title\n * - if nothing is passed, it defaults to the primary story\n */\nexport const StoryName = ({ of }) => {\n  const resolvedOf = useOf(of || 'story', ['story', 'meta']);\n  switch (resolvedOf.type) {\n    case 'story': {\n      return <h1>{resolvedOf.story.name}</h1>;\n    }\n    case 'meta': {\n      return <h1>{resolvedOf.preparedMeta.title}</h1>;\n    }\n  }\n  return null;\n};","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-useof.md","loc":{"lines":{"from":14,"to":38}}}}],["230",{"pageContent":"<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta } from '@storybook/blocks';\nimport { StoryName } from '../.storybook/blocks/StoryName';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n{/* renders \"Secondary\" */}\n<StoryName of={ButtonStories.Secondary} />\n\n{/* renders \"Primary\" */}\n<StoryName />\n\n{/* renders \"Button\" */}\n<StoryName of={ButtonStories} />\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-useof.md","loc":{"lines":{"from":41,"to":60}}}}],["231",{"pageContent":"useOf\n\n## Signature\n\n```ts\nuseOf = (\n  moduleExportOrType: ModuleExport | 'story' | 'meta' | 'component',\n  validTypes?: Array<'story' | 'meta' | 'component'>\n): EnhancedResolvedModuleExportType\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-useof.md","loc":{"lines":{"from":62,"to":71}}}}],["232",{"pageContent":"Parameters\n\n### `moduleExportOrType` (required)\n\nType: `ModuleExport | 'story' | 'meta' | 'component'`\n\nProvides the story export, meta export, component export, or CSF file exports from which you get annotations.\n\nWhen the custom block is in an [attached doc](./doc-block-meta.md#attached-vs-unattached), it’s also possible to get the primary (first) story, meta, or component by passing in a string instead. This is useful as a fallback, so the `of` prop can be omitted in your block. The most common pattern is using this as `useOf(props.of || 'story')` which will fall back to the primary story if no `of` prop is defined.\n\n- `useOf('story')` returns the annotated primary story in attached mode; error in unattached mode\n- `useOf('meta')` returns the annotated meta in attached mode; error in unattached mode\n- `useOf('component')` returns the annotated component specified in the meta in attached mode; error in unattached mode","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-useof.md","loc":{"lines":{"from":73,"to":85}}}}],["233",{"pageContent":"`validTypes`\n\nType: `Array<'story' | 'meta' | 'component'>`\n\nOptionally specify an array of valid types that your block accepts. Passing anything other than the valid type(s) will result in an error. For example, the [`Canvas`](./doc-block-canvas.md) block uses `useOf(of, ['story'])`, which ensures it only accepts a reference to a story, not a meta or component.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-useof.md","loc":{"lines":{"from":87,"to":91}}}}],["234",{"pageContent":"Return\n\nThe return value depends on the matched type:\n\n### `EnhancedResolvedModuleExportType['type'] === 'story'`\n\nType: `{ type: 'story', story: PreparedStory }`\n\nFor stories, annotated stories are returned as is. They are prepared, meaning that they are already merged with project and meta annotations.\n\n### `EnhancedResolvedModuleExportType['type'] === 'meta'`\n\nType: `{ type: 'meta', csfFile: CSFFile, preparedMeta: PreparedMeta }`\n\nFor meta, the parsed CSF file is returned, along with prepared annotated meta. That is, project annotations merged with meta annotations, but no story annotations.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-useof.md","loc":{"lines":{"from":93,"to":107}}}}],["235",{"pageContent":"`EnhancedResolvedModuleExportType['type'] === 'component'`\n\nType: `{ type: 'component', component: Component, projectAnnotations: NormalizedProjectAnnotations }`\n\nFor components, the component is returned along with project annotations; no meta or story annotations.\n\nNote that it’s often impossible for the hook to determine if a component is passed in or any other object, so it behaves like an `unknown` type as well.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/doc-block-useof.md","loc":{"lines":{"from":109,"to":115}}}}],["236",{"pageContent":"---\ntitle: 'Frameworks'\n---\n\nStorybook is architected to support diverse web frameworks, including React, Vue, Angular, Web Components, Svelte, and over a dozen others. This guide helps you get started on adding new framework support for Storybook.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/new-frameworks.md","loc":{"lines":{"from":1,"to":5}}}}],["237",{"pageContent":"Scaffolding a new framework\n\nThe first thing to do is to scaffold your framework support in its own repo.\n\nWe recommend adopting the same project structure as the Storybook monorepo. That structure contains the framework package (`app/<framework>`) and an example app (`examples/<framework>-kitchen-sink`) as well as other associated documentation and configuration as needed.\n\nIt may seem like a little more hierarchy than what’s necessary. But because the structure mirrors the way Storybook’s monorepo is structured, you can reuse Storybook’s tooling. It also makes it easier to move the framework into the Storybook monorepo later if that is desirable.\n\nWe recommend using `@storybook/html` as a starter framework since it’s the simplest and contains no framework-specific peculiarities. There is a boilerplate to get you started [here](https://github.com/CodeByAlex/storybook-framework-boilerplate).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/new-frameworks.md","loc":{"lines":{"from":7,"to":15}}}}],["238",{"pageContent":"Framework architecture\n\nSupporting a new framework in Storybook typically consists of two main aspects:\n\n1. Configuring the server. In Storybook, the server is the node process that runs when you run `storybook dev` or `storybook build`. Configuring the server typically means configuring babel and webpack in framework-specific ways.\n\n2. Configuring the client. The client is the code that runs in the browser, and configuring it, means providing a framework-specific story rendering function.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/new-frameworks.md","loc":{"lines":{"from":17,"to":23}}}}],["239",{"pageContent":"Configuring the server\n\nStorybook has the concept of [presets](../addons/writing-presets.md), which are typically babel/webpack configurations for file loading. If your framework has its own file format (e.g., “.vue”), you might need to transform them into JavaScript files at load time. If you assume every user of your framework needs this, you should add it to the framework. So far, every framework added to Storybook has done it because Storybook’s core configuration is extremely minimal.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/new-frameworks.md","loc":{"lines":{"from":25,"to":27}}}}],["240",{"pageContent":"Package structure\n\nIt's helpful to understand Storybook's package structure before adding a framework preset. Each framework typically exposes two executables in its `package.json`:\n\n```json\n{\n  \"bin\": {\n    \"storybook\": \"./bin/index.js\",\n    \"build-storybook\": \"./bin/build.js\"\n  }\n}\n```\n\nThese scripts pass an `options` object to `@storybook/core/server`, a library that abstracts all of Storybook’s framework-independent code.\n\nFor example, here’s the boilerplate to start the dev server with `storybook dev`:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-start-dev-server.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThus the essence of adding framework presets is just filling in that options object.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/new-frameworks.md","loc":{"lines":{"from":29,"to":56}}}}],["241",{"pageContent":"Server options\n\nAs described above, the server `options` object does the heavy lifting of configuring the server.\n\nLet’s look at the `@storybook/vue`’s options definition:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-server-options.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThe value of the `framework` option (i.e., ‘vue’) is something that gets passed to addons and allows them to do specific tasks related to your framework.\n\nThe essence of this file is the framework presets, and these are standard [Storybook presets](../addons/writing-presets.md) -- you can look at framework packages in the Storybook monorepo (e.g. [React](https://github.com/storybookjs/storybook/blob/main/app/react/src/server/options.ts), [Vue](https://github.com/storybookjs/storybook/blob/main/app/vue/src/server/options.ts), [Web Components](https://github.com/storybookjs/storybook/blob/main/app/web-components/src/server/options.ts)) to see examples of framework-specific customizations.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/new-frameworks.md","loc":{"lines":{"from":58,"to":76}}}}],["242",{"pageContent":"While developing your custom framework, not maintained by Storybook, you can specify the path to the location file with the `frameworkPath` key:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-server-framework-options.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nYou can add a relative path to `frameworkPath`. Don't forget that they resolve from the Storybook configuration directory (i.e., `.storybook`) by default.\n\nMake sure the `frameworkPath` ends up at the `dist/client/index.js` file within your framework app.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/new-frameworks.md","loc":{"lines":{"from":78,"to":92}}}}],["243",{"pageContent":"Configuring the client\n\nTo configure the client, you must provide a framework-specific render function. Before diving into the details, it’s essential to understand how user-written stories relate to what renders on the screen.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/new-frameworks.md","loc":{"lines":{"from":94,"to":96}}}}],["244",{"pageContent":"Renderable objects\n\nStorybook stories are ES6 objects that return a “renderable object.”\n\nConsider the following React story:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-with-sample.js.mdx'\n  ]}\n  usesCsf3\n  csf2Path=\"api/new-frameworks#snippet-button-story-with-sample\"\n/>\n\n<!-- prettier-ignore-end -->\n\nIn this case, the renderable object is the React element, `<Button .../>`.\n\nIn most other frameworks, the renderable object is actually a plain JavaScript object.\n\nConsider the following hypothetical example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/button-story-hypothetical-example.js.mdx',\n    'common/button-story-hypothetical-example.ts.mdx'\n  ]}\n  usesCsf3\n  csf2Path=\"api/new-frameworks#snippet-button-story-hypothetical-example\"\n/>\n\n<!-- prettier-ignore-end -->\n\nThe design of this “renderable object” is framework-specific and should ideally match the idioms of that framework.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/new-frameworks.md","loc":{"lines":{"from":98,"to":135}}}}],["245",{"pageContent":"Render function\n\nThe framework's render function is the entity responsible for converting the renderable object into DOM nodes. It is typically of the form:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-framework-render-function.js.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/new-frameworks.md","loc":{"lines":{"from":137,"to":149}}}}],["246",{"pageContent":"Package structure\n\nOn the client side, the key file is [`src/client/preview.js`](../configure/overview.md#configure-story-rendering):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-client-preview.ts.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThe globals file typically sets up a single global variable that client-side code (such as addon-provided decorators) can refer to if needed to understand which framework it's running in:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-client-globals-example-file.ts.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/new-frameworks.md","loc":{"lines":{"from":151,"to":175}}}}],["247",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-client-globals-example-file.ts.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThe `start` function abstracts all of Storybook’s framework-independent client-side (browser) code, and it takes the render function we defined above. For examples of render functions, see [React](https://github.com/storybookjs/storybook/blob/main/app/react/src/client/preview/render.tsx), [Vue](https://github.com/storybookjs/storybook/blob/main/app/vue/src/client/preview/render.ts), [Angular](https://github.com/storybookjs/storybook/blob/main/app/angular/src/client/preview/render.ts), and [Web Components](https://github.com/storybookjs/storybook/blob/main/app/web-components/src/client/preview/render.ts) in the Storybook monorepo.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/new-frameworks.md","loc":{"lines":{"from":175,"to":185}}}}],["248",{"pageContent":"---\ntitle: 'Stories'\n---\n\nStorybook is extremely customizable and offers various ways to write your stories.\n\nCheck the links below to learn more about it:\n\n- [Component Story Format (CSF)](./csf.md), the recommended way for you to write your stories.\n- [MDX](./mdx.md), to create not only stories but also your own custom documentation.\n- [`ArgTypes`](./argtypes.md), to learn how you can extend your component's stories.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/api/stories.md","loc":{"lines":{"from":1,"to":11}}}}],["249",{"pageContent":"---\ntitle: 'Builder API'\n---\n\nStorybook is architected to support multiple builders, including [Webpack](https://webpack.js.org/), [Vite](https://vitejs.dev/), and [ESBuild](https://esbuild.github.io/). The builder API is the set of interfaces you can use to add a new builder to Storybook.\n\n![Storybook builders](./storybook-builders.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/builder-api.md","loc":{"lines":{"from":1,"to":7}}}}],["250",{"pageContent":"How do builders work?\n\nIn Storybook, a builder is responsible for compiling your components and stories into JS bundles that run in the browser. A builder also provides a development server for interactive development and a production mode for optimized bundles.\n\nTo opt into a builder, the user must add it as a dependency and then edit their configuration file (`.storybook/main.js`) to enable it. For example, with the Vite builder:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-vite-builder-install.yarn.js.mdx',\n    'common/storybook-vite-builder-install.npm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-vite-builder-register.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/builder-api.md","loc":{"lines":{"from":9,"to":34}}}}],["251",{"pageContent":"Builder API\n\nIn Storybook, every builder must implement the following [API](https://github.com/storybookjs/storybook/blob/next/code/lib/core-common/src/types.ts#L170-L189), exposing the following configuration options and entry points:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-builder-api-interface.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nIn development mode, the `start` API call is responsible for initializing the development server to monitor the file system for changes (for example, components and stories) then execute a hot module reload in the browser.\nIt also provides a **bail** function to allow the running process to end gracefully, either via user input or error.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/builder-api.md","loc":{"lines":{"from":36,"to":51}}}}],["252",{"pageContent":"In production, the `build` API call is responsible for generating a static Storybook build, storing it by default in the `storybook-static` directory if no additional configuration is provided. The generated output should contain everything the user needs to view its Storybook by opening either the `index.html` or `iframe.html` in a browser with no other processes running.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/builder-api.md","loc":{"lines":{"from":53,"to":53}}}}],["253",{"pageContent":"Implementation\n\nUnder the hood, a builder is responsible for serving/building the preview `iframe`, which has its own set of requirements. To fully support Storybook, including the [Essential addons](../writing-stories/introduction.md) that ship with Storybook, it must consider the following.\n\n### Import stories\n\nThe `stories` configuration field enables story loading in Storybook. It defines an array of file globs containing the physical location of the component's stories. The builder must be able to load those files and monitor them for changes and update the UI accordingly.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/builder-api.md","loc":{"lines":{"from":55,"to":61}}}}],["254",{"pageContent":"Provide configuration options\n\nBy default, Storybook's configuration is handled in a dedicated file (`storybook/main.js|ts`), giving the user the option to customize it to suit its needs. The builder should also provide its own configuration support through additional fields or some other builder-appropriate mechanism. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-builder-api-configuration-options.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/builder-api.md","loc":{"lines":{"from":63,"to":75}}}}],["255",{"pageContent":"Handle preview.js exports\n\nThe [`preview.js`](../configure/overview.md#configure-story-rendering) configuration file allows users to control how the story renders in the UI. This is provided via the [decorators](../writing-stories/decorators.md) named export. When Storybook starts, it converts these named exports into internal API calls via virtual module entry, for example, `addDecorator()`. The builder must also provide a similar implementation. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-builder-api-preview-exports.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/builder-api.md","loc":{"lines":{"from":77,"to":89}}}}],["256",{"pageContent":"MDX support\n\n[Storybook's Docs](../writing-docs/introduction.md) includes the ability to author stories/documentation in MDX using a Webpack loader. The builder must also know how to interpret MDX and invoke Storybook's special extensions. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-builder-api-mdx.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n### Generate source code snippets\n\nStorybook annotates components and stories with additional metadata related to their inputs to automatically generate interactive controls and documentation. Currently, this is provided via Webpack loaders/plugins. The builder must re-implement this to support those features.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/builder-api.md","loc":{"lines":{"from":91,"to":107}}}}],["257",{"pageContent":"Generate a static build\n\nOne of Storybook's core features it's the ability to generate a static build that can be [published](../sharing/publish-storybook.md) to a web hosting service. The builder must also be able to provide a similar mechanism. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-builder-api-build-server.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n### Development server integration\n\nBy default, when Storybook starts in development mode, it relies on its internal development server. The builder needs to be able to integrate with it. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-builder-api-dev-server.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/builder-api.md","loc":{"lines":{"from":109,"to":135}}}}],["258",{"pageContent":"Shutdown the development server\n\nThe builder must provide a way to stop the development server once the process terminates; this can be via user input or error. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-builder-api-shutdown-server.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n### HMR support\n\nWhile running in development mode, the builder's development server must be able to reload the page once a change happens, either in a story, component, or helper function.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/builder-api.md","loc":{"lines":{"from":137,"to":153}}}}],["259",{"pageContent":"More information\n\nThis area is under rapid development, so the documented is still in progress and subject to change. If you are interested in writing your builder, we encourage you to check [webpack](https://github.com/storybookjs/storybook/tree/next/code/lib/builder-webpack5), [Vite](https://github.com/storybookjs/builder-vite), and Modern Web's [dev-server-storybook](https://github.com/modernweb-dev/web/blob/master/packages/dev-server-storybook/src/serve/storybookPlugin.ts) source code. In addition, we have a wonderful contributor community on [Storybook Discord](https://discord.gg/storybook) if you have questions. Ping us in the [#contributing](https://discord.com/channels/486522875931656193/839297503446695956) channel.\n\n#### Learn more about builders\n\n- [Vite builder](./vite.md) for bundling with Vite\n- [Webpack builder](./webpack.md) for bundling with Webpack\n- Builder API for building a Storybook builder","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/builder-api.md","loc":{"lines":{"from":155,"to":163}}}}],["260",{"pageContent":"---\ntitle: 'Builders'\n---\n\nStorybook, at its core, is powered by builders such as Webpack and Vite. These builders spin up a development environment, compile your code—Javascript, CSS, and MDX—into an executable bundle and update the browser in real-time.\n\n![Storybook builder overview](./storybook-builder-workflow.png)\n\n## CLI basics\n\nBefore diving into setting up Storybook's builders, let's look at how the CLI configures them. When you initialize Storybook (via `npx storybook@latest init`), the CLI automatically detects which builder to use based on your application. For example, if you're working with Vite, it will install the Vite builder. If you're working with Webpack, it installs the Webpack 5 builder by default.\n\nAdditionally, you can also provide a flag to Storybook's CLI and specify the builder you want to use:\n\n```shell\nnpx storybook@latest init --builder <webpack5 | vite>\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/overview.md","loc":{"lines":{"from":1,"to":17}}}}],["261",{"pageContent":"Manual setup\n\nStorybook uses the Webpack 5 builder by default if you don't specify one. If you want to use a different builder in your application, these docs detail how you can set up Storybook's supported builders.\n\n- [**Vite builder**](./vite.md) for bundling your stories with Vite with near-instant HMR.\n- [**Webpack**](./webpack.md) for bundling your stories with Webpack with improved performance","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/overview.md","loc":{"lines":{"from":19,"to":24}}}}],["262",{"pageContent":"---\ntitle: 'Vite'\n---\n\nStorybook Vite builder bundles your components and stories with [Vite](https://vitejs.dev/), a fast ESM bundler.\n\n- For applications built with Vite: it allows reusing the existing configuration in Storybook.\n- For applications built with Webpack: it provides faster startup and refresh times, with the disadvantage that your component's execution environment differs from your application.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/vite.md","loc":{"lines":{"from":1,"to":8}}}}],["263",{"pageContent":"Setup\n\nIf you ran `npx storybook@latest init` to include Storybook in your Vite application, the builder is already installed and configured for you. If you want, you can also opt into it manually.\n\nRun the following command to install the builder.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-vite-builder-install.yarn.js.mdx',\n    'common/storybook-vite-builder-install.npm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nUpdate your Storybook configuration (in `.storybook/main.js|ts`) to include the builder.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-vite-builder-register.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/vite.md","loc":{"lines":{"from":10,"to":37}}}}],["264",{"pageContent":"Configuration\n\nOut of the box, Storybook's Vite builder includes a set of configuration defaults for the supported frameworks, which are merged alongside your existing configuration file. For an optimal experience when using the Vite builder, we recommend applying any configuration directly inside Vite's configuration file (i.e., [`vite.config.js`](https://vitejs.dev/config/)).\n\nWhen Storybook loads, it automatically merges the configuration into its own. However, not all projects have the same requirements, and you may need to provide a custom configuration created specifically for Storybook. In that case, you can adjust your configuration file (.storybook/main.js|ts) and add the `viteFinal` configuration function as follows:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-vite-builder-aliasing.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/vite.md","loc":{"lines":{"from":39,"to":53}}}}],["265",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-vite-builder-aliasing.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThe asynchronous function `viteFinal` receives a `config` object with the default builder configuration and returns the updated configuration.\n\nYou can also override the builder's configuration based on the environment. For instance, if you need to provide a custom configuration for development purposes and another for production, you can extend the default configuration as follows:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-vite-builder-config-env.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/vite.md","loc":{"lines":{"from":53,"to":75}}}}],["266",{"pageContent":"TypeScript\n\nIf you need, you can also configure Storybook's Vite builder using TypeScript. Rename your `.storybook/main.js` to `.storybook/main.ts` and adjust it as follows:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-vite-builder-ts-configure.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n---","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/vite.md","loc":{"lines":{"from":77,"to":91}}}}],["267",{"pageContent":"Troubleshooting\n\n### Working directory not being detected\n\nBy default, the Vite builder enables Vite's [`server.fs.strict`](https://vitejs.dev/config/#server-fs-strict) option for increased security, defining the project's `root` to Storybook's configuration directory\nIf you need to override it, you can use the `viteFinal` function and adjust it.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/vite.md","loc":{"lines":{"from":93,"to":98}}}}],["268",{"pageContent":"ArgTypes are not generated automatically\n\nCurrently, [automatic argType inference](../api/argtypes.md#automatic-argtype-inference) is only available for React, Vue3 and Svelte (JSDocs only). With React, the Vite builder defaults to `react-docgen-typescript` if TypeScript is listed as a dependency. If you run into any issues, you can revert to `react-docgen` by updating your Storybook configuration file as follows:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-vite-builder-react-docgen.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n#### Learn more about builders\n\n- Vite builder for bundling with Vite\n- [Webpack builder](./webpack.md) for bundling with Webpack\n- [Builder API](./builder-api.md) for building a Storybook builder","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/vite.md","loc":{"lines":{"from":100,"to":118}}}}],["269",{"pageContent":"---\ntitle: 'Webpack'\n---\n\nStorybook Webpack builder is the default builder for Storybook. This builder enables you to create a seamless development and testing experience for your components and provides an efficient way to develop UI components in isolation allowing you to leverage your existing Webpack configuration with Storybook.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/webpack.md","loc":{"lines":{"from":1,"to":5}}}}],["270",{"pageContent":"Configure\n\nBy default, Storybook provides zero-config support for Webpack and automatically sets up a baseline configuration created to work with the most common use cases. However, you can extend your Storybook configuration file (i.e., `.storybook/main.js|ts`) and provide additional options to improve your Storybook's performance or customize it to your needs. Listed below are the available options and examples of how to use them.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/webpack.md","loc":{"lines":{"from":7,"to":9}}}}],["271",{"pageContent":"| Option            | Description                                                                                                                                                                                       |\n| ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `storyStoreV7`    | Enabled by default.<br/> Configures Webpack's [code splitting](https://webpack.js.org/guides/code-splitting/) feature<br/> `features: { storyStoreV7: false }`                                    |\n| `lazyCompilation` | Enables Webpack's experimental [`lazy compilation`](https://webpack.js.org/configuration/experiments/#experimentslazycompilation)<br/>`core: { builder: { options: { lazyCompilation: true } } }` |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/webpack.md","loc":{"lines":{"from":11,"to":14}}}}],["272",{"pageContent":"| `fsCache`         | Configures Webpack's filesystem [caching](https://webpack.js.org/configuration/cache/#cachetype) feature<br/> `core: { builder: { options: { fsCache: true } } }`                                 |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/webpack.md","loc":{"lines":{"from":15,"to":15}}}}],["273",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-webpack-options.js.mdx',\n    'common/storybook-main-webpack-options.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/webpack.md","loc":{"lines":{"from":17,"to":26}}}}],["274",{"pageContent":"Override the default configuration\n\nStorybook's Webpack configuration is based on [Webpack 5](https://webpack.js.org/), allowing it to be extended to fit your project's needs. If you need to add a loader or a plugin, you can provide the `webpackFinal` configuration element in your [`.storybook/main.js|ts`](../configure/overview.md#configure-your-storybook-project) file. The configuration element should export a function that receives the baseline configuration as the first argument and Storybook's options object as the second argument. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-add-sass-config.js.mdx',\n    'common/storybook-main-add-sass-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/webpack.md","loc":{"lines":{"from":28,"to":41}}}}],["275",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-add-sass-config.js.mdx',\n    'common/storybook-main-add-sass-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nWhen Storybook starts, it automatically merges the configuration into its own. However, when providing the `webpackFinal` configuration element, you're responsible for merging the configuration yourself. We recommend that you handle the changes to the `config` object responsibly, preserving both the `entry` and `output` properties.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/webpack.md","loc":{"lines":{"from":41,"to":52}}}}],["276",{"pageContent":"Working with Webpack plugins\n\nAnother way to customize your Storybook configuration is to add a custom plugin or loader to help with code optimization, asset management, or other tasks. Nevertheless, since Storybook relies on the `HtmlWebpackPlugin` to generate the preview page, we recommend that you append the changes to the `config.plugins` array rather than overwriting it. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-simplified-config.js.mdx',\n    'common/storybook-main-simplified-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nAdditionally, when working with Webpack loaders that don't explicitly include specific file extensions (i.e., via the `test` property), you should `exclude` the `.ejs` file extension for that loader.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/webpack.md","loc":{"lines":{"from":54,"to":69}}}}],["277",{"pageContent":"Import a custom Webpack configuration\n\nIf you already have an existing Webpack configuration file that you need to reuse with Storybook, you can import it and merge it into the default configuration. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-using-existing-config.js.mdx',\n    'common/storybook-main-using-existing-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n💡 Projects scaffolded based on generators may require that you import their specific Webpack configuration files. We suggest reading your generator's documentation for more information.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/webpack.md","loc":{"lines":{"from":71,"to":89}}}}],["278",{"pageContent":"Debug Webpack configuration\n\nIf you intend to debug the Webpack configuration used by Storybook, you can use the Storybook CLI to help you. If you're running in [development mode](../api/cli-options.md#dev), you can use the following command:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-debug-webpack-dev.yarn.js.mdx',\n    'common/storybook-debug-webpack-dev.npm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nAdditionally, if you're generating a [static build](../api/cli-options.md#build) of your Storybook, you can use the following command:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-debug-webpack-prod.yarn.js.mdx',\n    'common/storybook-debug-webpack-prod.npm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/webpack.md","loc":{"lines":{"from":91,"to":117}}}}],["279",{"pageContent":"What about Webpack 4 support?\n\nSupport for Webpack 4 has been removed and is no longer being maintained. If you're upgrading your Storybook, it will automatically use Webpack 5 and attempt to migrate your configuration. However, if you're working with a custom Webpack configuration, you may need to update it to work with Webpack 5. The migration process is necessary to ensure that your project runs smoothly with the latest version of Storybook. You can follow the instructions provided on the Webpack [website](https://webpack.js.org/migrate/5/) to update your configuration.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/webpack.md","loc":{"lines":{"from":119,"to":121}}}}],["280",{"pageContent":"Troubleshooting\n\n### TypeScript modules are not resolved within Storybook\n\nStorybook's default Webpack configuration provides support for most project setups without the need for any additional configuration. Nevertheless, depending on your project configuration, or the framework of choice, you may run into issues with TypeScript modules not being resolved within Storybook when aliased from your [`tsconfig` file](https://www.typescriptlang.org/tsconfig). If you encounter this issue, you can use [`tsconfig-paths-webpack-plugin`](https://github.com/dividab/tsconfig-paths-webpack-plugin#tsconfig-paths-webpack-plugin) while [extending Storybook's Webpack config](#override-the-default-configuration) as follows:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-ts-module-resolution.js.mdx',\n    'common/storybook-main-ts-module-resolution.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/webpack.md","loc":{"lines":{"from":123,"to":138}}}}],["281",{"pageContent":"Pre-bundled assets do not show in the Storybook UI\n\nAs Storybook relies on [esbuild](https://esbuild.github.io/) to build its internal manager, support for bundling assets with the `managerWebpack` will no longer have an impact on the Storybook UI. We recommend removing existing `managerWebpack` configuration elements from your Storybook configuration file and bundling assets other than images or CSS into JavaScript beforehand.\n\n#### Learn more about builders\n\n- [Vite builder](./vite.md) for bundling with Vite\n- Webpack builder for bundling with Webpack\n- [Builder API](./builder-api.md) for building a Storybook builder","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/builders/webpack.md","loc":{"lines":{"from":140,"to":148}}}}],["282",{"pageContent":"---\ntitle: 'Babel'\n---\n\nAs of version 7.0, Storybook now re-uses your project’s Babel configuration to apply the same Babel plugins and presets in your Storybook stories as you do in your app. This makes it simpler, less buggy, easier to troubleshoot, and more consistent with other tools in the JS ecosystem.\n\n<div class=\"aside\">\n\nIf you're not using Storybook 7, please reference the <LinkWithVersion version=\"6.5\" href=\"./babel.md\">previous documentation</LinkWithVersion> for guidance on configuring your Babel setup.\n\n</div>\n\n## CRA (Create React App)\n\n[CRA](https://create-react-app.dev/) apps using `@storybook/react-webpack5` with the `@storybook/preset-create-react-app` package use CRA's Babel handling to behave as close as possible to your actual application. None of the other documentation on this page applies.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/babel.md","loc":{"lines":{"from":1,"to":15}}}}],["283",{"pageContent":"Configuring\n\nIn Storybook 7, you are responsible for configuring Babel using your `.babelrc` file, and Storybook does not provide any default. Storybook's frameworks and addons may provide minor programmatic modifications to the Babel configuration.\n\n## Migrating from V6\n\nFor detailed instructions on migrating from `V6` mode, please see [MIGRATION.md](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#babel-mode-v7-exclusively).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/babel.md","loc":{"lines":{"from":17,"to":23}}}}],["284",{"pageContent":"Generate a babelrc\n\nIf your app does not include a babelrc file, and you need one, you can create it by running the following command in your project directory:\n\n```sh\nnpx storybook@latest babelrc","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/babel.md","loc":{"lines":{"from":25,"to":30}}}}],["285",{"pageContent":"Once the command completes, you should have a `.babelrc.json` file created in the root directory of your project, similar to the following example:\n\n<details>\n<summary>Example Babel configuration</summary>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/babel.md","loc":{"lines":{"from":33,"to":36}}}}],["286",{"pageContent":"```json\n{\n  \"sourceType\": \"unambiguous\",\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"shippedProposals\": true,\n        \"loose\": true\n      }\n    ],\n    \"@babel/preset-typescript\"\n  ],\n  \"plugins\": [\n    \"@babel/plugin-transform-shorthand-properties\",\n    \"@babel/plugin-transform-block-scoping\",\n    [\n      \"@babel/plugin-proposal-decorators\",\n      {\n        \"legacy\": true\n      }\n    ],\n    [\n      \"@babel/plugin-proposal-class-properties\",\n      {\n        \"loose\": true\n      }\n    ],\n    [\n      \"@babel/plugin-proposal-private-methods\",\n      {\n        \"loose\": true\n      }\n    ],\n    \"@babel/plugin-proposal-export-default-from\",\n    \"@babel/plugin-syntax-dynamic-import\",\n    [\n      \"@babel/plugin-proposal-object-rest-spread\",\n      {\n        \"loose\": true,\n        \"useBuiltIns\": true\n      }\n    ],\n    \"@babel/plugin-transform-classes\",\n    \"@babel/plugin-transform-arrow-functions\",\n    \"@babel/plugin-transform-parameters\",\n    \"@babel/plugin-transform-destructuring\",\n    \"@babel/plugin-transform-spread\",","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/babel.md","loc":{"lines":{"from":38,"to":85}}}}],["287",{"pageContent":"\"@babel/plugin-transform-arrow-functions\",\n    \"@babel/plugin-transform-parameters\",\n    \"@babel/plugin-transform-destructuring\",\n    \"@babel/plugin-transform-spread\",\n    \"@babel/plugin-transform-for-of\",\n    \"babel-plugin-macros\",\n    \"@babel/plugin-proposal-optional-chaining\",\n    \"@babel/plugin-proposal-nullish-coalescing-operator\",\n    [\n      \"babel-plugin-polyfill-corejs3\",\n      {\n        \"method\": \"usage-global\",\n        \"absoluteImports\": \"core-js\",\n        \"version\": \"3.18.3\"\n      }\n    ]\n  ]\n}","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/babel.md","loc":{"lines":{"from":85,"to":102}}}}],["288",{"pageContent":"</details>\n\nDepending on your environment, you may need to install additional package dependencies.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/babel.md","loc":{"lines":{"from":105,"to":107}}}}],["289",{"pageContent":"Babelrc vs. Babel config\n\nBabel has two different configuration modes: babelrc and Babel config. As explained in more detail [in Babel's docs](https://babeljs.io/docs/en/config-files):\n\n- **babelrc** configures Babel for files in the same folder (or descendant folders) of the location of the babelrc\n- **Babel config** configures Babel globally\n\nBabel recommends to use babelrc, and it's what Storybook generates when you run `npx storybook babelrc`. If your stories are located in the current project directory (e.g., `stories: ['../src/**/*.stories.js']`) this approach will work well.\nHowever, when your Storybook refers to files outside of the current project directory (e.g., `stories: ['../../some-other-directory/**/*.stories.js']`), the babelrc will not apply to those files. However, a Babel config will, and is the recommended approach in that situation.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/babel.md","loc":{"lines":{"from":109,"to":117}}}}],["290",{"pageContent":"Troubleshooting\n\nTo troubleshoot your Babel configuration, set the `BABEL_SHOW_CONFIG_FOR` environment variable. For example, to see how Storybook is transpiling your `.storybook/preview.js` file, add the following environment variable:\n\n```sh\nBABEL_SHOW_CONFIG_FOR=.storybook/preview.js yarn storybook","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/babel.md","loc":{"lines":{"from":119,"to":124}}}}],["291",{"pageContent":"When the command finishes running, it will display the available Babel configuration for the `.storybook/preview.js` file. You can use this information to debug issues with transpilation.\n\n<div class=\"aside\">\n\n💡 Due to what appears to be a Babel bug, setting this flag causes Babel transpilation to fail on the file provided. Thus you cannot actually **run** Storybook using this command. However, it will print out the configuration information as advertised, and therefore you can use this to debug your Storybook. You'll need to remove the flag to actually run your Storybook.\n\n</div>\n\nFor more info, please refer to the [Babel documentation](https://babeljs.io/docs/en/configuration#print-effective-configs).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/babel.md","loc":{"lines":{"from":127,"to":135}}}}],["292",{"pageContent":"---\ntitle: 'Environment variables'\n---\n\nYou can use environment variables in Storybook to change its behavior in different “modes”.\nIf you supply an environment variable prefixed with `STORYBOOK_`, it will be available in `process.env` when using webpack, or `import.meta.env` when using the vite builder:\n\n```shell\nSTORYBOOK_THEME=red STORYBOOK_DATA_KEY=12345 npm run storybook","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/environment-variables.md","loc":{"lines":{"from":1,"to":9}}}}],["293",{"pageContent":"<div class=\"aside\">\n\n💡 Do not store any secrets (e.g., private API keys) or other types of sensitive information in your Storybook. Environment variables are embedded into the build, meaning anyone can view them by inspecting your files.\n\n</div>\n\nThen we can access these environment variables anywhere inside our preview JavaScript code like below:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-read-environment-variables.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nYou can also access these variables in your custom `<head>`/`<body>` using the substitution `%STORYBOOK_X%`, for example: `%STORYBOOK_THEME%` will become `red`.\n\n<div class=\"aside\">\n\n💡 If using the environment variables as attributes or values in JavaScript, you may need to add quotes, as the value will be inserted directly. e.g. `<link rel=\"stylesheet\" href=\"%STORYBOOK_STYLE_URL%\" />`\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/environment-variables.md","loc":{"lines":{"from":12,"to":36}}}}],["294",{"pageContent":"Using .env files\n\nYou can also use `.env` files to change Storybook's behavior in different modes. For example, if you add a `.env` file to your project with the following:\n\n```\nSTORYBOOK_DATA_KEY=12345","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/environment-variables.md","loc":{"lines":{"from":38,"to":43}}}}],["295",{"pageContent":"Then you can access this environment variable anywhere, even within your stories:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/my-component-with-env-variables.js.mdx',\n    'react/my-component-with-env-variables.ts.mdx',\n    'vue/my-component-with-env-variables.js.mdx',\n    'vue/my-component-with-env-variables.ts.mdx',\n    'angular/my-component-with-env-variables.ts.mdx',\n    'web-components/my-component-with-env-variables.js.mdx',\n    'web-components/my-component-with-env-variables.ts.mdx',\n    'svelte/my-component-with-env-variables.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"configure/environment-variables#snippet-my-component-with-env-variables\"\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\nYou can also use specific files for specific modes. Add a <code>.env.development</code> or <code>.env.production</code> to apply different values to your environment variables.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/environment-variables.md","loc":{"lines":{"from":46,"to":69}}}}],["296",{"pageContent":"You can also pass these environment variables when you are [building your Storybook](../sharing/publish-storybook.md) with `build-storybook`.\n\nThen they'll be hardcoded to the static version of your Storybook.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/environment-variables.md","loc":{"lines":{"from":71,"to":73}}}}],["297",{"pageContent":"Using Storybook configuration\n\nAdditionally, you can extend your Storybook configuration file (i.e., [`.storybook/main.js`](../configure/overview.md#configure-story-rendering)) and provide a configuration field that you can use to define specific variables (e.g., API URLs). For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-env-field-config.js.mdx',\n    'common/storybook-main-env-field-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nWhen Storybook loads, it will enable you to access them in your stories similar as you would do if you were working with an `env` file:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/environment-variables.md","loc":{"lines":{"from":75,"to":92}}}}],["298",{"pageContent":"<!-- prettier-ignore-end -->\n\nWhen Storybook loads, it will enable you to access them in your stories similar as you would do if you were working with an `env` file:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/my-component-env-var-config.ts.mdx',\n    'web-components/my-component-env-var-config.js.mdx',\n    'web-components/my-component-env-var-config.ts.mdx',\n    'common/my-component-env-var-config.js.mdx',\n    'common/my-component-env-var-config.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"configure/environment-variables#snippet-my-component-env-var-config\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/environment-variables.md","loc":{"lines":{"from":92,"to":110}}}}],["299",{"pageContent":"Using environment variables to choose the browser\n\nStorybook allows you to choose the browser you want to preview your stories. Either through a `.env` file entry or directly in your `storybook` script.\n\nThe table below lists the available options:\n\n| Browser  | Example              |\n| -------- | -------------------- |\n| Safari   | `BROWSER=\"safari\"`   |\n| Firefox  | `BROWSER=\"firefox\"`  |\n| Chromium | `BROWSER=\"chromium\"` |\n\n<div class=\"aside\">\n💡 By default, Storybook will open a new Chrome window as part of its startup process. If you don't have Chrome installed, make sure to include one of the following options, or set your default browser accordingly.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/environment-variables.md","loc":{"lines":{"from":112,"to":126}}}}],["300",{"pageContent":"---\ntitle: 'Features and behavior'\n---\n\nTo control the layout of Storybook’s UI you can use `addons.setConfig` in your [`.storybook/manager.js`](./overview.md#configure-story-rendering):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-config-layout.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThe following table details how to use the API values:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/features-and-behavior.md","loc":{"lines":{"from":1,"to":17}}}}],["301",{"pageContent":"| Name                |     Type      |                    Description                     |             Example Value             |\n| ------------------- | :-----------: | :------------------------------------------------: | :-----------------------------------: |\n| **isFullscreen**    |    Boolean    |        Show story component as full screen         |                `false`                |\n| **showNav**         |    Boolean    |     Display panel that shows a list of stories     |                `true`                 |\n| **showPanel**       |    Boolean    |   Display panel that shows addon configurations    |                `true`                 |\n| **panelPosition**   | String/Object |           Where to show the addon panel            |          `bottom` or `right`          |\n| **enableShortcuts** |    Boolean    |              Enable/disable shortcuts              |                `true`                 |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/features-and-behavior.md","loc":{"lines":{"from":19,"to":25}}}}],["302",{"pageContent":"| **enableShortcuts** |    Boolean    |              Enable/disable shortcuts              |                `true`                 |\n| **showToolbar**     |    Boolean    |                 Show/hide tool bar                 |                `true`                 |\n| **theme**           |    Object     |         Storybook Theme, see next section          |              `undefined`              |\n| **selectedPanel**   |    String     |            Id to select an addon panel             |       `storybook/actions/panel`       |\n| **initialActive**   |    String     |      Select the default active tab on Mobile       |   `sidebar` or `canvas` or `addons`   |\n| **sidebar**         |    Object     |             Sidebar options, see below             |        `{ showRoots: false }`         |\n| **toolbar**         |    Object     | Modify the tools in the toolbar using the addon id | `{ fullscreen: { hidden: false } } }` |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/features-and-behavior.md","loc":{"lines":{"from":25,"to":31}}}}],["303",{"pageContent":"The following options are configurable under the `sidebar` namespace:\n\n| Name               |   Type   |                          Description                          |                  Example Value                   |\n| ------------------ | :------: | :-----------------------------------------------------------: | :----------------------------------------------: |\n| **showRoots**      | Boolean  |    Display the top-level nodes as a \"root\" in the sidebar     |                     `false`                      |\n| **collapsedRoots** |  Array   |     Set of root node IDs to visually collapse by default      |               `['misc', 'other']`                |\n| **renderLabel**    | Function | Create a custom label for tree nodes; must return a ReactNode | `(item) => <abbr title=\"...\">{item.name}</abbr>` |\n\nThe following options are configurable under the `toolbar` namespace:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/features-and-behavior.md","loc":{"lines":{"from":33,"to":41}}}}],["304",{"pageContent":"The following options are configurable under the `toolbar` namespace:\n\n| Name   |  Type  |            Description             |    Example Value    |\n| ------ | :----: | :--------------------------------: | :-----------------: |\n| **id** | String | Toggle visibility for toolbar item | `{ hidden: false }` |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/features-and-behavior.md","loc":{"lines":{"from":41,"to":45}}}}],["305",{"pageContent":"Configuring through URL parameters\n\nYou can use URL parameters to configure some of the available features:\n\n| Config option       | Query param  |      Supported values      |\n| ------------------- | :----------: | :------------------------: |\n| **enableShortcuts** | `shortcuts`  |          `false`           |\n| **isFullscreen**    |    `full`    |           `true`           |\n| **showNav**         |    `nav`     |          `false`           |\n| **showPanel**       |   `panel`    | `false`, `right`, `bottom` |\n| **selectedPanel**   | `addonPanel` |        Any panel ID        |\n| **showTabs**        |    `tabs`    |           `true`           |\n|       ---           | `instrument` |      `false`, `true`       |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/features-and-behavior.md","loc":{"lines":{"from":47,"to":59}}}}],["306",{"pageContent":"---\ntitle: 'Feature support for frameworks'\n---\n\nStorybook integrates with many popular frontend frameworks. We do our best to keep feature parity amongst frameworks, but it’s tricky for our modest team to support every framework.\n\nBelow is a comprehensive table of what’s supported in which framework integration. If you’d like a certain feature supported in your framework, we welcome pull requests.\n\n## Core frameworks\n\nCore frameworks have dedicated maintainers or contributors who are responsible for maintaining the integration. As such, you can use most Storybook features in these frameworks.\n\n<FrameworkSupportTable core />\n\n## Community frameworks\n\nCommunity frameworks have fewer contributors which means they may not be as up to date as core frameworks. If you use one of these frameworks for your job, please consider contributing to its integration with Storybook.\n\n<FrameworkSupportTable core={false} />","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/frameworks-feature-support.md","loc":{"lines":{"from":1,"to":19}}}}],["307",{"pageContent":"---\ntitle: 'Framework support'\n---\n\nFrameworks are packages that auto-configure Storybook to work with most common environment setups. They simplify the setup process and reduce boilerplate by mirroring your framework's conventions to create applications.\n\n## How do frameworks work in Storybook?\n\nYou start by [installing](../get-started/install.md) Storybook into an existing project. Then, it tries to detect the framework you're using and automatically configures Storybook to work with it. That means adding the necessary libraries as dependencies and adjusting the configuration. Finally, starting Storybook will automatically load the framework configuration before loading any existing addons to match your application environment.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/frameworks.md","loc":{"lines":{"from":1,"to":9}}}}],["308",{"pageContent":"Which frameworks are supported?\n\nStorybook provides support for the leading industry builders and frameworks. However, that doesn't mean you can't use Storybook with other frameworks. Below is a list of currently supported frameworks divided by their builders.\n\n| Builder | Framework                                                                |\n| ------- | ------------------------------------------------------------------------ |\n| Webpack | React, Angular, Vue, Web Components, NextJS, HTML, Ember, Preact, Svelte |\n| Vite    | React, Vue, Web Components, HTML, Svelte, SvelteKit, Qwik                |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/frameworks.md","loc":{"lines":{"from":11,"to":18}}}}],["309",{"pageContent":"What about feature support?\n\nIn addition to supporting the most popular frameworks in the industry, Storybook also tries to retain the same level of feature support for each framework, including the addon ecosystem. For more information, see [Framework support](./frameworks-feature-support.md) for a comprehensive list of which features and addons are currently maintained with the community's help.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/frameworks.md","loc":{"lines":{"from":20,"to":22}}}}],["310",{"pageContent":"Configure\n\nEvery modern web application has unique requirements and relies on various tools and frameworks. By default, with Storybook, you get an out-of-the-box configuration generated to work with most frameworks. However, you can extend your existing configuration file (i.e., `./storybook/main.js|ts|cjs`) and provide additional options. Below is an abridged table with available options and examples of configuring Storybook for your framework.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-framework-config-options.js.mdx',\n    'common/storybook-framework-config-options.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/frameworks.md","loc":{"lines":{"from":24,"to":37}}}}],["311",{"pageContent":"| Option           | Description                                                                                                                                                                                                                                                 | Framework |\n| ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n| `nextConfigPath` | Sets the default path for the NextJS configuration file<br/>`framework: { name: '@storybook/nextjs', options: { nextConfigPath: '../next.config.js'} }`                                                                                                     | NextJS    |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/frameworks.md","loc":{"lines":{"from":39,"to":41}}}}],["312",{"pageContent":"| `builder`        | Configures [Webpack 5](../builders/webpack.md) builder options for NextJS<br/> `core: { builder: { name:'webpack5', options: { lazyCompilation: true} }}`                                                                                                   | NextJS    |\n| `fastRefresh`    | Enables [fast refresh mode](https://www.npmjs.com/package/react-refresh) for React<br/>`framework: { name: '@storybook/react-webpack5', options: { fastRefresh: false } }`                                                                                  | React     |\n| `strictMode`     | Enables React's [strict mode](https://reactjs.org/docs/strict-mode.html)<br/>`framework: { name: '@storybook/react-webpack5', options: { strictMode: false } }`                                                                                             | React     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/frameworks.md","loc":{"lines":{"from":42,"to":44}}}}],["313",{"pageContent":"| `legacyRootApi`  | Requires React 18. Toggles support for React's [legacy root API](https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html#updates-to-client-rendering-apis)<br/>`framework: { name: '@storybook/react-webpack5', options: { legacyRootApi: true } }` | React     |\n| `enableIvy`      | Enabled by default with Angular 9+. Replaces the default compiler with the [Ivy compiler](https://docs.angular.lat/guide/ivy)<br/>`framework: { name: '@storybook/angular', options: { enableIvy: true } }`                                                 | Angular   |\n| `enableNgcc`     | Enabled by default with Angular 9+. Adds support for ngcc for backwards compatibility<br/>`framework: { name: '@storybook/angular', options: { enableNgcc: false } }`                                                                                       | Angular   |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/frameworks.md","loc":{"lines":{"from":45,"to":47}}}}],["314",{"pageContent":"---","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/frameworks.md","loc":{"lines":{"from":47,"to":47}}}}],["315",{"pageContent":"Troubleshooting\n\n### NextJS 13 doesn't work with Storybook\n\nThe latest release of [NexJS](https://nextjs.org/) introduced breaking changes (e.g., [TurboPack](https://turbo.build/pack), [Server Component](https://nextjs.org/docs/advanced-features/react-18/server-components), [SWC](https://nextjs.org/docs/advanced-features/compiler#why-swc)) that are not yet fully supported by Storybook. The Storybook team is working on adding support for these features. In the meantime, you can still use Storybook alongside your NextJS 13 project if you're not relying on them.\n\n### My framework doesn't work with Storybook\n\nOut of the box, most frameworks work seamlessly with Storybook. However, some frameworks (e.g., [CRACO](https://craco.js.org/)) provide their own configuration that Storybook isn't prepared to handle without additional steps, either [via addon](../addons/writing-presets.md) or integration. To learn more, read our [addons guide](../addons/introduction.md).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/frameworks.md","loc":{"lines":{"from":97,"to":105}}}}],["316",{"pageContent":"How do I build a Storybook framework?\n\nStorybook is a framework-agnostic tool. It can be used with any framework. However, to make it easier for you to get started, we provide instructions that you can use to build your framework. To learn more, read our [frameworks guide](../contribute/framework.md).\n\n### Learn about configuring Storybook\n\n- [Theming](./theming.md) to customize the look and feel of Storybook's UI\n- [CSS](./styling-and-css.md) to configure CSS support\n- [Images & assets](./images-and-assets.md) for static asset handling\n- [Environment variables](./environment-variables.md) to configure environment variables","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/frameworks.md","loc":{"lines":{"from":107,"to":116}}}}],["317",{"pageContent":"---\ntitle: 'Images, fonts, and assets'\n---\n\nComponents often rely on images, videos, fonts, and other assets to render as the user expects. There are many ways to use these assets in your story files.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/images-and-assets.md","loc":{"lines":{"from":1,"to":5}}}}],["318",{"pageContent":"Import assets into stories\n\nYou can import any media assets by importing (or requiring) them. It works out of the box with our default config. But, if you are using a custom webpack config, you’ll need to add the [file loader](https://v4.webpack.js.org/loaders/) to handle the required files.\n\nAfterward, you can use any asset in your stories:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/images-and-assets.md","loc":{"lines":{"from":7,"to":13}}}}],["319",{"pageContent":"Afterward, you can use any asset in your stories:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/component-story-static-asset-with-import.js.mdx',\n    'react/component-story-static-asset-with-import.ts.mdx',\n    'vue/component-story-static-asset-with-import.2.js.mdx',\n    'vue/component-story-static-asset-with-import.2.ts.mdx',\n    'vue/component-story-static-asset-with-import.3.js.mdx',\n    'vue/component-story-static-asset-with-import.3.ts.mdx',\n    'angular/component-story-static-asset-with-import.ts.mdx',\n    'svelte/component-story-static-asset-with-import.js.mdx',\n    'web-components/component-story-static-asset-with-import.js.mdx',\n    'web-components/component-story-static-asset-with-import.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"configure/images-and-assets#snippet-component-story-static-asset-with-import\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/images-and-assets.md","loc":{"lines":{"from":13,"to":34}}}}],["320",{"pageContent":"Serving static files via Storybook Configuration\n\nWe recommend serving static files via Storybook to ensure that your components always have the assets they need to load. We recommend this technique for assets that your components often use, like logos, fonts, and icons.\n\nConfigure a directory (or a list of directories) where your assets live when starting Storybook. Use the `staticDirs` configuration element in your main Storybook configuration file (i.e., `.storybook/main.js|ts`) to specify the directories:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-with-single-static-dir.js.mdx',\n    'common/storybook-main-with-single-static-dir.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nHere `../public` is your static directory. Now use it in a component or story like this.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/images-and-assets.md","loc":{"lines":{"from":36,"to":55}}}}],["321",{"pageContent":"<!-- prettier-ignore-end -->\n\nHere `../public` is your static directory. Now use it in a component or story like this.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/component-story-static-asset-without-import.js.mdx',\n    'react/component-story-static-asset-without-import.ts.mdx',\n    'vue/component-story-static-asset-without-import.js.mdx',\n    'vue/component-story-static-asset-without-import.ts.mdx',\n    'angular/component-story-static-asset-without-import.ts.mdx',\n    'svelte/component-story-static-asset-without-import.js.mdx',\n    'web-components/component-story-static-asset-without-import.js.mdx',\n    'web-components/component-story-static-asset-without-import.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"configure/images-and-assets#snippet-component-story-static-asset-without-import\"\n/>\n\n<!-- prettier-ignore-end -->\n\nYou can also pass a list of directories separated by commas without spaces instead of a single directory.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/images-and-assets.md","loc":{"lines":{"from":55,"to":80}}}}],["322",{"pageContent":"<!-- prettier-ignore-end -->\n\nYou can also pass a list of directories separated by commas without spaces instead of a single directory.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-with-multiple-static-dir.js.mdx',\n    'common/storybook-main-with-multiple-static-dir.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nOr even use a configuration object to define the directories:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-with-object-configuration-static-dir.js.mdx',\n    'common/storybook-main-with-object-configuration-static-dir.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/images-and-assets.md","loc":{"lines":{"from":80,"to":106}}}}],["323",{"pageContent":"**[⚠️ Deprecated]** Serving static files via Storybook CLI\n\nUsing `--static-dir` or `-s` option with Storybook CLI is deprecated. It is recommended to use [Storybook static directory configuration option](#serving-static-files-via-storybook-configuration) instead.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/images-and-assets.md","loc":{"lines":{"from":108,"to":110}}}}],["324",{"pageContent":"Reference assets from a CDN\n\nUpload your files to an online CDN and reference them. In this example, we’re using a placeholder image service.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/component-story-static-asset-cdn.js.mdx',\n    'react/component-story-static-asset-cdn.ts.mdx',\n    'vue/component-story-static-asset-cdn.js.mdx',\n    'vue/component-story-static-asset-cdn.ts.mdx',\n    'angular/component-story-static-asset-cdn.ts.mdx',\n    'svelte/component-story-static-asset-cdn.js.mdx',\n    'web-components/component-story-static-asset-cdn.js.mdx',\n    'web-components/component-story-static-asset-cdn.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"configure/images-and-assets#snippet-component-story-static-asset-cdn\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/images-and-assets.md","loc":{"lines":{"from":112,"to":133}}}}],["325",{"pageContent":"Absolute versus relative paths\n\nSometimes, you may want to deploy your Storybook into a subpath, like `https://example.com/storybook`.\n\nIn this case, you need to have all your images and media files with relative paths. Otherwise, the browser cannot locate those files.\n\nIf you load static content via importing, this is automatic, and you do not have to do anything.\n\nSuppose you are serving assets in a [static directory](#serving-static-files-via-storybook-configuration) along with your Storybook. In that case, you need to use relative paths to load images or use the base element.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/images-and-assets.md","loc":{"lines":{"from":135,"to":143}}}}],["326",{"pageContent":"---\ntitle: 'Configure Storybook'\n---\n\nStorybook is configured via a folder called `.storybook`, which contains various configuration files.\n\n<div class=\"aside\">\n\nNote that you can change the folder that Storybook uses by setting the `-c` flag to your `storybook dev` and `storybook build` [CLI commands](../api/cli-options.md).\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":1,"to":11}}}}],["327",{"pageContent":"Configure your Storybook project\n\nStorybook's main configuration (i.e., the `main.js|ts`) defines your Storybook project's behavior, including the location of your stories, the addons you use, feature flags and other project-specific settings. This file should be in the `.storybook` folder in your project's root directory. You can author this file in either JavaScript or [TypeScript](./typescript.md). Listed below are the available options and examples of how to use them.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-default-setup.js.mdx',\n    'common/storybook-main-baseline-setup.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\nℹ️ This configuration file is a [preset](../addons/addon-types.md) and, as such, has a powerful interface, which can be further customized. Read our documentation on writing [presets](../addons/writing-presets.md) to learn more.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":13,"to":32}}}}],["328",{"pageContent":"| Configuration element | Description                                                                                                                                                                                              |\n| --------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `stories`             | The array of globs that indicates the [location of your story files](#configure-story-loading), relative to `main.js`                                                                                    |\n| `staticDirs`          | Sets a list of directories of [static files](./images-and-assets.md#serving-static-files-via-storybook-configuration) to be loaded by Storybook <br/> `staticDirs: ['../public']`                        |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":34,"to":37}}}}],["329",{"pageContent":"| `addons`              | Sets the list of [addons](https://storybook.js.org/addons/) loaded by Storybook <br/> `addons: ['@storybook/addon-essentials']`                                                                          |\n| `typescript`          | Configures how Storybook handles [TypeScript files](./typescript.md) <br/> `typescript: { check: false, checkOptions: {} }`                                                                              |\n| `framework`           | Configures Storybook based on a set of [framework-specific](./frameworks.md) settings <br/> `framework: { name: '@storybook/svelte-vite', options:{} }`                                                  |\n| `core`                | Configures Storybook's internal features<br/> `core: { disableTelemetry: true, }`                                                                                                                        |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":38,"to":41}}}}],["330",{"pageContent":"| `docs`                | Configures Storybook's [auto-generated documentation](../writing-docs/autodocs.md)<br/> `docs: { autodocs: 'tag' }`                                                                                      |\n| `features`            | Enables Storybook's additional features<br/> See table below for a list of available features `features: { storyStoreV7: true }`                                                                         |\n| `refs`                | Configures [Storybook composition](../sharing/storybook-composition.md) <br/> `refs:{ example: { title: 'ExampleStorybook', url:'https://your-url.com' } }`                                              |\n| `logLevel`            | Configures Storybook's logs in the browser terminal. Useful for debugging <br/> `logLevel: 'debug'`                                                                                                      |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":42,"to":45}}}}],["331",{"pageContent":"| `webpackFinal`        | Customize Storybook's [Webpack](../builders/webpack.md) setup <br/> `webpackFinal: async (config:any) => { return config; }`                                                                             |\n| `viteFinal`           | Customize Storybook's Vite setup when using the [vite builder](https://github.com/storybookjs/builder-vite) <br/> `viteFinal: async (config: Vite.InlineConfig, options: Options) => { return config; }` |\n| `env`                 | Defines custom Storybook [environment variables](./environment-variables.md#using-storybook-configuration). <br/> `env: (config) => ({...config, EXAMPLE_VAR: 'Example var' }),`                         |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":46,"to":48}}}}],["332",{"pageContent":"Feature flags\n\nAdditionally, you can also provide additional feature flags to your Storybook configuration. Below is an abridged list of available features that are currently available.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":50,"to":52}}}}],["333",{"pageContent":"| Configuration element | Description                                                                                                                                                       |\n| --------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `storyStoreV7`        | Configures Storybook to load stories [on demand](#on-demand-story-loading), rather than during boot up <br/> `features: { storyStoreV7: true }`                   |\n| `buildStoriesJson`    | Generates a `stories.json` file to help story loading with the on-demand mode <br/> `features: { buildStoriesJson: true }`                                        |\n| `legacyMdx1`          | Enables support for MDX version 1 as a fallback. Requires [`@storybook/mdx1-csf`](https://github.com/storybookjs/mdx1-csf) <br/> `features: { legacyMdx1: true }` |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":54,"to":58}}}}],["334",{"pageContent":"Configure story loading\n\nBy default, Storybook will load stories from your project based on a glob (pattern matching string) in `.storybook/main.js|ts` that matches all files in your project with extension `.stories.*`. The intention is for you to colocate a story file along with the component it documents.\n\n```\n•\n└── components\n    ├── Button.js\n    └── Button.stories.js\n```\n\nIf you want to use a different naming convention, you can alter the glob using the syntax supported by [picomatch](https://github.com/micromatch/picomatch#globbing-features).\n\nFor example, if you wanted to pull both `.md` and `.js` files from the `my-project/src/components` directory, you could write:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-js-md-files.js.mdx',\n    'common/storybook-main-js-md-files.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":60,"to":84}}}}],["335",{"pageContent":"With a configuration object\n\nAdditionally, you can customize your Storybook configuration to load your stories based on a configuration object. For example, if you wanted to load your stories from a `packages` directory, you could adjust your `stories` configuration field into the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-storyloading-with-custom-object.js.mdx',\n    'common/storybook-storyloading-with-custom-object.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nWhen Storybook starts, it will look for any file containing the `stories` extension inside the `packages/stories` directory and generate the titles for your stories.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":86,"to":101}}}}],["336",{"pageContent":"With a directory\n\nYou can also simplify your Storybook configuration and load the stories using a directory. For example, if you want to load all the stories inside a `packages/MyStories`, you can adjust the configuration as such:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-storyloading-with-directory.js.mdx',\n    'common/storybook-storyloading-with-directory.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n### With a custom implementation\n\nYou can also adjust your Storybook configuration and implement custom logic to load your stories. For example, suppose you were working on a project that includes a particular pattern that the conventional ways of loading stories could not solve. In that case, you could adjust your configuration as follows:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-storyloading-custom-logic.js.mdx',\n    'common/storybook-storyloading-custom-logic.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":103,"to":131}}}}],["337",{"pageContent":"On-demand story loading\n\nAs your Storybook grows, it gets challenging to load all of your stories performantly, slowing down the loading times and yielding a large bundle. Out of the box, Storybook loads your stories on demand rather than during boot-up to improve the performance of your Storybook. If you need to load all of your stories during boot-up, you can disable this feature by setting the `storyStoreV7` feature flag to `false` in your configuration as follows:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-on-demand-story-loading.js.mdx',\n    'common/storybook-on-demand-story-loading.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":133,"to":146}}}}],["338",{"pageContent":"Known limitations\n\nBecause of the way stories are currently indexed in Storybook, loading stories on demand with `storyStoreV7` has a couple of minor limitations at the moment:\n\n- [CSF formats](../api/csf.md) from version 1 to version 3 are supported. The `storiesOf` construct is not.\n- Custom`storySort` functions are allowed based on a restricted API.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":148,"to":153}}}}],["339",{"pageContent":"Configure story rendering\n\nTo control the way stories are rendered and add global [decorators](../writing-stories/decorators.md#global-decorators) and [parameters](../writing-stories/parameters.md#global-parameters), create a `.storybook/preview.js` file. This is loaded in the Canvas UI, the “preview” iframe that renders your components in isolation. Use `preview.js` for global code (such as [CSS imports](../get-started/setup.md#render-component-styles) or JavaScript mocks) that applies to all stories.\n\nThe `preview.js` file can be an ES module and export the following keys:\n\n- `decorators` - an array of global [decorators](../writing-stories/decorators.md#global-decorators)\n- `parameters` - an object of global [parameters](../writing-stories/parameters.md#global-parameters)\n- `globalTypes` - definition of [globalTypes](../essentials/toolbars-and-globals.md#global-types-and-the-toolbar-annotation)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":155,"to":163}}}}],["340",{"pageContent":"If you’re looking to change how to order your stories, read about [sorting stories](../writing-stories/naming-components-and-hierarchy.md#sorting-stories).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":165,"to":165}}}}],["341",{"pageContent":"Configure Storybook’s UI\n\nTo control the behavior of Storybook’s UI (the **“manager”**), you can create a `.storybook/manager.js` file.\n\nThis file does not have a specific API but is the place to set [UI options](./features-and-behavior.md) and to configure Storybook’s [theme](./theming.md).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/overview.md","loc":{"lines":{"from":167,"to":171}}}}],["342",{"pageContent":"---\ntitle: 'Sidebar & URLS'\n---\n\nStorybook’s sidebar lists all your stories grouped by component. When you have many components, you may also wish to group those components. To do so, you can add the `/` separator to the `title` of your CSF file, and Storybook will group the stories into groups based on common prefixes:\n\n![Storybook sidebar anatomy](./sidebar-anatomy.png)\n\nWe recommend using a nesting scheme that mirrors the filesystem path of the components. For example, if you have a file `components/modals/Alert.js`, name the CSF file `components/modals/Alert.stories.js` and title it `Components/Modals/Alert`.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/sidebar-and-urls.md","loc":{"lines":{"from":1,"to":9}}}}],["343",{"pageContent":"Roots\n\nBy default, Storybook will treat your top-level nodes as “roots”. Roots are displayed in the UI as “sections” of the hierarchy. Lower level groups will show up as folders:\n\n![Storybook sidebar story roots](./sidebar-roots.png)\n\nIf you’d prefer to show top-level nodes as folders rather than roots, you can set the `sidebar.showRoots` option to `false` in [`./storybook/manager.js`](./overview.md#configure-story-rendering):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-manager-disable-roots.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/sidebar-and-urls.md","loc":{"lines":{"from":11,"to":27}}}}],["344",{"pageContent":"Permalink to stories\n\nBy default, Storybook generates an `id` for each story based on the component title and the story name. This `id` in particular is used in the URL for each story, and that URL can serve as a permalink (primarily when you [publish](../sharing/publish-storybook.md) your Storybook).\n\nConsider the following story:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/foo-bar-baz-story.ts.mdx',\n    'web-components/foo-bar-baz-story.js.mdx',\n    'web-components/foo-bar-baz-story.ts.mdx',\n    'common/foo-bar-baz-story.js.mdx',\n    'common/foo-bar-baz-story.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"configure/sidebar-and-urls#snippet-foo-bar-baz-story\"\n/>\n\n<!-- prettier-ignore-end -->\n\nStorybook's ID-generation logic will give this the `id` `foo-bar--baz`, so the link would be `?path=/story/foo-bar--baz`.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/sidebar-and-urls.md","loc":{"lines":{"from":29,"to":51}}}}],["345",{"pageContent":"<!-- prettier-ignore-end -->\n\nStorybook's ID-generation logic will give this the `id` `foo-bar--baz`, so the link would be `?path=/story/foo-bar--baz`.\n\nIt is possible to manually set the story's id, which is helpful if you want to rename stories without breaking permalinks. Suppose you want to change the position in the hierarchy to `OtherFoo/Bar` and the story name to `Moo`. Here's how to do that:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/other-foo-bar-story.ts.mdx',\n    'web-components/other-foo-bar-story.js.mdx',\n    'web-components/other-foo-bar-story.ts.mdx',\n    'common/other-foo-bar-story.js.mdx',\n    'common/other-foo-bar-story.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"configure/sidebar-and-urls#snippet-other-foo-bar-story\"\n/>\n\n<!-- prettier-ignore-end -->\n\nStorybook will prioritize the `id` over the title for ID generation if provided and prioritize the `story.name` over the export key for display.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/sidebar-and-urls.md","loc":{"lines":{"from":51,"to":73}}}}],["346",{"pageContent":"CSF 3.0 auto-titles\n\nStorybook 6.4 introduced [CSF 3.0](https://storybook.js.org/blog/component-story-format-3-0/) as an experimental feature, allowing you to write stories more compactly. Suppose you're already using this format to write your stories. In that case, you can omit the `title` element from the default export and allow Storybook automatically infer it based on the file's physical location. For example, given the following configuration and story:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-configuration-src-dir.main-js.js.mdx',\n    'common/storybook-main-configuration-src-dir.main-ts.ts.mdx',\n    'angular/component-story-auto-title.csf3-story-ts.ts.mdx',\n    'web-components/component-story-auto-title.csf3-story-ts.js.mdx',\n    'web-components/component-story-auto-title.csf3-story-ts.ts.mdx',\n    'common/component-story-auto-title.csf3-story.js.mdx',\n    'common/component-story-auto-title.csf3-story-ts.ts.mdx',\n  ]}\n/>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/sidebar-and-urls.md","loc":{"lines":{"from":75,"to":91}}}}],["347",{"pageContent":"<!-- prettier-ignore-end -->\n\nWhen Storybook loads, the story can show up in the sidebar as `components/My Component`.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/sidebar-and-urls.md","loc":{"lines":{"from":93,"to":95}}}}],["348",{"pageContent":"Auto-title filename case\n\nStarting with Storybook 6.5, story titles generated automatically no longer rely on Lodash's [startCase](https://lodash.com/docs/#startCase).\nInstead, the file name casing is preserved, allowing additional control over the story title. For example, `components/My Component` will be defined as `components/MyComponent`.\n\nIf you need, you can revert to the previous pattern by adding the following configuration:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-manager-render-label-stories.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/sidebar-and-urls.md","loc":{"lines":{"from":97,"to":112}}}}],["349",{"pageContent":"Auto-title redundant filenames\n\nIn addition to improvements to the story file name casing, a new heuristic was introduced, removing redundant names in case the filename has the same name as the directory name, or if it's called `index.stories.js|ts`. For example, before `components/MyComponent/MyComponent.stories.js` was defined as `Components/MyComponent/MyComponent` in the sidebar. Now it will be defined as `Components/MyComponent`.\n\nIf you need to preserve the naming scheme, you can add the `title` element to the default export. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/storybook-csf-3-auto-title-redundant.ts.mdx',\n    'common/storybook-csf-3-auto-title-redundant.js.mdx',\n    'common/storybook-csf-3-auto-title-redundant.ts.mdx',\n  ]}\n  usesCsf3\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/sidebar-and-urls.md","loc":{"lines":{"from":114,"to":131}}}}],["350",{"pageContent":"Auto-title prefixes\n\nAdditionally, if you customize your Storybook to load your stories based on a [configuration object](./overview.md#with-a-configuration-object), including a `titlePrefix`, Storybook automatically prefixes all titles to matching stories. For example, assuming you have the following configuration:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-auto-title-custom.js.mdx',\n    'common/storybook-main-auto-title-custom.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nWhen Storybook generates the titles for all matching stories, they'll retain the `Custom` prefix.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/sidebar-and-urls.md","loc":{"lines":{"from":133,"to":148}}}}],["351",{"pageContent":"Story Indexers\n\nStory Indexers are a set of heuristics used by Storybook to crawl your filesystem based on a given glob pattern searching for matching stories, which is then used to generate an index.json (formerly stories.json) file responsible for populating the sidebar with the necessary information. By default, this heuristic will look for files that contain the following scheme \\*.stories.@(js|jsx|ts|tsx). However, if you need, you can create your custom story indexer that you can use to include stories that have a different naming convention. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-csf-indexer.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/sidebar-and-urls.md","loc":{"lines":{"from":150,"to":162}}}}],["352",{"pageContent":"Processing custom titles\n\nOut of the box, Storybook automatically infers the story's title based on a set of patterns, including, for example, the file's physical location. If you're working on creating a custom story indexer and you want to handle the titles based on your set of rules, you can adjust it and provide a `makeTitle` function inside the `loadCsf` function. Below is a condensed table and examples of how these patterns work and how they relate to stories.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/sidebar-and-urls.md","loc":{"lines":{"from":164,"to":166}}}}],["353",{"pageContent":"| Pattern        | Description                                                                                                                                    |\n| -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| `titlePrefix`  | Prefixes the indexed story title based on the [configuration](./overview.md#with-a-configuration-object).                                      |\n| `title`        | Requires CSF and MDX.<br/>Infers the story title based on the information defined in the metadata.                                             |\n| `name`         | Requires CSF and MDX.<br/> Overrides the story title based on the provided [name](../writing-stories/introduction.md#rename-stories) property. |\n| `component`    | Requires CSF.<br/> Generates the title based on the component property defined in the metadata.                                                |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/sidebar-and-urls.md","loc":{"lines":{"from":168,"to":173}}}}],["354",{"pageContent":"| `component`    | Requires CSF.<br/> Generates the title based on the component property defined in the metadata.                                                |\n| `of`           | Requires MDX.<br/> Retrieves the title based on the referenced story file.                                                                     |\n| `story export` | Requires CSF. <br/> Defines the title based on the [named story export](../api/csf.md#named-story-exports).                                    |\n| `filename`     | Enabled with custom indexers.<br/> Defines the story title based on the filename parsed with the indexer.                                      |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/sidebar-and-urls.md","loc":{"lines":{"from":173,"to":176}}}}],["355",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/csf-3-example-title.ts.mdx',\n    'common/csf-3-example-title.mdx.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-story-indexer-main.ts.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 Story indexers are a great way to get non-developers playing with your components and stories. They can do much more than documented here; we encourage you to check out the [`@storybook-extras/markdown` ](https://storybook.js.org/addons/@storybook-extras/markdown/) to learn more about these techniques.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/sidebar-and-urls.md","loc":{"lines":{"from":178,"to":203}}}}],["356",{"pageContent":"---\ntitle: 'Story layout'\n---\n\nThe `layout` [parameter](../writing-stories/parameters.md) allows you to configure how stories are positioned in Storybook's Canvas tab.\n\n## Global layout\n\nYou can add the parameter to your [`./storybook/preview.js`](./overview.md#configure-story-rendering), like so:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-layout-param.js.mdx',\n    'common/storybook-preview-layout-param.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n![Layout params centered story](./layout-params-story-centered.png)\n\nIn the example above, Storybook will center all stories in the UI. `layout` accepts these options:\n\n- `centered`: center the component horizontally and vertically in the Canvas\n- `fullscreen`: allow the component to expand to the full width and height of the Canvas\n- `padded`: _(default)_ Add extra padding around the component","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/story-layout.md","loc":{"lines":{"from":1,"to":28}}}}],["357",{"pageContent":"Component layout\n\nYou can also set it at a component level like so:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/storybook-component-layout-param.ts.mdx',\n    'web-components/storybook-component-layout-param.js.mdx',\n    'web-components/storybook-component-layout-param.ts.mdx',\n    'common/storybook-component-layout-param.js.mdx',\n    'common/storybook-component-layout-param.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n## Story layout\n\nOr even apply it to specific stories like so:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/storybook-story-layout-param.ts.mdx',\n    'web-components/storybook-story-layout-param.js.mdx',\n    'web-components/storybook-story-layout-param.ts.mdx',\n    'common/storybook-story-layout-param.js.mdx',\n    'common/storybook-story-layout-param.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"configure/story-layout#snippet-storybook-story-layout-param\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/story-layout.md","loc":{"lines":{"from":30,"to":66}}}}],["358",{"pageContent":"---\ntitle: 'Story rendering'\n---\n\nIn Storybook, your stories render in a particular “preview” iframe (Canvas tab) inside the larger Storybook web application. The JavaScript build configuration of the preview is controlled by a [webpack](../builders/webpack.md) config, but you also may want to directly control the rendered HTML to help your stories render correctly.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/story-rendering.md","loc":{"lines":{"from":1,"to":5}}}}],["359",{"pageContent":"Adding to &#60;head&#62;\n\nIf you need to add extra elements to the `head` of the preview iframe, for instance, to load static stylesheets, font files, or similar, you can create a file called [`.storybook/preview-head.html`](./overview.md#configure-story-rendering) and add tags like this:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-head-example.html.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\nStorybook will inject these tags into the _preview iframe_ where your components render, not the Storybook application UI.\n\n</div>\n\nIt's also possible to modify the preview head HTML programmatically using a preset defined in the `main.js` file. For more information see [Preview/Manager templates](../addons/writing-presets.md#previewmanager-templates).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/story-rendering.md","loc":{"lines":{"from":7,"to":27}}}}],["360",{"pageContent":"Adding to &#60;body&#62;\n\nSometimes, you may need to add different tags to the `<body>`. Helpful for adding some custom content roots.\n\nYou can accomplish this by creating a file called `preview-body.html` inside your `.storybook` directory and adding tags like this:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-body-example.html.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nIf using relative sizing in your project (like `rem` or `em`), you may update the base `font-size` by adding a `style` tag to `preview-body.html`:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-body-font-size.html.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\nStorybook will inject these tags into the _preview iframe_ where your components render, not the Storybook application UI.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/story-rendering.md","loc":{"lines":{"from":29,"to":61}}}}],["361",{"pageContent":"<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\nStorybook will inject these tags into the _preview iframe_ where your components render, not the Storybook application UI.\n\n</div>\n\nSimilarly to the preview head HTML, preview body HTML can also be updated programmatically using a preset. See [Preview/Manager templates](../addons/writing-presets.md#previewmanager-templates) for more information.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/story-rendering.md","loc":{"lines":{"from":61,"to":69}}}}],["362",{"pageContent":"---\ntitle: 'Storybook Addons'\n---\n\nA key strength of Storybook is its extensibility. Use addons to extend and customize Storybook to fit your team’s development workflow.\n\nAddons are integral to the way Storybook works. Many of Storybook's core features are implemented as addons! These addons are installed out of the box with [essentials](../essentials/introduction.md).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/storybook-addons.md","loc":{"lines":{"from":1,"to":7}}}}],["363",{"pageContent":"Addon features\n\nThe most obvious thing addons affect in Storybook is the UI of Storybook itself. Within the UI the **toolbar** and **addons panel** are the two chief places addons will appear.\n\n![Storybook addons locations](./addon-locations.png)\n\nAddons can also hook into the rendering of your story in the preview pane via injecting their own [decorators](../writing-stories/decorators.md).\n\nFinally, addons can affect the build setup of Storybook by injecting their own webpack configuration to allow the use of other tools in Storybook. Addons that do only this are often referred to as [presets](../addons/addon-types.md).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/storybook-addons.md","loc":{"lines":{"from":9,"to":17}}}}],["364",{"pageContent":"Essential, core and community addons\n\nThere are many, many Storybook addons, but they can be roughly categorized into three areas:\n\n- **Essential** addons are core-team developed addons that are considered a part of the out-of-the-box user experience. These ship by default with new Storybook installations.\n- **Core** addons are developed by the core team. They are kept in sync with the development of Storybook itself and written in idiomatic ways as templates for other addons. They can be found within the [Storybook monorepo](https://github.com/storybookjs/storybook/tree/next/code/addons).\n- **Community** addons are addons written by the massive Storybook community. They can be found on our [website](https://storybook.js.org/addons/), [GitHub](https://github.com/), and [npm](https://www.npmjs.com/).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/storybook-addons.md","loc":{"lines":{"from":19,"to":25}}}}],["365",{"pageContent":"---\ntitle: 'Styling and CSS'\n---\n\nThere are many ways to include CSS in a web application, and correspondingly there are many ways to include CSS in Storybook. Usually, it is best to try and replicate what your application does with styling in Storybook’s configuration.\n\n### CSS-in-JS\n\nCSS-in-JS libraries are designed to use basic JavaScript, and they often work in Storybook without any extra configuration. Some libraries expect components to render in a specific rendering “context” (for example, to provide themes), and you may need to add a [global decorator](../writing-stories/decorators.md#global-decorators) to supply it.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/styling-and-css.md","loc":{"lines":{"from":1,"to":9}}}}],["366",{"pageContent":"Importing CSS files\n\nIf your component files import their CSS, Storybook's webpack configuration will work out of the box. The noticeable exception to this is if you're using a CSS precompiler. In this case, you can either install and configure a Storybook addon (e.g., [`@storybook/addon-styling`](https://github.com/storybookjs/addon-styling#storybookaddon-styling)), or customize [Storybook's webpack configuration](../builders/webpack.md#extending-storybooks-webpack-config) and include the appropriate loader.\n\n<FeatureSnippets paths={['configure/css-troubleshooting/angular.mdx']} />\n\nTo use your CSS in all stories, you import it in [`.storybook/preview.js`](./overview.md#configure-story-rendering)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/styling-and-css.md","loc":{"lines":{"from":11,"to":17}}}}],["367",{"pageContent":"Adding webfonts\n\nIf you need webfonts to be available, you may need to add some code to the [`.storybook/preview-head.html`](./story-rendering.md#adding-to-head) file. We recommend including any assets with your Storybook if possible, in which case you likely want to configure the [static file location](./images-and-assets.md#serving-static-files-via-storybook-configuration).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/styling-and-css.md","loc":{"lines":{"from":19,"to":21}}}}],["368",{"pageContent":"---\ntitle: 'Telemetry'\n---\n\nStorybook collects completely anonymous data to help us improve user experience. Participation in this anonymous program is optional, and you may opt-out if you'd not like to share any information.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/telemetry.md","loc":{"lines":{"from":1,"to":5}}}}],["369",{"pageContent":"Why is telemetry collected?\n\nHundreds of thousands of developers use Storybook daily to build, test, and document components. Storybook is framework agnostic and integrates with the front-end ecosystem:\n\n- **JavaScript frameworks** such as [React](https://reactjs.org/), [Vue](https://vuejs.org/), and [Svelte](https://svelte.dev/)\n- **Libraries** such as [Styled-Components](https://styled-components.com/), [Tailwind](https://tailwindcss.com/), [Redux](https://redux.js.org/)\n- **Design tools** such as [Figma](https://figma.com/), [Sketch](https://www.sketch.com/), [Zeplin](https://zeplin.io/) and [InVision](https://www.invisionapp.com/)\n- **Workflow tools** such as [Notion](https://www.notion.so/product), [Confluence](https://www.atlassian.com/software/confluence), and [Jira](https://www.atlassian.com/software/jira)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/telemetry.md","loc":{"lines":{"from":7,"to":14}}}}],["370",{"pageContent":"In the past, our improvement process relied on manually gathering feedback. But with a growing userbase and the need to support a wide variety of integrations, we need a more accurate method for gauging Storybook usage and pain points.\n\nThese telemetry data help us (the maintainers) to prioritize the highest impact projects. That allows us to keep up with trends in the front-end ecosystem and verify that our community's hard work achieves the intended result.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/telemetry.md","loc":{"lines":{"from":16,"to":18}}}}],["371",{"pageContent":"What is being collected?\n\nWe collect general usage details, including command invocation, Storybook version, addons, and the view layer.\n\nSpecifically, we track the following information in our telemetry events:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/telemetry.md","loc":{"lines":{"from":20,"to":24}}}}],["372",{"pageContent":"- Timestamp of the occurrence.\n- Command invoked (e.g., `init`, `upgrade`, `dev`, `build`).\n- Storybook unique identifier: One-way hash generated during Storybook installation process.\n- One way hash of the IP address where the event occurred for spam detection.\n- Story count.\n- Storybook version.\n- Storybook metadata:\n  - Language (e.g., TypeScript, JavaScript).\n  - Supported view layers (e.g., React, Vue, Angular, Svelte).\n  - Builder (e.g., Webpack4, Webpack5, Vite).\n  - Meta framework (e.g., [Next](https://nextjs.org/), [Gatsby](https://www.gatsbyjs.com/), [CRA](https://create-react-app.dev/)).\n  - [Addons](https://storybook.js.org/addons/) (e.g., [Essentials](../essentials/introduction.md), [Accessibility](https://storybook.js.org/addons/@storybook/addon-a11y/)).\n  - [Feature flags](./overview.md#feature-flags) (e.g., `buildStoriesJson`).\n- Package manager information (e.g., `npm`, `yarn`).\n- Monorepo information (e.g., [NX](https://nx.dev/), [Turborepo](https://turborepo.org/)).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/telemetry.md","loc":{"lines":{"from":26,"to":40}}}}],["373",{"pageContent":"- Package manager information (e.g., `npm`, `yarn`).\n- Monorepo information (e.g., [NX](https://nx.dev/), [Turborepo](https://turborepo.org/)).\n- Whether the command was invoked on CI or not.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/telemetry.md","loc":{"lines":{"from":40,"to":42}}}}],["374",{"pageContent":"Access to the raw data is highly controlled, limited to select members of Storybook's core team who maintain the telemetry. We cannot identify individual users from the dataset: it is anonymized and untraceable back to the user.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/telemetry.md","loc":{"lines":{"from":44,"to":44}}}}],["375",{"pageContent":"What about sensitive information?\n\nWe take your privacy and our security very seriously. We perform additional steps to ensure that secure data (e.g., environment variables or other forms of sensitive data) **do not** make their way into our analytics. You can view all the information we collect by setting the `STORYBOOK_TELEMETRY_DEBUG` to `1` to print out the information gathered. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-telemetry-preview-event.yarn.js.mdx',\n    'common/storybook-telemetry-preview-event.npm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nWill generate the following output:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/telemetry.md","loc":{"lines":{"from":46,"to":61}}}}],["376",{"pageContent":"```json\n{\n  \"anonymousId\": \"8bcfdfd5f9616a1923dd92adf89714331b2d18693c722e05152a47f8093392bb\",\n  \"eventType\": \"start\",\n  \"payload\": {\n    \"storyIndex\": {\n      \"storyCount\": 4,\n      \"version\": 3\n    }\n  },\n  \"inCI\": false,\n  \"metadata\": {\n    \"generatedAt\": 1648233198722,\n    \"builder\": {\n      \"name\": \"webpack5\"\n    },\n    \"hasCustomBabel\": false,\n    \"hasCustomWebpack\": true,\n    \"hasStaticDirs\": true,\n    \"hasStorybookEslint\": false,\n    \"refCount\": 0,\n    \"metaFramework\": {\n      \"name\": \"CRA\",\n      \"packageName\": \"react-scripts\",\n      \"version\": \"4.0.3\"\n    },\n    \"packageManager\": {\n      \"name\": \"yarn\",\n      \"version\": \"3.1.1\"\n    },\n    \"monorepo\": \"Nx\",\n    \"features\": {\n      \"buildStoriesJson\": true\n    },\n    \"storybookVersion\": \"6.5.0\",\n    \"language\": \"typescript\",\n    \"storybookPackages\": {\n      \"@storybook/addons\": {\n        \"version\": \"6.5.0\"\n      },\n      \"@storybook/builder-webpack5\": {\n        \"version\": \"6.5.0\"\n      },\n      \"@storybook/react\": {\n        \"version\": \"6.5.0\"\n      }\n    },","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/telemetry.md","loc":{"lines":{"from":63,"to":109}}}}],["377",{"pageContent":"\"@storybook/addons\": {\n        \"version\": \"6.5.0\"\n      },\n      \"@storybook/builder-webpack5\": {\n        \"version\": \"6.5.0\"\n      },\n      \"@storybook/react\": {\n        \"version\": \"6.5.0\"\n      }\n    },\n    \"framework\": {\n      \"name\": \"react\"\n    },\n    \"addons\": {\n      \"@storybook/preset-create-react-app\": {\n        \"version\": \"3.2.0\"\n      },\n      \"@storybook/addon-ie11\": {\n        \"version\": \"0.0.7--canary.5e87b64.0\"\n      },\n      \"@storybook/addon-essentials\": {\n        \"options\": {\n          \"viewport\": false\n        },\n        \"version\": \"6.5.0\"\n      }\n    }\n  }\n}\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/telemetry.md","loc":{"lines":{"from":109,"to":138}}}}],["378",{"pageContent":"Will this data be shared?\n\nThe data we collect is anonymous, not traceable to the source, and only meaningful in aggregate form. No data we collect is personally identifiable.\nIn the future, we plan to share relevant data with the community through public dashboards (or similar data representation formats).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/telemetry.md","loc":{"lines":{"from":140,"to":143}}}}],["379",{"pageContent":"How to opt-out\n\nYou may opt-out of the telemetry by setting Storybook's configuration element `disableTelemetry` to `true`, using the `--disable-telemetry` flag, or setting the environment variable`STORYBOOK_DISABLE_TELEMETRY` to `1`. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-disable-telemetry.main-js.js.mdx',\n    'common/storybook-main-disable-telemetry.main-ts.ts.mdx',\n    'common/storybook-disable-telemetry-flag.yarn.js.mdx',\n    'common/storybook-disable-telemetry-flag.npm.js.mdx',\n    'common/storybook-disable-telemetry-flag.pnpm.js.mdx',\n    'common/storybook-disable-telemetry-env.env-var.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/telemetry.md","loc":{"lines":{"from":145,"to":162}}}}],["380",{"pageContent":"<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n  💡 There is a <code>boot</code> event that contains no metadata at all (simply used to ensure the telemetry is working). It is sent prior to evaluating your <code>main.js</code>, so it is unaffected by the <code>disableTelemetry</code> option. If you want to ensure that event is not sent, be sure to use the <code>STORYBOOK_DISABLE_TELEMETRY</code> environment variable.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/telemetry.md","loc":{"lines":{"from":162,"to":166}}}}],["381",{"pageContent":"Crash reports (disabled by default)\n\nIn addition to general usage telemetry, you may also choose to share crash reports. Storybook will then sanitize the error object (removing all user paths) and append it to the telemetry event. To enable crash reporting, you can set the `enableCrashReports` configuration element to `true`, using the `--enable-crash-reports` flag, or set the `STORYBOOK_ENABLE_CRASH_REPORTS` environment variable to `1`. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-telemetry-main-enable-crash-reports.main-js.js.mdx',\n    'common/storybook-telemetry-main-enable-crash-reports.main-ts.ts.mdx',\n    'common/storybook-telemetry-storybook-enable-crash-reports.yarn.js.mdx',\n    'common/storybook-telemetry-storybook-enable-crash-reports.npm.js.mdx',\n    'common/storybook-telemetry-storybook-enable-crash-reports.pnpm.js.mdx',\n    'common/storybook-telemetry-storybook-enable-crash-reports.env-var.js.mdx',\n  ]}\n/>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/telemetry.md","loc":{"lines":{"from":168,"to":183}}}}],["382",{"pageContent":"<!-- prettier-ignore-end -->\n\nGenerates the following item in the telemetry event:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-telemetry-crash-report-event.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/telemetry.md","loc":{"lines":{"from":185,"to":197}}}}],["383",{"pageContent":"---\ntitle: 'Theming'\n---\n\nStorybook is theme-able using a lightweight theming API.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/theming.md","loc":{"lines":{"from":1,"to":5}}}}],["384",{"pageContent":"Global theming\n\nIt's possible to theme Storybook globally.\n\nStorybook includes two themes that look good out of the box: \"light\" and \"dark\". Unless you've set your preferred color scheme as dark, Storybook will use the light theme as default.\n\nMake sure you have installed [`@storybook/manager-api`](https://www.npmjs.com/package/@storybook/manager-api) and [`@storybook/theming`](https://www.npmjs.com/package/@storybook/theming) packages.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-theming-packages-install.yarn.js.mdx',\n    'common/storybook-theming-packages-install.npm.js.mdx',\n    'common/storybook-theming-packages-install.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nAs an example, you can tell Storybook to use the \"dark\" theme by modifying [`.storybook/manager.js`](./overview.md#configure-story-rendering):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-manager-dark-theme.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/theming.md","loc":{"lines":{"from":7,"to":37}}}}],["385",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-manager-dark-theme.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nWhen setting a theme, set a complete theme object. The theme is replaced, not combined.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/theming.md","loc":{"lines":{"from":37,"to":47}}}}],["386",{"pageContent":"Theming docs\n\n[Storybook Docs](../writing-docs/introduction.md) uses the same theme system as Storybook’s UI but is themed independently from the main UI.\n\nSupposing you have a Storybook theme defined for the main UI in [`.storybook/manager.js`](./overview.md#configure-story-rendering):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-manager-dark-theme.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nHere's how you'd specify the same theme for docs in [`.storybook/preview.js`](./overview.md#configure-story-rendering):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-docs-dark-theme.js.mdx',\n    'common/storybook-preview-docs-dark-theme.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nContinue to read if you want to learn how to create your theme.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/theming.md","loc":{"lines":{"from":49,"to":78}}}}],["387",{"pageContent":"Create a theme quickstart\n\nThe easiest way to customize Storybook is to generate a new theme using the `create()` function from `storybook/theming`. This function includes shorthands for the most common theme variables. Here's how to use it:\n\nInside your `.storybook` directory, create a new file called `YourTheme.js` and add the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-theme-example-variables.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n💡 If you're using <code>brandImage</code> to add your custom logo, you can use any of the most common image formats.\n</div>\n\nAbove, we're creating a new theme that will:\n\n- Use Storybook's `light` theme as a baseline.\n- Replace Storybook's logo in the sidebar with our own (defined in the brandImage variable).\n- Add custom branding information.\n- Set the brand link to open in the same window (as opposed to a new one), via the `target` attribute.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/theming.md","loc":{"lines":{"from":80,"to":105}}}}],["388",{"pageContent":"Finally, we'll need to import the theme into Storybook. Create a new file called `manager.js` in your `.storybook` directory and add the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-manager-custom-theme.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nNow your custom theme will replace Storybook's default theme, and you'll see a similar set of changes in the UI.\n\n![Storybook starter theme](./storybook-starter-custom-theme.png)\n\nLet's take a look at a more complex example. Copy the code below and paste it in `.storybook/YourTheme.js`.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/your-theme.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nAbove, we're updating the theme with the following changes:\n\n- A custom color palette (defined in the `app` and `color` variables).\n- Custom fonts (defined in the `font` and `text` variables).\n\nWith the new changes introduced, the custom theme should yield a similar result.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/theming.md","loc":{"lines":{"from":107,"to":140}}}}],["389",{"pageContent":"With the new changes introduced, the custom theme should yield a similar result.\n\n![Storybook custom theme loaded](./storybook-custom-theme.png)\n\n<div class=\"aside\">\n💡 Many theme variables are optional, the <code>base</code> property is <strong>NOT</strong>.\n</div>\n\nThe `@storybook/theming` package is built using TypeScript, which should help create a valid theme for TypeScript users. The types are part of the package itself.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/theming.md","loc":{"lines":{"from":140,"to":148}}}}],["390",{"pageContent":"CSS escape hatches\n\nThe Storybook theme API is narrow by design. If you want to have fine-grained control over the CSS, all UI and Docs components are tagged with class names to make this possible. **Use at your own risk** as this is an advanced feature.\n\nTo style these elements, insert style tags into:\n\n- For Storybook’s UI, use `.storybook/manager-head.html`\n- For Storybook Docs, use `.storybook/preview-head.html`\n\n<div class=\"aside\">\n\n💡 <strong>Caution:</strong> The same way as you can adjust your [preview’s head tag](../configure/story-rendering.md#adding-to-head), Storybook allows you to modify the code on the manager's side, through <code>.storybook/manager-head.html</code>. It can be helpful when adding theme styles that target Storybook's HTML, but it comes with a cost as Storybook's inner HTML can change at any time through the release cycle.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/theming.md","loc":{"lines":{"from":150,"to":163}}}}],["391",{"pageContent":"MDX component overrides\n\nIf you're using MDX for docs, there's one more level of \"themability\". MDX allows you to completely override the rendered components from Markdown using a `components` parameter. It's an advanced usage that we don't officially support in Storybook, but it's a powerful construct if you need it.\n\nHere's how you might insert a custom code renderer for `code` blocks on the page, in [`.storybook/preview.js`](./overview.md#configure-story-rendering):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-custom-code-renderer.js.mdx',\n    'common/storybook-preview-custom-code-renderer.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nYou can even override a Storybook block component.\n\nHere's how you might insert a custom `<Canvas />` block:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-custom-canvas.js.mdx',\n    'common/storybook-preview-custom-canvas.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/theming.md","loc":{"lines":{"from":165,"to":195}}}}],["392",{"pageContent":"Addons and theme creation\n\nSome addons require specific theme variables that a Storybook user must add. If you share your theme with the community, make sure to support the official API and other popular addons, so your users have a consistent experience.\n\nFor example, the popular Actions addon uses [react-inspector](https://github.com/xyc/react-inspector/blob/master/src/styles/themes/chromeLight.js), which has themes of its own. Supply additional theme variables to style it like so:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-extended-theme-variables.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/theming.md","loc":{"lines":{"from":197,"to":211}}}}],["393",{"pageContent":"Using the theme for addon authors\n\nReuse the theme variables above for a native Storybook developer experience. The theming engine relies on [emotion](https://emotion.sh/), a CSS-in-JS library.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-theming-styled-import.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nUse the theme variables in object notation:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/component-styled-variables-object-notation.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nOr with template literals:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/component-styled-variables-template-literals.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/theming.md","loc":{"lines":{"from":213,"to":249}}}}],["394",{"pageContent":"---\ntitle: 'TypeScript'\n---\n\nStorybook provides an integrated [TypeScript](https://www.typescriptlang.org/) experience, including zero-configuration setup and built-in types for APIs, addons, and stories.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":1,"to":5}}}}],["395",{"pageContent":"Configure Storybook with TypeScript\n\nStorybook's configuration file (i.e., `main.ts`) is defined as an ESM module written in TypeScript, providing you with the baseline configuration to support your existing framework while enabling you stricter type-checking and autocompletion in your editor. Below is an abridged configuration file and additional information about the various configuration elements.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-default-setup.ts.mdx',\n  ]}\n/>\n\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":7,"to":20}}}}],["396",{"pageContent":"| Configuration element | Description                                                                                                                                                                                              |\n| --------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `stories`             | The array of globs that indicates the [location of your story files](#configure-story-loading), relative to `main.ts`                                                                                    |\n| `staticDirs`          | Sets a list of directories of [static files](./images-and-assets.md#serving-static-files-via-storybook-configuration) to be loaded by Storybook <br/> `staticDirs:['../public']`                         |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":22,"to":25}}}}],["397",{"pageContent":"| `addons`              | Sets the list of [addons](https://storybook.js.org/addons/) loaded by Storybook <br/> `addons: ['@storybook/addon-essentials']`                                                                          |\n| `typescript`          | Configures how Storybook handles [TypeScript files](#extending-the-default-configuration) <br/> `typescript: { check: false, checkOptions: {} }`                                                         |\n| `framework`           | Configures Storybook based on a set of [framework-specific](./frameworks.md) settings <br/> `framework: { name: '@storybook/svelte-vite', options:{} }`                                                  |\n| `core`                | Configures Storybook's internal features.<br/> `core: { disableTelemetry: true, }`                                                                                                                       |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":26,"to":29}}}}],["398",{"pageContent":"| `docs`                | Configures Storybook's [auto-generated documentation](../writing-docs/docs-page.md)<br/> `docs: { autodocs: 'tag' }`                                                                                     |\n| `features`            | Enables Storybook's additional features<br/> See table below for a list of available features `features: { storyStoreV7: true }`                                                                         |\n| `refs`                | Configures [Storybook composition](../sharing/storybook-composition.md) <br/> `refs:{ example: { title: 'ExampleStorybook', url:'https://your-url.com' } }`                                              |\n| `logLevel`            | Configures Storybook's logs in the browser terminal. Useful for debugging <br/> `logLevel: 'debug'`                                                                                                      |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":30,"to":33}}}}],["399",{"pageContent":"| `webpackFinal`        | Customize Storybook's [Webpack](../builders/webpack.md) setup <br/> `webpackFinal: async (config:any) => { return config; }`                                                                             |\n| `viteFinal`           | Customize Storybook's Vite setup when using the [vite builder](https://github.com/storybookjs/builder-vite) <br/> `viteFinal: async (config: Vite.InlineConfig, options: Options) => { return config; }` |\n| `env`                 | Defines custom Storybook [environment variables](./environment-variables.md#using-storybook-configuration). <br/> `env: (config) => ({...config, EXAMPLE_VAR: 'Example var' }),`                         |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":34,"to":36}}}}],["400",{"pageContent":"<div class=\"aside\">\n\n💡 See the Vite builder [TypeScript documentation](https://github.com/storybookjs/builder-vite#typescript) if using `@storybook/builder-vite`.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":38,"to":42}}}}],["401",{"pageContent":"Extending the default configuration\n\nOut of the box, Storybook is built to work with a wide range of third-party libraries, enabling you to safely access and document metadata (e.g., props, inputs) from your components without any additional configuration. It relies on [`babel-loader`](https://webpack.js.org/loaders/babel-loader/) for TypeScript support and optionally [`fork-ts-checker-webpack-plugin`](https://github.com/TypeStrong/fork-ts-checker-webpack-plugin/blob/v4.1.6/README.md#options) for type checking. Since Storybook supports multiple frameworks, it also includes a set of third-party packages to support each framework (e.g., `ts-loader` and `ngx-template-loader` for Angular, `react-docgen-typescript-plugin` for React). If you need to customize the default configuration for a specific use case scenario, you can extend the default configuration to suit your needs. Listed below are some examples and a table with the available options.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":44,"to":48}}}}],["402",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-add-ts-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":48,"to":56}}}}],["403",{"pageContent":"| Field                            | Framework | Description                                                                                 | Type                                                                                                              |\n| :------------------------------- | :-------- | :------------------------------------------------------------------------------------------ | :---------------------------------------------------------------------------------------------------------------- |\n| **check**                        | All       | Optionally run fork-ts-checker-webpack-plugin                                               | boolean                                                                                                           |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":58,"to":60}}}}],["404",{"pageContent":"| **checkOptions**                 | All       | Options to pass to fork-ts-checker-webpack-plugin if it's enabled                           | <a href=\"https://github.com/TypeStrong/fork-ts-checker-webpack-plugin/blob/v4.1.6/README.md#options\">See Docs</a> |\n| **reactDocgen**                  | React     | Which react docgen processor to run: `\"react-docgen-typescript\"`, `\"react-docgen\"`, `false` | string or false                                                                                                   |\n| **reactDocgenTypescriptOptions** | React     | Options to pass to react-docgen-typescript-plugin if react-docgen-typescript is enabled.    | [See docs](https://github.com/hipstersmoothie/react-docgen-typescript-plugin)                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":61,"to":63}}}}],["405",{"pageContent":"The above example extends the baseline configuration to remove existing props from third-party libraries. Useful if you want to document only your components. However, if you need to include them, you can do so by adjusting your configuration as follows:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-extend-ts-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":65,"to":75}}}}],["406",{"pageContent":"Write stories with TypeScript\n\nStorybook provides zero-config TypeScript support, allowing you to write stories using this language without additional configuration. You can use this format for improved type safety and code completion. For example, if you're testing a `Button` component, you could do the following in your story file:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/button-story-baseline.ts.mdx',\n    'web-components/button-story-baseline.ts.mdx',\n    'common/button-story-baseline.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThe example above uses the power of TypeScript in combination with the exported generic types (`Meta` and `StoryObj`) to tell Storybook how to infer the component's metadata and the type of the component's inputs (e.g., props). This can greatly improve the developer experience by letting your IDE show you what properties are injected by Storybook.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":77,"to":93}}}}],["407",{"pageContent":"TypeScript 4.9 support\n\nAssuming that you're working on a project that uses TypeScript 4.9+, you can update your component stories to use the new [`satisfies`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-9.html) operator to ensure stricter type checking for your component stories. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/button-story-baseline-with-satisfies.ts-4-9.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nNow, when you define a story or update an existing one, you'll automatically get notified that you're missing a required [`arg`](../writing-stories/args). However, you're not limited to using the `satisfies` operator at the component level. If you need, you can also use it at the story level. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/button-story-baseline-with-satisfies-story-level.ts-4-9.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":95,"to":119}}}}],["408",{"pageContent":"Troubleshooting\n\n### The `satisfies` operator is not working as expected\n\nOut of the box, Storybook supports the `satisfies` operator for almost every framework already using TypeScript version 4.9 or higher. However, due to the constraints of the Angular and Web Components framework, you might run into issues when applying this operator for additional type safety. This is primarily due to how both frameworks are currently implemented, making it almost impossible for Storybook to determine if the component property is required. If you encounter this issue, we recommend reaching out to the maintainers using the default communication channels (e.g., [Discord server](https://discord.com/channels/486522875931656193/570426522528382976), [GitHub discussion](https://github.com/storybookjs/storybook/discussions/20988)).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":121,"to":125}}}}],["409",{"pageContent":"The TypeScript auto-completion is not working on my editor\n\nIf you're using Vue single file components and TypeScript, you can add both [Volar](https://marketplace.visualstudio.com/items?itemName=Vue.volar) and the [TypeScript Vue Plugin](https://marketplace.visualstudio.com/items?itemName=Vue.vscode-typescript-vue-plugin) for editor support, additional type safety and auto-completion. Nevertheless, if you're working with Svelte, you can add the [Svelte for VSCode extension](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode) for similar benefits.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/typescript.md","loc":{"lines":{"from":127,"to":129}}}}],["410",{"pageContent":"---\ntitle: 'Upgrading Storybook'\n---\n\nThe frontend ecosystem is a fast-moving place. Regular dependency upgrades are a way of life, whether upgrading a framework, library, tooling, or all of the above! Storybook provides a few resources to help ease the pain of upgrading.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/upgrading.md","loc":{"lines":{"from":1,"to":5}}}}],["411",{"pageContent":"Upgrade script\n\nThe most common upgrade is Storybook itself. [Storybook releases](https://storybook.js.org/releases) follow [Semantic Versioning](https://semver.org/). We publish patch releases with bug fixes continuously, minor versions of Storybook with new features every few months, and major versions of Storybook with breaking changes roughly once per year.\n\nTo help ease the pain of keeping Storybook up-to-date, we provide a command-line script:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-upgrade.npm.js.mdx',\n    'common/storybook-upgrade.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThis upgrades all of the Storybook packages in your project to the latest stable version, perform confidence checks of your package versions, and checks for opportunities to run [automigrations](#automigrate) to update your configuration automatically.\n\n<div class=\"aside\">","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/upgrading.md","loc":{"lines":{"from":7,"to":26}}}}],["412",{"pageContent":"<div class=\"aside\">\n\nIn addition to running the command, we also recommend checking the [MIGRATION.md file](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md), for the detailed log of relevant changes and deprecations that might affect your upgrade.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/upgrading.md","loc":{"lines":{"from":26,"to":30}}}}],["413",{"pageContent":"Automigrate script\n\nStorybook upgrades are not the only thing to consider: changes in the ecosystem also present challenges. For example, lots of frameworks ([Angular 12](https://angular.io/guide/updating-to-version-12#breaking-changes-in-angular-version-12), [Create React App v5](https://github.com/facebook/create-react-app/pull/11201), [NextJS](https://nextjs.org/docs/upgrading#webpack-5)) have recently migrated from [Webpack 4 to Webpack 5](https://webpack.js.org/migrate/5/), so even if you don't upgrade your Storybook version, you might need to update your configuration accordingly. That's what Automigrate is for:\n\n```\nnpx storybook@latest automigrate","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/upgrading.md","loc":{"lines":{"from":32,"to":37}}}}],["414",{"pageContent":"It runs a set of standard configuration checks, explains what is potentially out-of-date, and offers to fix it for you automatically. It also points to the relevant documentation so you can learn more. It runs automatically as part of [`storybook upgrade`](#upgrade-script) command, but it's also available on its own if you don't want to upgrade Storybook.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/upgrading.md","loc":{"lines":{"from":40,"to":40}}}}],["415",{"pageContent":"Prereleases\n\nIn addition to the above, Storybook is under constant development, and we publish pre-release versions almost daily. Pre-releases are the best way to try out new features before they are generally available, and we do our best to keep them as stable as possible, although this is not always possible.\n\nTo upgrade to the latest pre-release:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-upgrade-prerelease.npm.js.mdx',\n    'common/storybook-upgrade-prerelease.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nIf you'd like to downgrade to a stable version, manually edit the package version numbers in your `package.json` and re-install.\n\n<div class=\"aside\">\n\nStorybook collects completely anonymous data to help us improve user experience. Participation is optional, and you may [opt-out](../configure/telemetry.md#how-to-opt-out) if you'd not like to share any information.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/upgrading.md","loc":{"lines":{"from":42,"to":65}}}}],["416",{"pageContent":"---\ntitle: 'User interface'\n---\n\nStorybook's UI is a highly customizable one and full of rich features to help you with your development process.\n\nRead more about the Storybook's features below:\n\n- [Features and behaviour](./features-and-behavior.md)\n- [Theming](./theming.md)\n- [Storybook addons](./storybook-addons.md)\n- [Sidebar & URLS](./sidebar-and-urls.md)\n- [Environment variables](./environment-variables.md)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/user-interface.md","loc":{"lines":{"from":1,"to":13}}}}],["417",{"pageContent":"---\ntitle: 'Webpack'\n---\n\nStorybook displays your components in a custom web application built using [Webpack](https://webpack.js.org/). Webpack is a complex tool, but our default configuration is intended to cover most use cases. [Addons](https://storybook.js.org/addons/) are also available that extend the configuration for other everyday use cases.\n\nYou can customize Storybook's webpack setup by providing a `webpackFinal` field in [`.storybook/main.js`](./overview.md#configure-your-storybook-project) file.\n\nThe value should be an async function that receives a webpack config and eventually returns a webpack config.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/webpack.md","loc":{"lines":{"from":1,"to":9}}}}],["418",{"pageContent":"Default configuration\n\nBy default, Storybook's webpack configuration will allow you to:\n\n#### Import images and other static files\n\nYou can import images and other local files and have them built into the Storybook:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/my-component-story-import-static-asset.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n#### Import JSON as JavaScript\n\nYou can import `.json` files and have them expanded to a JavaScript object:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/my-component-story-import-json.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nIf you want to know the exact details of the webpack config, the best way is to run either of the following:\n\n```shell","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/webpack.md","loc":{"lines":{"from":11,"to":45}}}}],["419",{"pageContent":"Development mode\nyarn storybook dev --debug-webpack","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/webpack.md","loc":{"lines":{"from":47,"to":48}}}}],["420",{"pageContent":"Production mode\nyarn storybook build --debug-webpack\n```\n\n### Bundle splitting\n\nStarting with Storybook 6.4, [bundle splitting](https://v4.webpack.js.org/guides/code-splitting/) is supported through a configuration flag. Update your Storybook configuration and add the `storyStoreV7` flag:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-on-demand-story-loading.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nWhen you start your Storybook, you'll see an improvement in loading times. Read more about it in the [announcement post](https://storybook.js.org/blog/storybook-on-demand-architecture/) and the [configuration documentation](./overview.md#on-demand-story-loading).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/webpack.md","loc":{"lines":{"from":50,"to":68}}}}],["421",{"pageContent":"Webpack 5\n\nStorybook builds your project with Webpack 4 by default. If your project uses Webpack 5, you can opt into the Webpack 5 builder by installing the required dependencies (i.e., `@storybook/builder-webpack5`, `@storybook/manager-webpack5`) and update your Storybook configuration as follows:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-webpack5.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nOnce you are using Webpack 5, you can further opt into some features to optimize your build:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/webpack.md","loc":{"lines":{"from":70,"to":84}}}}],["422",{"pageContent":"Lazy Compilation\n\nStorybook supports Webpack's experimental [lazy compilation](https://webpack.js.org/configuration/experiments/#experimentslazycompilation) feature, via the `lazyCompilation` builder flag:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-webpack5-lazyCompilation.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThis feature applies in development mode, and will mean your Storybook will start up faster, at the cost of slightly slower browsing time when you change stories.\n\n#### Filesystem Caching\n\nStorybook supports Webpack's [filesystem caching](https://webpack.js.org/configuration/cache/#cachetype) feature, via the `fsCache` builder flag:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-webpack5-fsCache.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThis feature will mean build output is cached between runs of Storybook, speeding up subsequent startup times.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/webpack.md","loc":{"lines":{"from":86,"to":116}}}}],["423",{"pageContent":"Extending Storybook’s webpack config\n\nTo extend the above configuration, use the `webpackFinal` field of [`.storybook/main.js`](./overview.md#configure-story-rendering).\n\nThe value should export a `function`, which will receive the default config as its first argument. The second argument is an options object from Storybook, and this will have information about where config came from, whether we're in production or development mode, etc.\n\nFor example, if you wanted to add [Sass](https://sass-lang.com/) support, you can adjust your configuration as such:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-add-sass-config.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/webpack.md","loc":{"lines":{"from":118,"to":134}}}}],["424",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-add-sass-config.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nStorybook uses the config returned from the above function to render your components in Storybook's \"preview\" iframe. Note that Storybook has an entirely separate webpack config for its UI (also referred to as the \"manager\"), so the customizations you make only apply to the rendering of your stories, i.e., you can completely replace `config.module.rules` if you want.\n\nNevertheless, edit `config` with care. Make sure to preserve the following config options:\n\n- **entry**\n- **output**\n\nFurthermore, `config` requires the `HtmlWebpackplugin` to generate the preview page, so rather than overwriting `config.plugins` you should probably append to it (or overwrite it with care), see [the following issue](https://github.com/storybookjs/storybook/issues/6020) for examples on how to handle this:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/webpack.md","loc":{"lines":{"from":134,"to":153}}}}],["425",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-simplified-config.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nFinally, if your custom webpack config uses a loader that does not explicitly include specific file extensions via the `test` property, in that case, it is necessary to `exclude` the `.ejs` file extension from that loader.\n\nIf you're using a non-standard Storybook config directory, you should put `main.js` there instead of `.storybook` and update the `include` path to ensure it resolves to your project root.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/webpack.md","loc":{"lines":{"from":153,"to":165}}}}],["426",{"pageContent":"Using your existing config\n\nSuppose you have an existing webpack config for your project and want to reuse this app's configuration. In that case, you can import your main webpack config into Storybook's [`.storybook/main.js`](./overview.md#configure-story-rendering) and merge both:\n\nThe following code snippet shows how you can replace the loaders from Storybook with the ones from your app's `webpack.config.js`:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-using-existing-config.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\"> \n💡 Projects initialized via generators (e.g, Vue CLI) may require that you import their own webpack config file (i.e., <code>/projectRoot/node_modules/@vue/cli-service/webpack.config.js</code>) to use a certain feature with Storybook. For other generators, make sure to check the documentation for instructions. \n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/webpack.md","loc":{"lines":{"from":167,"to":185}}}}],["427",{"pageContent":"TypeScript Module Resolution\n\nWhen working with TypeScript projects, the default Webpack configuration may fail to resolve module aliases defined in your [`tsconfig` file](https://www.typescriptlang.org/tsconfig). To work around this issue you may use [`tsconfig-paths-webpack-plugin`](https://github.com/dividab/tsconfig-paths-webpack-plugin#tsconfig-paths-webpack-plugin) while [extending Storybook's Webpack config](#extending-storybooks-webpack-config) like:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-ts-module-resolution.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n💡 Learn more about Storybook's <a href=\"./typescript\">built-in TypeScript support</a> or see <a href=\"https://github.com/storybookjs/storybook/issues/14087\">this issue</a> for more information.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/configure/webpack.md","loc":{"lines":{"from":187,"to":203}}}}],["428",{"pageContent":"---\ntitle: 'Code contributions'\n---\n\nContribute a new feature or bug fix to [Storybook's monorepo](https://github.com/storybookjs/storybook). This page outlines how to get your environment set up to contribute code.\n\n## Prerequisites\n\n- Ensure you have node version 16 installed (suggestion: v16.17.1).\n- Ensure if you are using Windows to use the Windows Subsystem for Linux (WSL).\n\n## Initial setup\n\nStart by [forking](https://docs.github.com/en/github/getting-started-with-github/quickstart/fork-a-repo) the Storybook monorepo and cloning it locally.\n\n```shell\ngit clone https://github.com/your-username/storybook.git\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":1,"to":18}}}}],["429",{"pageContent":"Run your first sandbox\n\nStorybook development happens in a set of _sandboxes_ which are templated Storybook environments corresponding to different user setups. Within each sandbox, we inject a set of generalized stories that allow us to test core features and addons in all such environments.\n\nTo run a sandbox locally, you can use the `start` command:\n\n```shell\nyarn start\n```\n\nIt will install the required prerequisites, build the code, create and link a starter example based on a Vite React setup and finally start the Storybook server.\n\nIf all goes well, you should see the sandbox running.\n\n![Storybook sandbox running](../get-started/example-welcome.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":20,"to":34}}}}],["430",{"pageContent":"Running a different sandbox template\n\nBy default, the `start` command is configured to initialize a Vite-based React template. If you're planning on working on a different renderer instead, you can do so as well. Start by running the `task` command as follows:\n\n```shell\nyarn task\n```\n\nWhen prompted, answer the questions as accurately as possible to allow Storybook to determine your goals. After answering these questions, you should see the entire command with the options you've selected should you require to re-run it.\n\n<div class=\"aside\">\n\n💡 The `yarn task` command takes a few development shortcuts that can catch you off guard when switching branches and may require you to re-run both the `install` and `compile` tasks. You can speed up the process by running the command with the `start-from=install` flag.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":36,"to":50}}}}],["431",{"pageContent":"Running tests\n\nAfter successfully running your [first sandbox](#run-your-first-sandbox), you should have a fully functional Storybook version built on your local machine. Before jumping onto any code changes, verifying everything is working is essential—specifically, the test suite.\n\nRun the following command to execute the tests:\n\n```shell\nyarn test\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":52,"to":60}}}}],["432",{"pageContent":"Start developing\n\nNow that you've [verified your setup](#running-tests), it's time to jump into code. The simplest way is to run one of the sandboxes in one terminal window and the interactive build process in a separate terminal.\n\nAssuming you're still running the Vite-based React sandbox initialized after running the `yarn start` command, open a new terminal window and navigate to the `code` directory of the Storybook monorepo. Then, create a new branch for your contribution by running the following command:\n\n```shell\ngit checkout -b my-first-storybook-contribution\n```\n\nLastly, run the build process with the following:\n\n```shell\nyarn build","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":62,"to":75}}}}],["433",{"pageContent":"When prompted to start the build process in `watch` mode, answer **yes** to develop in interactive mode. Afterward, choose which packages you want to build. For example, if you're going to work on a feature for `@storybook/addon-docs`, you might want to select both `@storybook/addon-docs` and `@storybook/components`.\n\n<div class=\"aside\">\n\n💡 Build's `watch` mode is great for interactive development. However, for performance reasons, it only transpiles your code and doesn't execute the TypeScript compiler. If something isn't working as expected, try running the `build` command <b>WITHOUT</b> enabling watch mode: it will re-generate TypeScript types and perform automatic type checking for you.\n\n</div>\n\n![Storybook package selector](./storybook-build-packages-selection-optimized.png)\n\nIf the work you'll be doing affects the `Preview` (the innermost Storybook `iframe`, where the stories are displayed), it will automatically refresh one to two seconds after you save.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":78,"to":88}}}}],["434",{"pageContent":"If the work you'll be doing affects the `Preview` (the innermost Storybook `iframe`, where the stories are displayed), it will automatically refresh one to two seconds after you save.\n\nOtherwise, if it affects the `Manager` (the outermost Storybook `iframe` where the addons are displayed), you'll need to refresh manually after saving.\n\n![Storybook manager preview](../addons/manager-preview.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":88,"to":92}}}}],["435",{"pageContent":"Check your work\n\nWhen you're done coding, add documentation and tests as appropriate. That simplifies the PR review process, which means your code will get merged faster.\n\n### Add stories\n\nAdding a story or set of generic stories to our suite helps you test your work.\n\nAssuming you're working on one of the [Essential addons](../essentials/introduction.md), there's a chance that a complete set of stories already exists. Check the addon's `template/stories` directory that documents how it's supposed to work and add your stories there.\n\nIf you're modifying something related to a specific renderer (e.g., React, Vue, etc.), it will also have a similar `template/stories` directory in which you'll need to add your stories.\n\n### Add tests\n\nUnit tests ensure that Storybook doesn't break accidentally. If your code can regress in non-obvious ways, include unit tests with your pull request. Use the following naming convention:\n\n```\n+-- parentFolder\n|   +-- [filename].ts\n|   +-- [filename].test.ts\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":94,"to":114}}}}],["436",{"pageContent":"End-to-end tests (e2e)\n\nStorybook's monorepo is set up to rely on end-to-end testing with [Playwright](https://playwright.dev) during CI. To help with testing, we encourage running this test suite before submitting your contribution.\n\nTo run an e2e test against a sandbox, you can use the `e2e-tests` task:\n\n```shell\nyarn task --task e2e-tests --template=react-vite/default-ts --start-from=auto\n```\n\nIf there are issues and you'd like to debug them, you can pass a `DEBUG=1` environment variable, and Playwright will run in watch mode.\n\n```shell\nDEBUG=1 yarn task --task e2e-tests --template=react-vite/default-ts --start-from=auto\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":116,"to":130}}}}],["437",{"pageContent":"Submit a pull request\n\nBefore submitting your contribution, run the test suite one last time with the following:\n\n```shell\nyarn test\n```\n\n<div class=\"aside\">\n\n💡 Storybook relies on [Jest](https://jestjs.io/) as part of it's testing suite. During the test run, if you spot that snapshot tests are failing, re-run the command with the `-u` flag to update them.\n\n</div>\n\nDoing this prevents last-minute bugs and is a great way to merge your contribution faster once you submit your pull request. Failing to do so will lead to one of the maintainers mark the pull request with the **Work in Progress** label until all tests pass.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":132,"to":146}}}}],["438",{"pageContent":"Target `next` branch\n\nOnce the test suite finishes, it's time to commit, push and open a pull request against Storybook's `next` (default) branch. This branch is where all active development happens and is associated with the latest prerelease version (e.g., `7.0.0-alpha.47`).\n\nIf your contribution focuses on a bugfix and you want it featured in the next stable release, mention it in the pull request description. We'll try to patch it if it appears non-disruptive and fixes a critical bug.\n\n#### Useful resources when working with forks\n\n- [Sync a fork](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/working-with-forks/syncing-a-fork)\n- [Merge an upstream repository into your fork](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/working-with-forks/merging-an-upstream-repository-into-your-fork)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":148,"to":157}}}}],["439",{"pageContent":"Reproducing job failures\n\nAfter creating your PR, if one of the CI jobs failed, when checking the logs of that job, you will see that it printed a message explaining how to reproduce the task locally. Typically that involves running the task against the right template:\n\n```shell\nyarn task --task e2e-tests --template=react-vite/default-ts --start-from=install","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":159,"to":164}}}}],["440",{"pageContent":"Typically it is a good idea to start from the `install` task to ensure your local code is completely up to date. If you reproduce the failure, you can try and make fixes, [compile them](#start-developing) with `build`, then rerun the task with `--start-from=auto`.\n\n<div class=\"aside\">\n\n💡 The default instructions run the code in \"linked\" mode, meaning built changes to Storybook library code will be reflected in the sandbox immediately (the next time you run the task). However, CI runs in \"unlinked\" mode, which in rare cases, will behave differently.<br />\n\nIf you are having trouble reproducing, try rerunning the command with the `--no-link` flag. If you need to do that, you'll need to run it with `--start-from=compile` after each code change.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":167,"to":175}}}}],["441",{"pageContent":"How to work with reproductions\n\nWe encourage bug reports to include reproductions. In the same way that it's possible to [develop interactively](#start-developing) against example projects in the monorepo, it's also possible to develop against a reproduction repository.\n\nTo do so, run the following command in the root of the monorepo:\n\n```shell\nnpx storybook@next link https://github.com/your-username/your-project.git\n```\n\nThis command creates a project `../storybook-repros/your-project`, and automatically links it to your local Storybook code. After connecting it, you should be able to run Storybook and develop as mentioned [above](#start-developing).\n\nIf you already have a reproduction on your local machine, you can similarly link it to your monorepo dev setup with the `--local` flag:\n\n```shell\nnpx storybook@next link --local /path/to/local-repro-directory","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":177,"to":192}}}}],["442",{"pageContent":"<div class=\"aside\">\n\n💡 The `storybook link` command relies on [Yarn 2 linking](https://yarnpkg.com/cli/link/) under the hood. It requires your local reproduction to be using [Yarn 2](https://yarnpkg.com/) as well, which is the case if you're already enabled it with the [`storybook sandbox`](./how-to-reproduce.md) command per our contribution guidelines. The process will fail if you're trying to link a non-Yarn 2 project.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":195,"to":199}}}}],["443",{"pageContent":"Developing a template\n\nThe first step is to add an entry to `code/lib/cli/src/sandbox-templates.ts`, which is the master list of all repro templates:\n\n```ts\n'cra/default-js': {\n    name: 'Create React App (Javascript)',\n    script: 'npx create-react-app .',\n    inDevelopment: true,\n    expected: {\n      framework: '@storybook/cra',\n      renderer: '@storybook/react',\n      builder: '@storybook/builder-webpack5',\n    },\n  },","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":201,"to":215}}}}],["444",{"pageContent":"Add the `inDevelopment` flag until the PR is merged (you can fast-follow it with a second PR to remove the flag), as it'll make the development process much easier.\n\nThe **`key`** `cra/default-js` consists of two parts:\n\n- The prefix is the tool that was used to generate the repro app\n- The suffix is options that modify the default install, e.g. a specific version or options\n\nThe **`script`** field is what generates the application environment. The `.` argument is “the current working directory” which is auto-generated based on the key (e.g. `repros/cra/default-js/before-storybook`). The `{{beforeDir}}` key can also be used, which will be replaced by the path of that directory.\n\nThe rest of the fields are self-explanatory:\n\nThe **`skipTasks`** field exists because some sandboxes might not work properly in specific tasks temporarily, but we might still want to run the other tasks. For instance, a bug was introduced outside of our control, which fails only in the `test-runner` task.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":218,"to":229}}}}],["445",{"pageContent":"The **`name`** field should contain a human readable name/description of the template.\n\nThe **`expected`** field reflects what framework/renderer/builder we expect `sb init` to generate. This is useful for assertions while generating sandboxes. If the template is generated with a different expected framework, for instance, it will fail, serving as a way to detect regressions.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":231,"to":233}}}}],["446",{"pageContent":"Running a sandbox\n\nIf your template has a `inDevelopment` flag, it will be generated (locally) as part of the sandbox process. You can create the sandbox with the following command, where `<template-key>` is replaced by the id of the selected template e.g. `cra/default-js`:\n\n```bash\nyarn task --task dev --template <template-key> --start-from=install\n```\n\nTemplates with `inDevelopment` will automatically run with `--no-link` flag as it is required for the local template generation to work.\n\nOnce the PR is merged, the template will be generated on a nightly cadence and you can remove the `inDevelopment` flag and the sandbox will pull the code from our templates repository.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":235,"to":245}}}}],["447",{"pageContent":"Troubleshooting\n\n<details>\n\n<summary><code>yarn build --all --watch</code> watches everything but is resource-intensive</summary>\n\nIt's troublesome to know which packages you'll change ahead of time, and watching them can be highly demanding, even on modern machines. If you're working on a powerful enough machine, you can use `yarn build --all --watch` instead of `yarn build`.\n\n</details>\n\n## Other ways to contribute\n\nLearn about other ways you can contribute to Storybook.\n\n- [**Overview**](./how-to-contribute.md): General guidance\n- [**Docs**](./documentation-updates.md): Typos, clarifications\n- [**Addons**](./../addons/introduction.md): Build an addon and share it with the community\n- [**Frameworks**](./framework.md): Integrate Storybook with your favorite library","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/code.md","loc":{"lines":{"from":247,"to":264}}}}],["448",{"pageContent":"---\ntitle: 'Documentation updates'\n---\n\nFix a typo or clarify a section of the docs. This page outlines how to edit the documentation.\n\n## Find the Markdown file\n\nScroll to the bottom of the document in question, then click ✍️ Edit on GitHub – PRs welcome! This will open the Markdown file on GitHub.\n\n![Storybook documentation edit](./storybook-edit-docs-optimized.png)\n\nUse GitHub's web editor by clicking the pencil icon on the right-hand corner. Tweak the document to your liking.\n\n![GitHub edit documentation](./github-docs-edit-optimized.png)\n\nScroll down to the bottom of the document page on GitHub and describe what you changed and why. Select the `Create a new branch for this commit and start a pull request` option then click the `Propose changes` button.\n\n![Fill the commit information](./storybook-docs-submit-changes-optimized.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/documentation-updates.md","loc":{"lines":{"from":1,"to":19}}}}],["449",{"pageContent":"Create the pull request\n\nIn the Storybook repository, create a pull request that describes changes and includes additional context that would help maintainers review. Once you submit the PR, a maintainer will guide you through the triage and merge process.\n\n## Other ways to contribute\n\nLearn about other ways you can contribute to Storybook.\n\n- [**Overview**](./how-to-contribute.md): General guidance\n- [**Code**](./code.md): Features, bug fixes, dependency updates\n- [**Addons**](./../addons/introduction.md): Build an addon and share it with the community\n- [**Frameworks**](./framework.md): Integrate Storybook with your favorite library","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/documentation-updates.md","loc":{"lines":{"from":21,"to":32}}}}],["450",{"pageContent":"---\ntitle: 'Contributing a Storybook framework'\n---\n\nA Storybook framework is a node package that enables out-of-the-box support for either a metaframework (Next.js, NuxtJS, SvelteKit) or a combination of [builder](../builders/overview) (Webpack, Vite) plus renderer (React, Angular, Vue, web components, etc).\n\nFor metaframeworks, the Storybook framework also takes care of additional configuration necessary to make Storybook behave similarly to apps generated by the metaframework. For example, `@storybook/nextjs` [recreates or mocks a number of features of Next.js apps](https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/README.md#supported-features) inside Storybook.\n\nFor your reference, you can view [all of the official Storybook frameworks](https://github.com/storybookjs/storybook/tree/next/code/frameworks), including their full source code and documentation.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/framework.md","loc":{"lines":{"from":1,"to":9}}}}],["451",{"pageContent":"How to make a framework\n\n### 1. Decide on a package name\n\nThe name should start with `storybook-framework-` and then correspond to what your framework supports. For example, a framework targeting SvelteKit would be `storybook-framework-svelte-kit` and a framework targeting Stencil with Vite would be `storybook-framework-stencil-vite`. When not targeting a metaframework, the naming convention is `storybook-framework-<renderer>-<builder>`.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/framework.md","loc":{"lines":{"from":11,"to":15}}}}],["452",{"pageContent":"2. Consider what your framework will need to do\n\nThe goal is to make Storybook behave—out-of-the-box—as similarly as possible to the metaframework or builder-renderer combination you’re targeting.\n\nFor metaframeworks, this means attempting to recreate any builder or babel configuration provided by the metaframework. You should try to do so in a way that respects the user's existing project configuration as much as possible.\n\nThe library or libraries your framework supports may have different major versions available. Consider which versions of each library your framework will support. You will need to account for the changes within those different versions or split your framework into different versions/packages itself to support each library version. To speed up maintenance, please consider adding integration tests for the various library versions your framework supports.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/framework.md","loc":{"lines":{"from":17,"to":23}}}}],["453",{"pageContent":"3. Write the documentation\n\nBefore writing any code, write a helpful README that contains installation instructions and a list of available features. Use the [README for `@storybook/nextjs`](https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/README.md) as a template. Writing the documentation first helps guide your other work.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/framework.md","loc":{"lines":{"from":25,"to":27}}}}],["454",{"pageContent":"4. Author the framework itself\n\nA framework can contain the following parts:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/framework.md","loc":{"lines":{"from":29,"to":31}}}}],["455",{"pageContent":"`package.json` ([example](https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/package.json))\n\nBecause a framework is a node package, it must contain a `package.json` file. Here’s a template you can use to start:\n\n<details>\n<summary><code>package.json</code> template</summary>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/framework.md","loc":{"lines":{"from":33,"to":38}}}}],["456",{"pageContent":"```json\n{\n  \"name\": \"<your-framework-name>\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Storybook for <meta-framework-name> or <renderer> & <builder>\",\n  \"keywords\": [\n    \"Storybook\",\n    \"<meta-framework-name>\",\n    \"<renderer>\",\n    \"<builder>\",\n    \"<anything>\",\n    \"<else>\",\n    \"<relevant>\"\n  ],\n  \"homepage\": \"<your package's homepage>\",\n  \"bugs\": {\n    \"url\": \"https://github.com/<your-org>/<your-repo>/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/<your-org>/<your-repo>.git\",\n    \"directory\": \"<path/to/your/framework>\"\n  },\n  \"license\": \"MIT\",\n  \"exports\": {\n    \".\": {\n      \"require\": \"./dist/index.js\",\n      \"import\": \"./dist/index.mjs\",\n      \"types\": \"./dist/index.d.ts\"\n    },\n    \"./preset\": {\n      \"require\": \"./dist/preset.js\",\n      \"import\": \"./dist/preset.mjs\",\n      \"types\": \"./dist/preset.d.ts\"\n    },\n    \"./preview.js\": {\n      \"require\": \"./dist/preview.js\",\n      \"import\": \"./dist/preview.mjs\",\n      \"types\": \"./dist/preview.d.ts\"\n    },","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/framework.md","loc":{"lines":{"from":40,"to":79}}}}],["457",{"pageContent":"\"types\": \"./dist/preset.d.ts\"\n    },\n    \"./preview.js\": {\n      \"require\": \"./dist/preview.js\",\n      \"import\": \"./dist/preview.mjs\",\n      \"types\": \"./dist/preview.d.ts\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"main\": \"dist/index.js\",\n  \"module\": \"dist/index.mjs\",\n  \"types\": \"dist/index.d.ts\",\n  \"files\": [\"dist/**/*\", \"types/**/*\", \"README.md\", \"*.js\", \"*.d.ts\"],\n  \"scripts\": {\n    \"check\": \"tsc --noEmit\",\n    \"test\": \"...\"\n  },\n  \"dependencies\": {\n    \"@storybook/addons\": \"^7.0.0\",\n    \"@storybook/core-common\": \"^7.0.0\",\n    \"@storybook/node-logger\": \"^7.0.0\",\n    \"@storybook/<builder>\": \"^7.0.0\",\n    \"@storybook/<renderer>\": \"^7.0.0\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"x.x.x\",\n    \"<meta-framework>\": \"^x.x.x\",\n    \"<builder>\": \"^x.x.x\"\n  },\n  \"peerDependencies\": {\n    \"@babel/core\": \"^x.x.x\",\n    \"@storybook/addon-actions\": \"^7.0.0\",\n    \"<meta-framework>\": \"^x.x.x || ^x.x.x\",\n    \"<renderer>\": \"^x.x.x || ^x.x.x\",\n    \"<builder>\": \"^x.x.x\"\n  },\n  \"engines\": {\n    \"node\": \">=16\"\n  },","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/framework.md","loc":{"lines":{"from":79,"to":117}}}}],["458",{"pageContent":"\"@storybook/addon-actions\": \"^7.0.0\",\n    \"<meta-framework>\": \"^x.x.x || ^x.x.x\",\n    \"<renderer>\": \"^x.x.x || ^x.x.x\",\n    \"<builder>\": \"^x.x.x\"\n  },\n  \"engines\": {\n    \"node\": \">=16\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/framework.md","loc":{"lines":{"from":117,"to":128}}}}],["459",{"pageContent":"A few notes on some of those properties:\n\n- `exports`: The root, `./preset`, and `package.json` exports are required. If your framework has a `preview.js`, then that is required as well.\n- `types`: We strongly encourage you to author your framework in TypeScript and distribute the types.\n- `dependencies` and `devDependencies`: These are just examples. Yours may look quite different.\n- `peerDependencies`: If your framework provides support for multiple versions of the libraries you’re targeting, be sure that is represented here.\n\n</details>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/framework.md","loc":{"lines":{"from":131,"to":138}}}}],["460",{"pageContent":"`preset.js` ([example](https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/src/preset.ts))\n\nThe [preset API](../addons/writing-presets) is where you will configure the Storybook core (which builder and renderer are used by your framework), the builder (via either the [`webpackFinal`](../builders/webpack#extending-storybooks-webpack-config) or [`viteFinal`](../builders/vite#configuration) export), babel (via the `babel` export), any necessary addons, and any available options for your framework.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/framework.md","loc":{"lines":{"from":140,"to":142}}}}],["461",{"pageContent":"`preview.js` ([example](https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/src/preview.tsx))\n\nThe (optional) [preview API](../configure/overview#configure-story-rendering) is where you configure the rendering of stories, such as global decorators or initializing some runtime config needed for your framework to behave as expected. If your framework requires this file, note that you also need to [configure the `previewAnnotations` in `preset.js`](https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/src/preset.ts#L66-L69).\n\n#### `types.ts` ([example](https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/src/types.ts))\n\nIf you author your framework in TypeScript (recommended), you should export the type for `StorybookConfig` which reflects the available options of your framework.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/framework.md","loc":{"lines":{"from":144,"to":150}}}}],["462",{"pageContent":"5. Test your framework\n\nTest it in a fresh project using a Storybook set up as close as possible to your framework. For example, for `@storybook/nextjs`, which uses React and Webpack5, start with a project that uses `@storybook/react` and `@storybook/builder-webpack5`. Follow the installation instructions from your README and ensure everything works as expected. Remember to test the various versions, configs, and options for the libraries you’re supporting.\n\n### 6. Let us know!\n\nOnce it's fully tested and released, please let us know about your framework by either announcing it in the `#showcase` channel of the [Storybook Discord](https://discord.gg/storybook) or tweeting it and mentioning `@storybookjs`. It's our hope that well-made community frameworks can eventually move into the Storybook codebase and be considered \"officially\" supported.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/framework.md","loc":{"lines":{"from":152,"to":158}}}}],["463",{"pageContent":"Other ways to contribute\n\nLearn about other ways you can contribute to Storybook.\n\n- [**Contribution overview**](./how-to-contribute.md): General guidance\n- [**Code**](./code.md): Features, bug fixes, dependency updates\n- [**Docs**](./documentation-updates.md): Typos, clarifications\n- [**Addons**](./../addons/introduction.md): Build an addon and share it with the community","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/framework.md","loc":{"lines":{"from":160,"to":167}}}}],["464",{"pageContent":"---\ntitle: 'How to contribute'\n---\n\nStorybook is a community-oriented open source project that welcomes contributions. Some of our most popular features started with a developer wanting to solve a problem for themselves.\n\n## Contributor covenant\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.[Continue reading our contributor covenant »](https://github.com/storybookjs/storybook/blob/next/CODE_OF_CONDUCT.md)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/how-to-contribute.md","loc":{"lines":{"from":1,"to":9}}}}],["465",{"pageContent":"Ways to contribute\n\n- [**Code**](./code.md): Features, bug fixes, dependency updates\n- [**Docs**](./documentation-updates.md): Typos, clarifications\n- [**Addons**](./../addons/introduction.md): Build an addon and share it with the community\n- [**Frameworks**](./framework.md): Integrate Storybook with your favorite library\n\n## Not sure how to get started?\n\n- [Chat in Discord #contributing](https://discord.gg/storybook)\n- [Browse \"good first issues\" to fix](https://github.com/storybookjs/storybook/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\n- [Submit a bug report or feature request](https://github.com/storybookjs/storybook/issues)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/how-to-contribute.md","loc":{"lines":{"from":11,"to":22}}}}],["466",{"pageContent":"---\ntitle: 'Create a reproduction'\n---\n\nA reproducible test case lets you isolate the cause of a problem, which is the first step towards fixing it! This page outlines how to get set up to create a reproduction.\n\n## Why should you create a reproduction?\n\nA reproducible test case is a great way to share a specific set of conditions that causes a bug. It allows both the maintainers and the community to verify, narrow down the cause of the problem and help you fix the issue.\n\n## Pre-requisites\n\nMake sure you have:\n\n- Installed [`Yarn`](https://yarnpkg.com/) on your local development machine.\n- A [GitHub account](https://github.com/signup) for hosting the reproduction's code.\n- A [Chromatic account](https://www.chromatic.com/start/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook) for publishing your Storybook.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/how-to-reproduce.md","loc":{"lines":{"from":1,"to":17}}}}],["467",{"pageContent":"Initial setup\n\nFirst, open a terminal and run the following command:\n\n```shell\nnpx storybook@next sandbox\n```\n\n<div class=\"aside\">\n💡 You can append a template name in the command to get filtered results e.g. <code>npx storybook@next sandbox react</code>\n</div>\n\nNext, choose the template you want to work with:\n\n![Storybook reproduction generator template](./storybook-reproduction-generator-template.png)\n\nFinally, enter a location for your reproduction:\n\n![Storybook reproduction location](./storybook-reproduction-generator-location.png)\n\n<div class=\"aside\">\n💡 If you don't provide a full path for the reproduction it will be generated in the current directory.\n</div>\n\nIf everything worked as it should, you should have a fully functional Storybook set up in your local environment.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/how-to-reproduce.md","loc":{"lines":{"from":19,"to":43}}}}],["468",{"pageContent":"Third-party dependencies & addons\n\nBefore adding code, install and configure any necessary packages. For example, if you run into a problem with a CSS framework (e.g., [Tailwind](https://tailwindcss.com/)), you should install and configure it.\n\nInstall and configure any Storybook [addons](https://storybook.js.org/addons/) that relate to the issue (e.g.,`@storybook/addon-a11y`).\n\n## Add stories\n\nAny Storybook reproduction wouldn't be complete without [stories](../writing-stories/introduction.md). To help fix your issue faster, we encourage you to include the minimum amount of stories that will replicate your issue.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/how-to-reproduce.md","loc":{"lines":{"from":45,"to":53}}}}],["469",{"pageContent":"Host\n\nWhen you've finished your work, you'll need to host your reproduction. Start by signing into GitHub.com and create a [new repository](https://github.com/new).\n\n![github repository for reproductions](./github-new-repository-reproduction-optimized.png)\n\nThen, follow GitHub's instructions to set up the repository.\n\n![github repository instructions](./github-repository-steps-optimized.png)\n\n<div class=\"aside\">\n 💡 Don't forget to replace <code>your-username</code> with your own account name.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/how-to-reproduce.md","loc":{"lines":{"from":55,"to":67}}}}],["470",{"pageContent":"Publish\n\nAn excellent way to check your reproduction is to have it deployed online. We recommend [Chromatic](https://www.chromatic.com/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook), a free publishing service created by the Storybook maintainers. It allows you to deploy and host your reproduction safely and securely in the cloud.\n\n### Helpful resources when working with Chromatic\n\n- [Publish Storybook](../sharing/publish-storybook.md)\n- [Setup Chromatic](https://www.chromatic.com/docs/setup?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook)\n- [Automate Chromatic with continuous integration](https://www.chromatic.com/docs/ci?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/how-to-reproduce.md","loc":{"lines":{"from":69,"to":77}}}}],["471",{"pageContent":"Submit the issue\n\nFinally, create your issue in the [Storybook issue tracker](https://github.com/storybookjs/storybook/issues/new/choose), go through the required steps, and provide a detailed description of the problem. Add the GitHub repository and [deployed reproduction](https://www.chromatic.com/docs/setup?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook#view-published-storybook) to help with the triage process.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/how-to-reproduce.md","loc":{"lines":{"from":79,"to":81}}}}],["472",{"pageContent":"---\ntitle: 'Code snippets contributions'\n---\n\nAdd or update the code snippets in the documentation. This page outlines how the code snippets are structured.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/new-snippets.md","loc":{"lines":{"from":1,"to":5}}}}],["473",{"pageContent":"Documented frameworks\n\nStorybook maintains code snippets for a [variety of frameworks](../configure/frameworks-feature-support.md). We try to keep them up to date as framework APIs evolve. But it's tricky to keep track of every API change in every framework.\n\nWe welcome community contributions to the code snippets. Here's a matrix of the frameworks we have snippets for. Help us add snippets for your favorite framework.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/new-snippets.md","loc":{"lines":{"from":7,"to":11}}}}],["474",{"pageContent":"| React                                                                        | Vue                                                                        | Angular                                                                        | Web Components                                                                        | Svelte                                                                        | Ember | HTML | Preact |\n| ---------------------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ----- | ---- | ------ |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/new-snippets.md","loc":{"lines":{"from":13,"to":14}}}}],["475",{"pageContent":"| [✅](https://github.com/storybookjs/storybook/tree/next/docs/snippets/react) | [✅](https://github.com/storybookjs/storybook/tree/next/docs/snippets/vue) | [✅](https://github.com/storybookjs/storybook/tree/next/docs/snippets/angular) | [✅](https://github.com/storybookjs/storybook/tree/next/docs/snippets/web-components) | [✅](https://github.com/storybookjs/storybook/tree/next/docs/snippets/svelte) | ❌    | ❌   | ❌     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/new-snippets.md","loc":{"lines":{"from":15,"to":15}}}}],["476",{"pageContent":"Setup\n\nAssuming you've already followed the [local environment guide](./code.md#initial-setup), the first thing you need to do is create a branch on your local Storybook monorepo by running the following command:\n\n```shell\ngit checkout -b code-snippets-for-framework\n```\n\nBefore adding your snippets, open the `docs` folder with your editor of choice. Get familiarized with the documentation, including how the snippets are organized and their contents.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/new-snippets.md","loc":{"lines":{"from":17,"to":25}}}}],["477",{"pageContent":"Add your first snippet\n\nNow that you're familiar with how the documentation is structured, it's time to add the code snippets. First, go to the `docs/snippets/` folder and create a new directory for your framework of choice (e.g., `ember`).\n\nBrowse the documentation and look for the code snippets you're willing to contribute. For example, on the [setup page](https://github.com/storybookjs/storybook/blob/next/docs/get-started/setup.md), you should see something similar to:\n\n```jsx\n// /docs/get-started/setup.md\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/your-component.js.mdx',\n    'react/your-component.ts.mdx',\n    'angular/your-component.ts.mdx',\n    'vue/your-component.2.js.mdx',\n    'vue/your-component.3.js.mdx',\n    'svelte/your-component.js.mdx',\n    'web-components/your-component.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/new-snippets.md","loc":{"lines":{"from":27,"to":50}}}}],["478",{"pageContent":"Create the file `ember/your-component.js.mdx`, similar to the other frameworks, and reference it.\n\n```jsx\n// /docs/get-started/setup.md\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/your-component.js.mdx',\n    'react/your-component.ts.mdx',\n    'angular/your-component.ts.mdx',\n    'vue/your-component.2.js.mdx',\n    'vue/your-component.3.js.mdx',\n    'svelte/your-component.js.mdx',\n    'web-components/your-component.js.mdx',\n    'ember/your-component.js.mdx', //👈🏼 The code snippet you created.\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n```\n\n<div class=\"aside\">\n💡 Code snippets are divided into various file extensions, if you're contributing a TypeScript file use <code>.ts.mdx</code>, or if you're adding JavaScript files use <code>.js.mdx</code> .\n</div>\n\nGo through the rest of the documentation and repeat the process.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/new-snippets.md","loc":{"lines":{"from":53,"to":80}}}}],["479",{"pageContent":"Preview your work\n\nBefore submitting your contribution, we advise you to check your work against the Storybook website. Doing this prevents last-minute issues with the documentation and is also an excellent way for the maintainers to merge faster once you submit the pull request. However, failing to do so will lead one of the maintainers to notify you that your contribution has an issue.\n\nStart by forking [frontpage repo](https://github.com/storybookjs/frontpage) and cloning it locally.\n\n```shell\ngit clone https://github.com/your-username/frontpage.git\n```\n\nNavigate to the `frontpage` directory and install the required dependencies with the following command:\n\n```shell\nyarn\n```\n\nNext, you'll need a way to get the documentation linked to the website. Execute the following:\n\n```shell\nyarn link-monorepo-docs  ./path-to-your-local-storybook\n```\n\nAnd run the Storybook website with the following command:\n\n```shell\nyarn start:docs-only","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/new-snippets.md","loc":{"lines":{"from":82,"to":107}}}}],["480",{"pageContent":"And run the Storybook website with the following command:\n\n```shell\nyarn start:docs-only\n```\n\n<div class=\"aside\">\n💡 During the start process if there's an issue with the documentation, the process will stop and you'll get a notification.\n</div>\n\nOpen a browser window to `http://localhost:8000`, click the Docs link, and select your framework from the dropdown.\n\n![Storybook docs with dropdown](./local-storybook-website-dropdown-optimized.png)\n\nGo through the documentation and check your work.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/new-snippets.md","loc":{"lines":{"from":107,"to":121}}}}],["481",{"pageContent":"Submit your contribution\n\nFinally, commit, push and open a pull request in the Storybook monorepo. Add a clear description of the work you've done, and one of the maintainers will guide you through the merge process.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/contribute/new-snippets.md","loc":{"lines":{"from":123,"to":125}}}}],["482",{"pageContent":"---\ntitle: 'Actions'\n---\n\nThe actions addon is used to display data received by event handler (callback) arguments in your stories.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"addon-actions-demo-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/actions.md","loc":{"lines":{"from":1,"to":12}}}}],["483",{"pageContent":"Action args\n\nActions work via supplying special Storybook-generated “action” arguments (referred to as \"args\" for short) to your stories. There are two ways to get an action arg:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/actions.md","loc":{"lines":{"from":14,"to":16}}}}],["484",{"pageContent":"Action argType annotation\n\nYou can use [argTypes](../api/argtypes.md) to tell Storybook that an arg to your story should be an action. Usually, it makes sense to do this at the component level (although you can apply it per individual story):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/button-story-onclick-action-argtype.ts.mdx',\n    'web-components/button-story-onclick-action-argtype.js.mdx',\n    'web-components/button-story-onclick-action-argtype.ts.mdx',\n    'common/button-story-onclick-action-argtype.js.mdx',\n    'common/button-story-onclick-action-argtype.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nWhen Storybook sees this argType, it will create an arg set to a special “action” callback. If your component calls this arg (based on the user's interaction or through the `play` function), the event will show up in the action panel:\n\n![Essential Actions addon usage](./addon-actions-screenshot.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/actions.md","loc":{"lines":{"from":18,"to":38}}}}],["485",{"pageContent":"Automatically matching args\n\nAnother option is to use a global parameter to match all [argTypes](../api/argtypes.md) that match a certain pattern. The following configuration automatically creates actions for each `on` argType (which you can either specify manually or can be [inferred automatically](../api/argtypes.md#automatic-argtype-inference)).\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-matching-argtypes.js.mdx',\n    'common/storybook-preview-matching-argtypes.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nIf you need more granular control over which `argTypes` are matched, you can adjust your stories and include the `argTypes` parameter. For example:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/actions.md","loc":{"lines":{"from":40,"to":57}}}}],["486",{"pageContent":"If you need more granular control over which `argTypes` are matched, you can adjust your stories and include the `argTypes` parameter. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/button-story-matching-argtypes.ts.mdx',\n    'web-components/button-story-matching-argtypes.js.mdx',\n    'web-components/button-story-matching-argtypes.ts.mdx',\n    'common/button-story-matching-argtypes.js.mdx',\n    'common/button-story-matching-argtypes.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 If you're generating argTypes with another addon (like [docs](../writing-docs/introduction.md), which is the common behavior), ensure the actions addon <strong>AFTER</strong> the other addon. You can do this by listing it later in the addons registration code in [`.storybook/main.js`](../configure/overview.md#configure-story-rendering). This is default in [essentials](./introduction.md).\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/actions.md","loc":{"lines":{"from":57,"to":77}}}}],["487",{"pageContent":"Action event handlers\n\nIt is also possible to detect if your component is emitting the correct HTML events using the `parameters.actions.handles` [parameter](../writing-stories/parameters.md).\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/button-story-action-event-handle.ts.mdx',\n    'web-components/button-story-action-event-handle.js.mdx',\n    'web-components/button-story-action-event-handle.ts.mdx',\n    'common/button-story-action-event-handle.js.mdx',\n    'common/button-story-action-event-handle.ts.mdx',\n  ]}\n/>\n\n\n<!-- prettier-ignore-end -->\n\nThis will bind a standard HTML event handler to the outermost HTML element rendered by your component and trigger an action when the event is called for a given selector. The format is `<eventname> <selector>`. The selector is optional; it defaults to all elements.\n\n## Advanced / legacy usage\n\nThere are also some older ways to use actions as documented in the [advanced README](../../addons/actions/ADVANCED.md).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/actions.md","loc":{"lines":{"from":79,"to":102}}}}],["488",{"pageContent":"---\ntitle: 'Backgrounds'\n---\n\nThe backgrounds toolbar addon allows you to set the background color in which the story renders in the UI:\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"addon-backgrounds-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/backgrounds.md","loc":{"lines":{"from":1,"to":12}}}}],["489",{"pageContent":"Configuration\n\nBy default, the backgrounds toolbar includes a light and dark background.\n\nBut you're not restricted to these backgrounds, you can configure your own set of colors with the `parameters.backgrounds` [parameter](../writing-stories/parameters.md) in your [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-configure-background-colors.js.mdx',\n    'common/storybook-preview-configure-background-colors.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nIf you define the `default` property, the addon will apply it to all stories. Otherwise, it's only listed as an available color.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/backgrounds.md","loc":{"lines":{"from":14,"to":31}}}}],["490",{"pageContent":"Extending the configuration\n\nYou can also define backgrounds per-component or per-story basis through [parameter inheritance](../writing-stories/parameters.md#component-parameters):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/storybook-addon-backgrounds-configure-backgrounds.ts.mdx',\n    'web-components/storybook-addon-backgrounds-configure-backgrounds.js.mdx',\n    'web-components/storybook-addon-backgrounds-configure-backgrounds.ts.mdx',\n    'common/storybook-addon-backgrounds-configure-backgrounds.js.mdx',\n    'common/storybook-addon-backgrounds-configure-backgrounds.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nYou can also override a single key on the `backgrounds` parameter, for instance, to set a different default value for a particular story:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/backgrounds.md","loc":{"lines":{"from":33,"to":53}}}}],["491",{"pageContent":"<!-- prettier-ignore-end -->\n\nYou can also override a single key on the `backgrounds` parameter, for instance, to set a different default value for a particular story:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/storybook-addon-backgrounds-override-background-color.ts.mdx',\n    'web-components/storybook-addon-backgrounds-override-background-color.js.mdx',\n    'web-components/storybook-addon-backgrounds-override-background-color.ts.mdx',\n    'common/storybook-addon-backgrounds-override-background-color.js.mdx',\n    'common/storybook-addon-backgrounds-override-background-color.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"essentials/backgrounds#snippet-storybook-addon-backgrounds-override-background-color\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/backgrounds.md","loc":{"lines":{"from":53,"to":71}}}}],["492",{"pageContent":"Disable backgrounds\n\nIf you want to disable backgrounds in a story, you can do so by setting the `backgrounds` parameter like so:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/storybook-addon-backgrounds-disable-backgrounds.ts.mdx',\n    'web-components/storybook-addon-backgrounds-disable-backgrounds.js.mdx',\n    'web-components/storybook-addon-backgrounds-disable-backgrounds.ts.mdx',\n    'common/storybook-addon-backgrounds-disable-backgrounds.js.mdx',\n    'common/storybook-addon-backgrounds-disable-backgrounds.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"essentials/backgrounds#snippet-storybook-addon-backgrounds-disable-backgrounds\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/backgrounds.md","loc":{"lines":{"from":73,"to":91}}}}],["493",{"pageContent":"Grid\n\nBackgrounds toolbar also includes a Grid selector. This way, you can quickly see if your components are aligned.\n\nYou don't need additional configuration to get started. But its properties are fully customizable, if you don't supply any value to any of its properties, they'll default to the following values:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/storybook-addon-backgrounds-configure-grid.ts.mdx',\n    'web-components/storybook-addon-backgrounds-configure-grid.js.mdx',\n    'web-components/storybook-addon-backgrounds-configure-grid.ts.mdx',\n    'common/storybook-addon-backgrounds-configure-grid.js.mdx',\n    'common/storybook-addon-backgrounds-configure-grid.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/backgrounds.md","loc":{"lines":{"from":93,"to":111}}}}],["494",{"pageContent":"Disable the grid\n\nIf you need to disable the grid for a specific story, set the `backgrounds` parameter to the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/storybook-addon-backgrounds-disable-grid.ts.mdx',\n    'web-components/storybook-addon-backgrounds-disable-grid.js.mdx',\n    'web-components/storybook-addon-backgrounds-disable-grid.ts.mdx',\n    'common/storybook-addon-backgrounds-disable-grid.js.mdx',\n    'common/storybook-addon-backgrounds-disable-grid.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"essentials/backgrounds#snippet-storybook-addon-backgrounds-disable-grid\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/backgrounds.md","loc":{"lines":{"from":113,"to":131}}}}],["495",{"pageContent":"---\ntitle: 'Controls'\n---\n\n<YouTubeCallout id=\"vAh0KdRcXpI\" title=\"How to connect props with Storybook controls\" />\n\nStorybook Controls gives you a graphical UI to interact with a component's arguments dynamically without needing to code. It creates an addon panel next to your component examples (\"stories\"), so you can edit them live.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"addon-controls-demo-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n\nControls do not require any modification to your components. Stories for controls are:\n\n- Convenient. Auto-generate controls based on React/Vue/Angular/etc. components.\n- Portable. Reuse your interactive stories in documentation, tests, and even in designs.\n- Rich. Customize the controls and interactive data to suit your exact needs.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":1,"to":20}}}}],["496",{"pageContent":"To use the Controls addon, you need to write your stories using [args](../writing-stories/args.md). Storybook will automatically generate UI controls based on your args and what it can infer about your component. Still, you can configure the controls further using [argTypes](../api/argtypes.md), see below.\n\n<div class=\"aside\">\n\n💡 If you have stories in the older pre-Storybook 6 style, check the <a href=\"https://medium.com/storybookjs/storybook-6-migration-guide-200346241bb5\">args & controls migration guide</a> to learn how to convert your existing stories for args.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":22,"to":28}}}}],["497",{"pageContent":"Choosing the control type\n\nBy default, Storybook will choose a control for each arg based on the initial value of the arg. It works well with certain types of args, such as boolean values or free-text strings, but in other cases, you want a more restricted control.\n\n<!-- prettier-ignore-start -->\n\n<FeatureSnippets\n  paths={[\n    'essentials/auto-generated-controls/react.mdx',\n    'essentials/auto-generated-controls/vue.mdx',\n    'essentials/auto-generated-controls/angular.mdx',\n    'essentials/auto-generated-controls/web-components.mdx',\n    'essentials/auto-generated-controls/ember.mdx',\n    'essentials/auto-generated-controls/fallback.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nFor instance, suppose you have a `variant` arg on your story that should be `primary` or `secondary`:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":30,"to":51}}}}],["498",{"pageContent":"<!-- prettier-ignore-end -->\n\nFor instance, suppose you have a `variant` arg on your story that should be `primary` or `secondary`:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/button-story-controls-primary-variant.ts.mdx',\n    'web-components/button-story-controls-primary-variant.js.mdx',\n    'web-components/button-story-controls-primary-variant.ts.mdx',\n    'common/button-story-controls-primary-variant.js.mdx',\n    'common/button-story-controls-primary-variant.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"essentials/controls#snippet-button-story-controls-primary-variant\"\n/>\n\n<!-- prettier-ignore-end -->\n\nBy default, Storybook will render a free text input for the `variant` arg:\n\n![Essential addon Controls using a string](addon-controls-args-variant-string.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":51,"to":73}}}}],["499",{"pageContent":"<!-- prettier-ignore-end -->\n\nBy default, Storybook will render a free text input for the `variant` arg:\n\n![Essential addon Controls using a string](addon-controls-args-variant-string.png)\n\nIt works as long as you type a valid string into the auto-generated text control. Still, it's not the best UI for our scenario, given that the component only accepts `primary` or `secondary` as variants. Let’s replace it with Storybook’s radio component.\n\nWe can specify which controls get used by declaring a custom [argType](../api/argtypes.md) for the `variant` property. ArgTypes encode basic metadata for args, such as name, description, defaultValue for an arg. These get automatically filled in by Storybook Docs.\n\n`ArgTypes` can also contain arbitrary annotations, which the user can override. Since `variant` is a property of the component, let's put that annotation on the default export.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":73,"to":85}}}}],["500",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/button-story-controls-radio-group.ts.mdx',\n    'web-components/button-story-controls-radio-group.js.mdx',\n    'web-components/button-story-controls-radio-group.ts.mdx',\n    'common/button-story-controls-radio-group.js.mdx',\n    'common/button-story-controls-radio-group.ts.mdx',\n  ]}\n/>\n\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 ArgTypes are a powerful feature that can be used to customize the controls for your stories. See the documentation about [customizing controls](#annotation) with `argTypes` annotation for more information.\n\n</div>\n\nThis replaces the input with a radio group for a more intuitive experience.\n\n![Essential Control addon with a radio group](addon-controls-args-variant-optimized.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":85,"to":108}}}}],["501",{"pageContent":"Custom control type matchers\n\nFor a few types, Controls can automatically be inferred with [regex](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RegExp). If you've used the Storybook CLI to setup your project it should have automatically created the following defaults in `.storybook/preview.js`:\n\n| Data type |              Default regex               |                        Description                        |\n| :-------: | :--------------------------------------: | :-------------------------------------------------------: |\n| **color** | <code>/(background&#124;color)$/i</code> | Will display a color picker UI for the args that match it |\n| **date**  |                `/Date$/`                 | Will display a date picker UI for the args that match it  |\n\nIf you haven't used the CLI to setup the configuration, or if you want to define your own patterns, use the `matchers` property in the `controls` parameter:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":110,"to":121}}}}],["502",{"pageContent":"If you haven't used the CLI to setup the configuration, or if you want to define your own patterns, use the `matchers` property in the `controls` parameter:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addon-controls-custom-matchers.js.mdx',\n    'common/storybook-addon-controls-custom-matchers.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":121,"to":132}}}}],["503",{"pageContent":"Fully custom args\n\nUntil now, we only used auto-generated controls based on the component we're writing stories for. If we are writing [complex stories](../writing-stories/stories-for-multiple-components.md), we may want to add controls for args that aren’t part of the component.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/table-story-fully-customize-controls.js.mdx',\n    'react/table-story-fully-customize-controls.ts.mdx',\n    'vue/table-story-fully-customize-controls.2.js.mdx',\n    'vue/table-story-fully-customize-controls.2.ts.mdx',\n    'vue/table-story-fully-customize-controls.3.js.mdx',\n    'vue/table-story-fully-customize-controls.3.ts.mdx',\n    'angular/table-story-fully-customize-controls.ts.mdx',\n    'web-components/table-story-fully-customize-controls.js.mdx',\n    'web-components/table-story-fully-customize-controls.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"essentials/controls#snippet-table-story-fully-customize-controls\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":134,"to":156}}}}],["504",{"pageContent":"<!-- prettier-ignore-end -->\n\nBy default, Storybook will add controls for all args that:\n\n- It infers from the component definition [if your framework supports it](../configure/frameworks-feature-support.md).\n\n- Appear in the list of args for your story.\n\nUsing `argTypes`, you can change the display and behavior of each control.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":156,"to":164}}}}],["505",{"pageContent":"Dealing with complex values\n\nWhen dealing with non-primitive values, you'll notice that you'll run into some limitations. The most obvious issue is that not every value can be represented as part of the `args` param in the URL, losing the ability to share and deeplink to such a state. Beyond that, complex values such as JSX cannot be synchronized between the manager (e.g., Controls addon) and the preview (your story).\n\nOne way to deal with this is to use primitive values (e.g., strings) as arg values and add a custom `render` function to convert these values to their complex counterpart before rendering. It isn't the nicest way to do it (see below), but certainly the most flexible.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":166,"to":172}}}}],["506",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/component-story-custom-args-complex.js.mdx',\n    'react/component-story-custom-args-complex.ts.mdx',\n    'vue/component-story-custom-args-complex.js.mdx',\n    'vue/component-story-custom-args-complex.ts.mdx',\n    'angular/component-story-custom-args-complex.ts.mdx',\n    'svelte/component-story-custom-args-complex.js.mdx',\n    'web-components/component-story-custom-args-complex.js.mdx',\n    'web-components/component-story-custom-args-complex.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"essentials/controls#snippet-component-story-custom-args-complex\"\n/>\n\n<!-- prettier-ignore-end -->\n\nUnless you need the flexibility of a function, an easier way to map primitives to complex values before rendering is to define a `mapping`, additionally, you can specify `control.labels` to configure custom labels for your checkbox, radio, or select input.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":172,"to":193}}}}],["507",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/component-story-custom-args-mapping.ts.mdx',\n    'web-components/component-story-custom-args-mapping.js.mdx',\n    'web-components/component-story-custom-args-mapping.ts.mdx',\n    'common/component-story-custom-args-mapping.js.mdx',\n    'common/component-story-custom-args-mapping.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nNote that both `mapping` and `control.labels` don't have to be exhaustive. If the currently selected option is not listed, it's used verbatim.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":193,"to":207}}}}],["508",{"pageContent":"Configuration\n\nThe Controls addon can be configured in two ways:\n\n- Individual controls can be configured via control annotations.\n- The addon's appearance can be configured via parameters.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":209,"to":214}}}}],["509",{"pageContent":"Annotation\n\nAs shown above, you can configure individual controls with the “control\" annotation in the [argTypes](../api/argtypes.md) field of either a component or story. Below is a condensed example and table featuring all available controls.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":216,"to":218}}}}],["510",{"pageContent":"| Data Type   | Control        | Description                                                                                                                                                                                                               |\n| ----------- | -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **boolean** | `boolean`      | Provides a toggle for switching between possible states.<br/> `argTypes: { active: { control: 'boolean' }}`                                                                                                               |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":220,"to":222}}}}],["511",{"pageContent":"| **number**  | `number`       | Provides a numeric input to include the range of all possible values.<br/> `argTypes: { even: { control: { type: 'number', min:1, max:30, step: 2 } }}`                                                                   |\n|             | `range`        | Provides a range slider component to include all possible values.<br/> `argTypes: { odd: { control: { type: 'range', min: 1, max: 30, step: 3 } }}`                                                                       |\n| **object**  | `object`       | Provides a JSON-based editor component to handle the object's values.<br/> Also allows edition in raw mode.<br/> `argTypes: { user: { control: 'object' }}`                                                               |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":223,"to":225}}}}],["512",{"pageContent":"| **array**   | `object`       | Provides a JSON-based editor component to handle the values of the array.<br/> Also allows edition in raw mode.<br/> `argTypes: { odd: { control: 'object' }}`                                                            |\n|             | `file`         | Provides a file input component that returns an array of URLs.<br/> Can be further customized to accept specific file types.<br/> `argTypes: { avatar: { control: { type: 'file', accept: '.png' } }}`                    |\n| **enum**    | `radio`        | Provides a set of radio buttons based on the available options.<br/> `argTypes: { contact: { control: 'radio', options: ['email', 'phone', 'mail'] }}`                                                                    |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":226,"to":228}}}}],["513",{"pageContent":"|             | `inline-radio` | Provides a set of inlined radio buttons based on the available options.<br/> `argTypes: { contact: { control: 'inline-radio', options: ['email', 'phone', 'mail'] }}`                                                     |\n|             | `check`        | Provides a set of checkbox components for selecting multiple options.<br/> `argTypes: { contact: { control: 'check', options: ['email', 'phone', 'mail'] }}`                                                              |\n|             | `inline-check` | Provides a set of inlined checkbox components for selecting multiple options.<br/> `argTypes: { contact: { control: 'inline-check', options: ['email', 'phone', 'mail'] }}`                                               |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":229,"to":231}}}}],["514",{"pageContent":"|             | `select`       | Provides a drop-down list component to handle single value selection. `argTypes: { age: { control: 'select', options: [20, 30, 40, 50] }}`                                                                                |\n|             | `multi-select` | Provides a drop-down list that allows multiple selected values. `argTypes: { countries: { control: 'multi-select', options: ['USA', 'Canada', 'Mexico'] }}`                                                               |\n| **string**  | `text`         | Provides a freeform text input. <br/> `argTypes: { label: { control: 'text' }}`                                                                                                                                           |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":232,"to":234}}}}],["515",{"pageContent":"|             | `color`        | Provides a color picker component to handle color values.<br/> Can be additionally configured to include a set of color presets.<br/> `argTypes: { color: { control: { type: 'color', presetColors: ['red', 'green']} }}` |\n|             | `date`         | Provides a datepicker component to handle date selection. `argTypes: { startDate: { control: 'date' }}`                                                                                                                   |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":235,"to":236}}}}],["516",{"pageContent":"<div class=\"aside\">\n💡 The <code>date</code> control will convert the date into a UNIX timestamp when the value changes. It's a known limitation that will be fixed in a future release. If you need to represent the actual date, you'll need to update the story's implementation and convert the value into a date object.\n</div>\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/gizmo-story-controls-customization.ts.mdx',\n    'web-components/gizmo-story-controls-customization.js.mdx',\n    'web-components/gizmo-story-controls-customization.ts.mdx',\n    'common/gizmo-story-controls-customization.js.mdx',\n    'common/gizmo-story-controls-customization.ts.mdx',\n  ]}\n/>\n\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n💡 Numeric data types will default to a <code>number</code> control unless additional configuration is provided.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":238,"to":259}}}}],["517",{"pageContent":"Parameters\n\nControls supports the following configuration [parameters](../writing-stories/parameters.md), either globally or on a per-story basis:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":261,"to":263}}}}],["518",{"pageContent":"Show full documentation for each property\n\nSince Controls is built on the same engine as Storybook Docs, it can also show property documentation alongside your controls using the expanded parameter (defaults to false). This means you embed a complete [`Controls`](../api/doc-block-controls.md) doc block in the controls panel. The description and default value rendering can be [customized](#fully-custom-args) in the same way as the doc block.\n\nTo enable expanded mode globally, add the following to [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-expanded-controls.js.mdx',\n    'common/storybook-preview-expanded-controls.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nAnd here's what the resulting UI looks like:\n\n![Controls addon expanded](./addon-controls-expanded.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":265,"to":284}}}}],["519",{"pageContent":"Specify initial preset color swatches\n\nFor `color` controls, you can specify an array of `presetColors`, either on the `control` in `argTypes`, or as a parameter under the `controls` namespace:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-parameters-color-swatches.js.mdx',\n    'common/storybook-preview-parameters-color-swatches.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nColor presets can be defined as an object with `color` and `title` or a simple CSS color string. These will then be available as swatches in the color picker. When you hover over the color swatch, you'll be able to see its title. It will default to the nearest CSS color name if none is specified.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":286,"to":301}}}}],["520",{"pageContent":"Disable controls for specific properties\n\nAside from the features already documented here, Controls can also be disabled for individual properties.\n\nSuppose you want to disable Controls for a property called `foo` in a component's story. The following example illustrates how:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/component-story-disable-controls.ts.mdx',\n    'web-components/component-story-disable-controls.js.mdx',\n    'web-components/component-story-disable-controls.ts.mdx',\n    'common/component-story-disable-controls.js.mdx',\n    'common/component-story-disable-controls.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nResulting in the following change in Storybook UI:\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"addon-controls-disable-specific-prop-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":303,"to":330}}}}],["521",{"pageContent":"Resulting in the following change in Storybook UI:\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"addon-controls-disable-specific-prop-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n\nThe previous example also removed the prop documentation from the table. In some cases, this is fine. However, sometimes you might want to render the prop documentation, but without a control. The following example illustrates how:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/component-story-disable-controls-alt.ts.mdx',\n    'web-components/component-story-disable-controls-alt.js.mdx',\n    'web-components/component-story-disable-controls-alt.ts.mdx',\n    'common/component-story-disable-controls-alt.js.mdx',\n    'common/component-story-disable-controls-alt.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":330,"to":355}}}}],["522",{"pageContent":"<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 As with other Storybook properties, such as [decorators](../writing-stories/decorators.md), you can apply the same pattern at a story level for more granular cases.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":355,"to":361}}}}],["523",{"pageContent":"Conditional controls\n\nIn some cases, it's useful to be able to conditionally exclude a control based on the value of another control. Controls supports basic versions of these use cases with the `if`, which can takes a simple query object to determine whether to include the control.\n\nConsider a collection of \"advanced\" settings that are only visible when the user toggles an \"advanced\" toggle.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/component-story-conditional-controls-toggle.ts.mdx',\n    'web-components/component-story-conditional-controls-toggle.js.mdx',\n    'web-components/component-story-conditional-controls-toggle.ts.mdx',\n    'common/component-story-conditional-controls-toggle.js.mdx',\n    'common/component-story-conditional-controls-toggle.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nOr consider a constraint where if the user sets one control value, it doesn't make sense for the user to be able to set another value.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":363,"to":385}}}}],["524",{"pageContent":"<!-- prettier-ignore-end -->\n\nOr consider a constraint where if the user sets one control value, it doesn't make sense for the user to be able to set another value.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/component-story-conditional-controls-mutual-exclusion.ts.mdx',\n    'web-components/component-story-conditional-controls-mutual-exclusion.js.mdx',\n    'web-components/component-story-conditional-controls-mutual-exclusion.ts.mdx',\n    'common/component-story-conditional-controls-mutual-exclusion.js.mdx',\n    'common/component-story-conditional-controls-mutual-exclusion.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThe query object must contain either an `arg` or `global` target:\n\n| field  | type   | meaning                       |\n| ------ | ------ | ----------------------------- |\n| arg    | string | The ID of the arg to test.    |\n| global | string | The ID of the global to test. |\n\nIt may also contain at most one of the following operators:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":385,"to":410}}}}],["525",{"pageContent":"It may also contain at most one of the following operators:\n\n| operator | type    | meaning                                              |\n| -------- | ------- | ---------------------------------------------------- |\n| truthy   | boolean | Is the target value truthy?                          |\n| exists   | boolean | Is the target value defined?                         |\n| eq       | any     | Is the target value equal to the provided value?     |\n| neq      | any     | Is the target value NOT equal to the provided value? |\n\nIf no operator is provided, that is equivalent to `{ truthy: true }`.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":410,"to":419}}}}],["526",{"pageContent":"Hide NoControls warning\n\nIf you don't plan to handle the control args inside your Story, you can remove the warning with:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'angular/button-story-hide-nocontrols-warning.ts.mdx',\n   'web-components/button-story-hide-nocontrols-warning.js.mdx',\n   'web-components/button-story-hide-nocontrols-warning.ts.mdx',\n   'common/button-story-hide-nocontrols-warning.js.mdx',\n   'common/button-story-hide-nocontrols-warning.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"essentials/controls#snippet-button-story-hide-nocontrols-warning\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":421,"to":439}}}}],["527",{"pageContent":"Filtering controls\n\nIn specific cases, you may require to display only a limited number of controls in the controls panel, or all of them except a particular set.\n\nTo make this possible, you can use optional `include` and `exclude` configuration fields in the `controls` parameter, which you can define as an array of strings, or as a regular expression.\n\nConsider the following story snippets:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/component-story-disable-controls-regex.ts.mdx',\n    'web-components/component-story-disable-controls-regex.js.mdx',\n    'web-components/component-story-disable-controls-regex.ts.mdx',\n    'common/component-story-disable-controls-regex.js.mdx',\n    'common/component-story-disable-controls-regex.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"essentials/controls#snippet-component-story-disable-controls-regex\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":441,"to":463}}}}],["528",{"pageContent":"Sorting controls\n\nBy default, controls are unsorted and use whatever order the args data is processed in (`none`). Additionally, you can sort them alphabetically by the arg's name (`alpha`) or with the required args first (`requiredFirst`).\n\nConsider the following snippet to force required args first:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/component-story-sort-controls.ts.mdx',\n    'web-components/component-story-sort-controls.js.mdx',\n    'web-components/component-story-sort-controls.ts.mdx',\n    'common/component-story-sort-controls.js.mdx',\n    'common/component-story-sort-controls.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/controls.md","loc":{"lines":{"from":465,"to":483}}}}],["529",{"pageContent":"---\ntitle: 'Highlight'\n---\n\nStorybook's [Highlight](https://storybook.js.org/addons/@storybook/addon-highlight/) addon allows you to highlight specific DOM nodes within your story. You can use it to call attention to particular parts of the story.\n\n![](highlight.png)\n\nThis addon can be used to enhance other addons. For example, [Accessibility](https://storybook.js.org/addons/@storybook/addon-a11y/) addon uses it to highlight DOM nodes that are failing accessibility checks.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/highlight.md","loc":{"lines":{"from":1,"to":9}}}}],["530",{"pageContent":"Apply or clear highlights\n\nHighlight DOM nodes by emitting the `HIGHLIGHT` event from within a story or an addon. The event payload must contain a list of selectors you want to highlight.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/component-story-highlight-addon.js.mdx',\n    'angular/component-story-highlight-addon.ts.mdx',\n    'vue/component-story-highlight-addon.js.mdx',\n    'web-components/component-story-highlight-addon.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nHighlights are automatically cleared when the story changes. You can also manually clear them by emitting the `RESET_HIGHLIGHT` event.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/addon-highlight-reset.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n## Customize style\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/addon-highlight-customize.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/highlight.md","loc":{"lines":{"from":11,"to":50}}}}],["531",{"pageContent":"---\ntitle: 'Interactions'\n---\n\nThe [`play`](../writing-stories/play-function.md) function in Storybook allows you to simulate user interactions to run after a story renders. With the [Interactions](https://storybook.js.org/addons/@storybook/addon-interactions/) addon, you have a way to visualize and debug these interactions.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/interactions.md","loc":{"lines":{"from":1,"to":5}}}}],["532",{"pageContent":"Play function for interactions\n\nStories isolate and capture component states in a structured manner. While developing a component, you can quickly cycle through the stories to verify the look and feel. Each story specifies all the inputs required to reproduce a specific state. You can even mock context and API calls, allowing you to handle most use cases of a component. But what about states that require user interaction?\n\nFor example, clicking a button to open/close a dialog box, dragging a list item to reorder it, or filling out a form to check for validation errors. To test those behaviors, you have to interact with the components as a user would. Interactive stories enable you to automate these interactions using a play function. They are small snippets of code that run once the story finishes rendering, emulating the exact steps a user would take to interact with the component.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/interactions.md","loc":{"lines":{"from":7,"to":11}}}}],["533",{"pageContent":"Powered by Testing Library and Jest\n\nThe interactions are written using a Storybook-instrumented version of [Testing Library](https://testing-library.com/) and [Jest](https://jestjs.io/). That gives you a familiar developer-friendly syntax to interact with the DOM and make assertions, but with extra telemetry to help with debugging.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/interactions.md","loc":{"lines":{"from":13,"to":15}}}}],["534",{"pageContent":"Set up the interactions addon\n\nBy default, the [`@storybook/addon-interactions`](https://storybook.js.org/addons/@storybook/addon-interactions/) is already installed and configured if you're adding Storybook for new projects. If you're migrating from a previous version of Storybook, you'll need to install it manually.\n\nRun the following command to install the interactions addon and related dependencies.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addon-interactions-addon-full-install.yarn.js.mdx',\n    'common/storybook-addon-interactions-addon-full-install.npm.js.mdx',\n    'common/storybook-addon-interactions-addon-full-install.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nNext, update [`.storybook/main.js|ts`](../configure/overview.md#configure-story-rendering) to the following:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/interactions.md","loc":{"lines":{"from":17,"to":37}}}}],["535",{"pageContent":"<!-- prettier-ignore-end -->\n\nNext, update [`.storybook/main.js|ts`](../configure/overview.md#configure-story-rendering) to the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-interactions-addon-registration.js.mdx',\n    'common/storybook-interactions-addon-registration.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 Make sure to list `@storybook/addon-interactions` **after** the [`@storybook/addon-essentials`](./introduction.md) addon (or the [`@storybook/addon-actions`](./actions.md) if you've installed it individually).\n\n</div>\n\nNow when you run Storybook, the Interactions addon will be enabled.\n\n![Storybook Interactions installed and registered](./addon-interactions-installed-registered.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/interactions.md","loc":{"lines":{"from":37,"to":60}}}}],["536",{"pageContent":"Write an interaction test\n\nInteractions run as part of the `play` function of your stories. We rely on Testing Library to do the heavy lifting.\n\nMake sure to import the Storybook wrappers for Jest and Testing Library rather than importing Jest and Testing Library directly.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/storybook-interactions-play-function.ts.mdx',\n    'web-components/storybook-interactions-play-function.js.mdx',\n    'web-components/storybook-interactions-play-function.ts.mdx',\n    'common/storybook-interactions-play-function.js.mdx',\n    'common/storybook-interactions-play-function.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"essentials/interactions#snippet-storybook-interactions-play-function\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/interactions.md","loc":{"lines":{"from":62,"to":82}}}}],["537",{"pageContent":"<!-- prettier-ignore-end -->\n\nThe above example uses the `canvasElement` to scope your element queries to the current story. It's essential if you want your play functions to eventually be compatible with Storybook Docs, which renders multiple components on the same page. Additionally, the `step` function can be used to create labeled groups of interactions.\n\nWhile you can refer to the [Testing Library documentation](https://testing-library.com/docs/) for details on how to use it, there's an important detail that's different when using the Storybook wrapper: **method invocations must be `await`-ed**. It allows you to step back and forth through your interactions using the debugger.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/interactions.md","loc":{"lines":{"from":82,"to":86}}}}],["538",{"pageContent":"Any `args` that have been marked as an Action, either using the [argTypes annotation](./actions.md#action-argtype-annotation) or the [argTypesRegex](./actions.md#automatically-matching-args), will be automatically converted to a [Jest mock function](https://jestjs.io/docs/mock-function-api) (spy). This allows you to make assertions about calls to these functions.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/interactions.md","loc":{"lines":{"from":88,"to":88}}}}],["539",{"pageContent":"---\ntitle: 'Essential addons'\n---\n\nA major strength of Storybook are [addons](https://storybook.js.org/addons) that extend Storybook’s UI and behavior. Storybook ships by default with a set of “essential” addons that add to the initial user experience. There are many third-party addons as well as “official” addons developed by the Storybook core team.\n\n- [Docs](../writing-docs/introduction.md)\n- [Controls](./controls.md)\n- [Actions](./actions.md)\n- [Viewport](./viewport.md)\n- [Backgrounds](./backgrounds.md)\n- [Toolbars & globals](./toolbars-and-globals.md)\n- [Measure & outline](./measure-and-outline.md)\n- [Highlight](./highlight.md)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/introduction.md","loc":{"lines":{"from":1,"to":14}}}}],["540",{"pageContent":"Installation\n\nIf you ran `npx storybook@latest init` to include Storybook in your project, the latest version of the Essentials addon ([`@storybook/addon-essentials`](https://storybook.js.org/addons/tag/essentials)) is already installed and configured for you. You can go ahead and skip the rest of this section.\n\nHowever, if you intend to install the Essentials addon manually into an existing Storybook instance, you can do so by running the following command in your terminal:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addon-essentials-install.yarn.js.mdx',\n    'common/storybook-addon-essentials-install.npm.js.mdx',\n    'common/storybook-addon-essentials-install.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nUpdate your Storybook configuration (in [`.storybook/main.js|ts`](../configure/overview.md#configure-story-rendering)) to include the Essentials addon.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/introduction.md","loc":{"lines":{"from":16,"to":36}}}}],["541",{"pageContent":"Update your Storybook configuration (in [`.storybook/main.js|ts`](../configure/overview.md#configure-story-rendering)) to include the Essentials addon.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-register-essentials-addon.js.mdx',\n    'common/storybook-main-register-essentials-addon.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/introduction.md","loc":{"lines":{"from":36,"to":47}}}}],["542",{"pageContent":"Configuration\n\nEssentials is \"zero-config”. It comes with a recommended configuration out of the box.\n\nIf you need to reconfigure any of the [individual Essentials addons](https://storybook.js.org/addons/tag/essentials), install them manually by following the installation instructions, and depending on the method of choice, register them in your Storybook configuration file (i.e., [`.storybook/main.js|ts`](../configure/overview.md#configure-story-rendering)) and adjust the configuration to suit your needs. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addon-actions-install.yarn.js.mdx',\n    'common/storybook-addon-actions-install.npm.js.mdx',\n    'common/storybook-addon-actions-install.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-register-individual-actions-addon.js.mdx',\n    'common/storybook-main-register-individual-actions-addon.ts.mdx',\n  ]}\n/>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/introduction.md","loc":{"lines":{"from":49,"to":74}}}}],["543",{"pageContent":"<CodeSnippets\n  paths={[\n    'common/storybook-main-register-individual-actions-addon.js.mdx',\n    'common/storybook-main-register-individual-actions-addon.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nBelow is an abridged configuration and table with all the available options for each addon.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-full-individual-essentials-config.js.mdx',\n    'common/storybook-main-full-individual-essentials-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/introduction.md","loc":{"lines":{"from":74,"to":94}}}}],["544",{"pageContent":"| Addon                          | Option             | Description                                                                                                                                              |\n| ------------------------------ | ------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `@storybook/addon-actions`     | N/A                | N/A                                                                                                                                                      |\n| `@storybook/addon-viewport`    | N/A                | N/A                                                                                                                                                      |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/introduction.md","loc":{"lines":{"from":96,"to":99}}}}],["545",{"pageContent":"| `@storybook/addon-docs`        | `csfPluginOptions` | Provides additional configuration for Storybook's CSF plugin. Can be disabled with `null`.                                                               |\n|                                | `jsxOptions`       | Extends the default Babel configuration options for processing Markdown and MDX files.                                                                   |\n|                                | `mdxPluginOptions` | Provides additional configuration options and plugin configuration for [MDX documentation](../writing-docs/mdx.md#lack-of-github-flavored-markdown-gfm). |\n| `@storybook/addon-controls`    | N/A                | N/A                                                                                                                                                      |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/introduction.md","loc":{"lines":{"from":100,"to":103}}}}],["546",{"pageContent":"| `@storybook/addon-backgrounds` | N/A                | N/A                                                                                                                                                      |\n| `@storybook/addon-toolbars`    | N/A                | N/A                                                                                                                                                      |\n| `@storybook/addon-measure`     | N/A                | N/A                                                                                                                                                      |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/introduction.md","loc":{"lines":{"from":104,"to":106}}}}],["547",{"pageContent":"When you start Storybook, your custom configuration will override the default.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/introduction.md","loc":{"lines":{"from":108,"to":108}}}}],["548",{"pageContent":"Disabling addons\n\nIf you need to disable any of the Essential's addons, you can do it by changing your [`.storybook/main.js`](../configure/overview.md#configure-story-rendering) file.\n\nFor example, if you wanted to disable the [backgrounds addon](./backgrounds.md), you would apply the following change to your Storybook configuration:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-disable-addon.js.mdx',\n    'common/storybook-main-disable-addon.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 You can use the following keys for each individual addon: `actions`, `backgrounds`, `controls`, `docs`, `viewport`, `toolbars`, `measure`, `outline`, `highlight`.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/introduction.md","loc":{"lines":{"from":110,"to":131}}}}],["549",{"pageContent":"---\ntitle: 'Measure & outline'\n---\n\n<YouTubeCallout id=\"-S7GtH0hdc4\" title=\"Debug CSS without DevTools — Storybook\" />\n\nStorybook's [Measure](https://storybook.js.org/addons/@storybook/addon-measure/) and [Outline](https://storybook.js.org/addons/@storybook/addon-outline) addons give you the necessary tooling to inspect and visually debug CSS layout and alignment issues within your stories. It makes it easy to catch UI bugs early in development.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/measure-and-outline.md","loc":{"lines":{"from":1,"to":7}}}}],["550",{"pageContent":"Measure addon\n\nWhile working with composite components or page layouts, dealing with whitespace (i.e., `margin`,`padding`,`border`) and individual component measurements can be pretty troublesome. It would require that you open up the browser's development tools and manually inspect the DOM tree for issues and UI bugs.\n\nWith Storybook's Measure addon, you can quickly visualize each component's measurements through a click of a button in Storybook's toolbar.\n\n<video autoPlay muted playsInline loop>\n  <source src=\"addon-measure-optimized.mp4\" type=\"video/mp4\" />\n</video>\n\n<div class=\"aside\">\n💡 Alternatively you can press the <code>m</code> key on your keyboard to toggle the addon.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/measure-and-outline.md","loc":{"lines":{"from":9,"to":21}}}}],["551",{"pageContent":"Outline addon\n\nWhen building your layouts, checking the visual alignment of all components can be pretty complicated, even more, if your components are spread apart or contain unique shapes.\n\nWith Storybook's Outline addon, you can toggle the outlines associated with all your UI elements, allowing you to spot bugs and broken layouts instantly with a click of a button.\n\n<video autoPlay muted playsInline loop>\n  <source src=\"addon-outline-optimized.mp4\" type=\"video/mp4\"/>\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/measure-and-outline.md","loc":{"lines":{"from":23,"to":31}}}}],["552",{"pageContent":"---\ntitle: 'Toolbars & globals'\n---\n\n<YouTubeCallout id=\"DuJ_gmSncLM\" title=\"Create custom toolbar items using global types\" />\n\nStorybook ships with toolbar addons to control the [viewport](./viewport.md) and [background](./backgrounds.md) the story renders in. You can also create your own toolbar items which control special “globals” which you can then read to create [decorators](../writing-stories/decorators.md) to control story rendering.\n\n![Toolbars and globals](./toolbars-and-globals.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/toolbars-and-globals.md","loc":{"lines":{"from":1,"to":9}}}}],["553",{"pageContent":"Globals\n\nGlobals in Storybook represents “global” (as in not story-specific) inputs to the rendering of the story. As they aren’t specific to the story, they aren’t passed in the `args` argument to the story function (although they are accessible as `context.globals`), but typically you use them in decorators, which apply to all stories.\n\nWhen the globals change, the story re-renders, and the decorators rerun with the new values. The easiest way to change globals is to create a toolbar item for them.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/toolbars-and-globals.md","loc":{"lines":{"from":11,"to":15}}}}],["554",{"pageContent":"Global types and the toolbar annotation\n\nStorybook has a simple, declarative syntax for configuring toolbar menus. In your [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering), you can add your own toolbars by creating `globalTypes` with a `toolbar` annotation:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-configure-globaltypes.js.mdx',\n    'common/storybook-preview-configure-globaltypes.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 As globals are _global_ you can _only_ set `globalTypes` in [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering).\n\n</div>\n\nWhen you start your Storybook, you should see a new dropdown with the `light` and `dark` options in your toolbar.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/toolbars-and-globals.md","loc":{"lines":{"from":17,"to":38}}}}],["555",{"pageContent":"Create a decorator\n\nWe have a `global` implemented. Let's wire it up! We can consume our new `theme` global in a decorator using the `context.globals.theme` value.\n\nFor example, suppose you are using `styled-components`. You can add a theme provider decorator to your [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering) config:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-use-global-type.js.mdx',\n    'common/storybook-preview-use-global-type.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/toolbars-and-globals.md","loc":{"lines":{"from":40,"to":55}}}}],["556",{"pageContent":"Advanced usage\n\nSo far, we've managed to create and consume a global inside Storybook.\n\nNow let's take a look at a more complex example. Let's suppose we wanted to implement a new global called **locale** for internationalization, which shows a flag on the right side of the toolbar.\n\nIn your [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering), add the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-locales-globaltype.js.mdx',\n    'common/storybook-preview-locales-globaltype.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 The <code>icon</code> element used in the examples loads the icons from the <code>@storybook/components</code> package. See [here](../faq.md#what-icons-are-available-for-my-toolbar-or-my-addon) for the list of available icons that you can use.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/toolbars-and-globals.md","loc":{"lines":{"from":57,"to":80}}}}],["557",{"pageContent":"</div>\n\n<div class=\"aside\">\n💡The <code>@storybook/addon-toolbars</code> addon is required to use toolbars. The toolbars addon is included by default in <code>@storybook/addon-essentials</code>.\n</div>\n\nBy adding the configuration element `right`, the text will be displayed on the right side in the toolbar menu once you connect it to a decorator.\n\nHere's a list of the configuration options available.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/toolbars-and-globals.md","loc":{"lines":{"from":80,"to":88}}}}],["558",{"pageContent":"By adding the configuration element `right`, the text will be displayed on the right side in the toolbar menu once you connect it to a decorator.\n\nHere's a list of the configuration options available.\n\n| MenuItem  |  Type  |                           Description                           | Required |\n| --------- | :----: | :-------------------------------------------------------------: | :------: |\n| **value** | String |    The string value of the menu that gets set in the globals    |   Yes    |\n| **title** | String |                   The main text of the title                    |   Yes    |\n| **left**  | String |      A string that gets shown on the left side of the menu      |    No    |\n| **right** | String |   A string that gets displayed on the right side of the menu    |    No    |\n| **icon**  | String | An icon that gets shown in the toolbar if this item is selected |    No    |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/toolbars-and-globals.md","loc":{"lines":{"from":88,"to":98}}}}],["559",{"pageContent":"Consuming globals from within a story\n\nWe recommend consuming globals from within a decorator and define a global setting for all stories.\n\nBut we're aware that sometimes it's more beneficial to use toolbar options on a per-story basis.\n\nUsing the example above, you can modify any story to retrieve the **Locale** `global` from the story context:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/my-component-story-use-globaltype.js.mdx',\n    'react/my-component-story-use-globaltype.ts.mdx',\n    'vue/my-component-story-use-globaltype.js.mdx',\n    'vue/my-component-story-use-globaltype.ts.mdx',\n    'angular/my-component-story-use-globaltype.ts.mdx',\n    'svelte/my-component-story-use-globaltype.js.mdx',\n    'web-components/my-component-story-use-globaltype.js.mdx',\n    'web-components/my-component-story-use-globaltype.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"essentials/toolbars-and-globals#snippet-my-component-story-use-globaltype\"\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/toolbars-and-globals.md","loc":{"lines":{"from":100,"to":127}}}}],["560",{"pageContent":"<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 In Storybook 6.0, if you set the global option `passArgsFirst: false` for backward compatibility, the story context is passed as the first argument:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/my-component-story-use-globaltype-backwards-compat.js.mdx',\n    'vue/my-component-story-use-globaltype-backwards-compat.js.mdx',\n    'angular/my-component-story-use-globaltype-backwards-compat.ts.mdx',\n    'svelte/my-component-story-use-globaltype-backwards-compat.js.mdx',\n    'web-components/my-component-story-use-globaltype-backwards-compat.js.mdx',\n    'web-components/my-component-story-use-globaltype-backwards-compat.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/toolbars-and-globals.md","loc":{"lines":{"from":127,"to":148}}}}],["561",{"pageContent":"Consuming globals from within an addon\n\nIf you're working on a Storybook addon and need to retrieve globals, you can do so. The `@storybook/manager-api` package provides a hook for this scenario. You can use the [`useGlobals()`](../addons/addons-api.md#useglobals) hook to retrieve any globals you want.\n\nUsing the ThemeProvider example above, you could expand it to display which theme is active inside a panel as such:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/addon-consume-globaltype.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/toolbars-and-globals.md","loc":{"lines":{"from":150,"to":164}}}}],["562",{"pageContent":"Updating globals from within an addon\n\nIf you're working on a Storybook addon that needs to update the global and refreshes the UI, you can do so. As mentioned previously, the `@storybook/manager-api` package provides the necessary hook for this scenario. You can use the `updateGlobals` function to update any global values you need.\n\nAlso, you can use both `@storybook/addons` and `@storybook/core-events` packages together to trigger the refresh.\n\nFor example, if you were working on a [toolbar addon](../addons/addon-types.md#toolbars), and you want to refresh the UI and update the global once the user clicks on a button:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/addon-consume-and-update-globaltype.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/toolbars-and-globals.md","loc":{"lines":{"from":166,"to":182}}}}],["563",{"pageContent":"---\ntitle: 'Viewport'\n---\n\n<YouTubeCallout id=\"uydF1ltw7-g\" title=\"Stop resizing your browser — Storybook viewport\" />\n\nThe Viewport toolbar item allows you to adjust the dimensions of the iframe your story is rendered in. It makes it easy to develop responsive UIs.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"addon-viewports-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/viewport.md","loc":{"lines":{"from":1,"to":14}}}}],["564",{"pageContent":"Configuration\n\nOut of the box, the Viewport addon offers you a standard set of viewports that you can use.\n\nIf you want to change the default set of viewports, you can set the global `parameters.viewport` [parameter](../writing-stories/parameters.md) in your [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-change-viewports.js.mdx',\n    'common/storybook-preview-change-viewports.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThe viewport global can take an object with the following keys:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/viewport.md","loc":{"lines":{"from":16,"to":33}}}}],["565",{"pageContent":"<!-- prettier-ignore-end -->\n\nThe viewport global can take an object with the following keys:\n\n| Field               |  Type   |                Description                | Default Value  |\n| ------------------- | :-----: | :---------------------------------------: | :------------: |\n| **defaultViewport** | String  |         Sets the default viewport         | `'responsive'` |\n| **disable**         | Boolean |           Disables the viewport           |      N/A       |\n| **viewports**       | Object  | The configuration object for the viewport |      `{}`      |\n\nThe viewports object needs the following keys:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/viewport.md","loc":{"lines":{"from":33,"to":43}}}}],["566",{"pageContent":"The viewports object needs the following keys:\n\n| Field      |  Type  | Description                                          |    Example values    |\n| ---------- | :----: | :--------------------------------------------------- | :------------------: |\n| **name**   | String | Name for the viewport                                |    `'Responsive'`    |\n| **styles** | Object | Sets Inline styles to be applied to the story        | `{width:0,height:0}` |\n| **type**   | String | Type of the device (e.g. desktop, mobile, or tablet) |      `desktop`       |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/viewport.md","loc":{"lines":{"from":43,"to":49}}}}],["567",{"pageContent":"Use a detailed set of devices\n\nBy default, Storybook uses a [minimal set of viewports](https://github.com/storybookjs/storybook/blob/next/code/addons/viewport/src/defaults.ts#L167) to get you started. But you're not restricted to these. The addon offers a more granular list of devices that you can use.\n\nChange your [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering) to the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-granular-viewports.js.mdx',\n    'common/storybook-preview-granular-viewports.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nStart your Storybook, and you'll see the new devices that you can use.\n\nSee [here](https://github.com/storybookjs/storybook/blob/master/addons/viewport/src/defaults.ts#L3) the complete list of devices and their configurations.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/viewport.md","loc":{"lines":{"from":51,"to":70}}}}],["568",{"pageContent":"Add new devices\n\nIf you have either a specific viewport or a list of viewports that you need to use, you can modify your [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering) file and include them:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-viewport-add-devices.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nMake the following change to use them in your Storybook:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-viewport-use-new-devices.js.mdx',\n    'common/storybook-preview-viewport-use-new-devices.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nOnce you start Storybook, you'll see your new viewports and devices.\n\nIf you need, you can also add these two to another list of viewports.\n\nFor instance, if you want to use these two with the minimal set of viewports, you can do it like so:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/viewport.md","loc":{"lines":{"from":72,"to":105}}}}],["569",{"pageContent":"If you need, you can also add these two to another list of viewports.\n\nFor instance, if you want to use these two with the minimal set of viewports, you can do it like so:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-merge-viewports.js.mdx',\n    'common/storybook-preview-merge-viewports.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nBoth viewports (`Kindle Fire 2` and `Kindle Fire HD`) will feature in the list of devices by merging them into the [`MINIMAL_VIEWPORTS`](https://github.com/storybookjs/storybook/blob/next/code/addons/viewport/src/defaults.ts#L167).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/viewport.md","loc":{"lines":{"from":105,"to":120}}}}],["570",{"pageContent":"Configuring per component or story\n\nThere are cases where it's not practical for you to use a specific visual viewport on a global scale, and you need it to adjust it to an individual story.\n\nUpdate your story through [parameters](../writing-stories/parameters.md) to include your viewports at a component level or for a specific story:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/my-component-story-configure-viewports.js.mdx',\n    'react/my-component-story-configure-viewports.ts.mdx',\n    'vue/my-component-story-configure-viewports.js.mdx',\n    'vue/my-component-story-configure-viewports.ts.mdx',\n    'angular/my-component-story-configure-viewports.ts.mdx',\n    'web-components/my-component-story-configure-viewports.js.mdx',\n    'web-components/my-component-story-configure-viewports.ts.mdx',\n    'svelte/my-component-story-configure-viewports.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"essentials/viewport#snippet-my-component-story-configure-viewports\"\n/>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/viewport.md","loc":{"lines":{"from":122,"to":143}}}}],["571",{"pageContent":"<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/viewport.md","loc":{"lines":{"from":143,"to":143}}}}],["572",{"pageContent":"Keyboard shortcuts\n\n- Previous viewport: <kbd>shift</kbd> + <kbd>v</kbd>\n- Next viewport: <kbd>v</kbd>\n- Reset viewport: <kbd>alt</kbd> + <kbd>v</kbd>\n\nIf you need, you can edit them on the shortcuts page.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/essentials/viewport.md","loc":{"lines":{"from":253,"to":259}}}}],["573",{"pageContent":"---\ntitle: 'Frequently Asked Questions'\n---\n\nHere are some answers to frequently asked questions. If you have a question, you can ask it by opening an issue on the [Storybook Repository](https://github.com/storybookjs/storybook/).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":1,"to":5}}}}],["574",{"pageContent":"- [How can I opt-out of Angular Ivy?](#how-can-i-opt-out-of-angular-ivy)\n- [How can I opt-out of Angular ngcc?](#how-can-i-opt-out-of-angular-ngcc)\n- [How can I run coverage tests with Create React App and leave out stories?](#how-can-i-run-coverage-tests-with-create-react-app-and-leave-out-stories)\n- [I see `ReferenceError: React is not defined` when using Storybook with Next.js](#i-see-referenceerror-react-is-not-defined-when-using-storybook-with-nextjs)\n- [How do I setup Storybook to share Webpack configuration with Next.js?](#how-do-i-setup-storybook-to-share-webpack-configuration-with-nextjs)\n- [How do I setup React Fast Refresh with Storybook?](#how-do-i-setup-react-fast-refresh-with-storybook)\n- [How do I setup the new React Context Root API with Storybook?](#how-do-i-setup-the-new-react-context-root-api-with-storybook)\n- [Why is there no addons channel?](#why-is-there-no-addons-channel)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":7,"to":14}}}}],["575",{"pageContent":"- [How do I setup the new React Context Root API with Storybook?](#how-do-i-setup-the-new-react-context-root-api-with-storybook)\n- [Why is there no addons channel?](#why-is-there-no-addons-channel)\n- [Why aren't Controls visible in the Canvas panel but visible in Docs?](#why-arent-controls-visible-in-the-canvas-panel-but-visible-in-docs)\n- [Why aren't the addons working in a composed Storybook?](#why-arent-the-addons-working-in-a-composed-storybook)\n- [Which community addons are compatible with the latest version of Storybook?](#which-community-addons-are-compatible-with-the-latest-version-of-storybook)\n- [Is it possible to browse the documentation for past versions of Storybook?](#is-it-possible-to-browse-the-documentation-for-past-versions-of-storybook)\n- [What icons are available for my toolbar or my addon?](#what-icons-are-available-for-my-toolbar-or-my-addon)\n- [I see a \"No Preview\" error with a Storybook production build](#i-see-a-no-preview-error-with-a-storybook-production-build)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":14,"to":21}}}}],["576",{"pageContent":"- [I see a \"No Preview\" error with a Storybook production build](#i-see-a-no-preview-error-with-a-storybook-production-build)\n- [Can I use Storybook with Vue 3?](#can-i-use-storybook-with-vue-3)\n- [Is snapshot testing with Storyshots supported for Vue 3?](#is-snapshot-testing-with-storyshots-supported-for-vue-3)\n- [Why aren't my code blocks highlighted with Storybook MDX](#why-arent-my-code-blocks-highlighted-with-storybook-mdx)\n- [Why aren't my MDX 2 stories working in Storybook?](#why-arent-my-mdx-2-stories-working-in-storybook)\n- [Why are my mocked GraphQL queries failing with Storybook's MSW addon?](#why-are-my-mocked-graphql-queries-failing-with-storybooks-msw-addon)\n- [Can I use other GraphQL providers with Storybook's MSW addon?](#can-i-use-other-graphql-providers-with-storybooks-msw-addon)\n- [Can I mock GraphQL mutations with Storybook's MSW addon?](#can-i-mock-graphql-mutations-with-storybooks-msw-addon)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":21,"to":28}}}}],["577",{"pageContent":"- [Can I mock GraphQL mutations with Storybook's MSW addon?](#can-i-mock-graphql-mutations-with-storybooks-msw-addon)\n- [How can my code detect if it is running in Storybook?](#how-can-my-code-detect-if-it-is-running-in-storybook)\n- [Why are my stories not showing up correctly when using certain characters?](#why-are-my-stories-not-showing-up-correctly-when-using-certain-characters)\n- [Why are the TypeScript examples and documentation using `as` for type safety?](#why-are-the-typescript-examples-and-documentation-using-as-for-type-safety)\n- [Why is Storybook's source loader returning undefined with curried functions?](#why-is-storybooks-source-loader-returning-undefined-with-curried-functions)\n- [Why are my args no longer displaying the default values?](#why-are-my-args-no-longer-displaying-the-default-values)\n- [Why isn't Storybook's test runner working?](#why-isnt-storybooks-test-runner-working)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":28,"to":34}}}}],["578",{"pageContent":"- [Why isn't Storybook's test runner working?](#why-isnt-storybooks-test-runner-working)\n- [How does Storybook handle environment variables?](#how-does-storybook-handle-environment-variables)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":34,"to":35}}}}],["579",{"pageContent":"How can I opt-out of Angular Ivy?\n\nIn case you are having trouble with Angular Ivy you can deactivate it in your `main.js`:\n\n```javascript\nexport default {\n  stories: [\n    /* ... */\n  ],\n  addons: [\n    /* ... */\n  ],\n  framework: {\n    name: '@storybook/angular',\n    options: {\n      enableIvy: false,\n    },\n  },\n};\n```\n\n### How can I opt-out of Angular ngcc?\n\nIn case you postinstall ngcc, you can disable it:\n\n```javascript\nexport default {\n  stories: [\n    /* ... */\n  ],\n  addons: [\n    /* ... */\n  ],\n  framework: {\n    name: '@storybook/angular',\n    options: {\n      enableNgcc: false,\n    },\n  },\n};\n```\n\nPlease report any issues related to Ivy in our [GitHub Issue Tracker](https://github.com/storybookjs/storybook/labels/app%3A%20angular) as the support for View Engine will be dropped in a future release of Angular.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":37,"to":79}}}}],["580",{"pageContent":"How can I run coverage tests with Create React App and leave out stories?\n\nCreate React App does not allow providing options to Jest in your `package.json`, however you can run `jest` with commandline arguments:\n\n```sh\nnpm test -- --coverage --collectCoverageFrom='[\"src/**/*.{js,jsx}\",\"!src/**/stories/*\"]'\n```\n\n<div class=\"aside\">\n💡 If you're using <a href=\"https://yarnpkg.com/\">yarn</a> as a package manager, you'll need to adjust the command accordingly.\n</div>\n\n### I see `ReferenceError: React is not defined` when using Storybook with Next.js\n\nNext automatically defines `React` for all of your files via a babel plugin. In Storybook, you can solve this either by:\n\n1.  Adding `import React from 'react'` to your component files.\n2.  Adding a `.babelrc` that includes [`babel-plugin-react-require`](https://www.npmjs.com/package/babel-plugin-react-require)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":81,"to":98}}}}],["581",{"pageContent":"How do I setup Storybook to share Webpack configuration with Next.js?\n\nYou can generally reuse Webpack rules by placing them in a file that is `require()`-ed from both your `next.config.js` and your `.storybook/main.js` files. For example:\n\n```js\nexport default {\n  webpackFinal: async (baseConfig) => {\n    const nextConfig = require('/path/to/next.config.js');\n\n    // merge whatever from nextConfig into the webpack config storybook will use\n    return { ...baseConfig, ...nextConfig };\n  },\n};\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":100,"to":113}}}}],["582",{"pageContent":"How do I setup React Fast Refresh with Storybook?\n\nFast refresh is an opt-in feature that can be used in Storybook React.\nThere are two ways that you can enable it, go ahead and pick one:\n\n- You can set a `FAST_REFRESH` environment variable in your `.env` file:\n\n```\nFAST_REFRESH=true\n```\n\n- Or you can set the following properties in your `.storybook/main.js` files:\n\n```js\nexport default {\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {\n      fastRefresh: true,\n    },\n  },\n};\n```\n\n<div class=\"aside\">\n💡 Fast Refresh only works in development mode with React 16.10 or higher.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":115,"to":141}}}}],["583",{"pageContent":"How do I setup the new React Context Root API with Storybook?\n\nIf your installed React Version equals or is higher than 18.0.0, the new React Root API is automatically used and the newest React [concurrent features](https://reactjs.org/docs/concurrent-mode-intro.html) can be used.\n\nYou can opt-out from the new React Root API by setting the following property in your `.storybook/main.js` file:\n\n```js\nexport default {\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {\n      legacyRootApi: true,\n    },\n  },\n};\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":143,"to":158}}}}],["584",{"pageContent":"Why is there no addons channel?\n\nA common error is that an addon tries to access the \"channel\", but the channel is not set. It can happen in a few different cases:\n\n1.  You're trying to access addon channel (e.g., by calling `setOptions`) in a non-browser environment like Jest. You may need to add a channel mock:\n\n    ```js\n    import { addons, mockChannel } from '@storybook/addons';\n\n    addons.setChannel(mockChannel());\n    ```\n\n2.  In React Native, it's a special case documented in [#1192](https://github.com/storybookjs/storybook/issues/1192)\n\n### Why aren't Controls visible in the Canvas panel but visible in Docs?\n\nIf you're adding Storybook's dependencies manually, make sure you include the [`@storybook/addon-controls`](https://www.npmjs.com/package/@storybook/addon-controls) dependency in your project and reference it in your `.storybook/main.js` as follows:\n\n```js\n// .storybook/main.js\n\nexport default {\n  addons: ['@storybook/addon-controls'],\n};\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":160,"to":184}}}}],["585",{"pageContent":"Why aren't the addons working in a composed Storybook?\n\nComposition is a new feature that we released with version 6.0, and there are still some limitations to it.\n\nFor now, the addons you're using in a composed Storybook will not work.\n\nWe're working on overcoming this limitation, and soon you'll be able to use them as if you are working with a non-composed Storybook.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":186,"to":192}}}}],["586",{"pageContent":"Which community addons are compatible with the latest version of Storybook?\n\nStarting with Storybook version 6.0, we've introduced some great features aimed at streamlining your development workflow.\n\nWith this, we would like to point out that if you plan on using addons created by our fantastic community, you need to consider that some of those addons might be working with an outdated version of Storybook.\n\nWe're actively working to provide a better way to address this situation, but in the meantime, we would ask for a bit of caution on your end so that you don't run into unexpected problems. Let us know by creating an issue in the [Storybook repo](https://github.com/storybookjs/storybook/issues) so that we can gather information and create a curated list with those addons to help not only you but the rest of the community.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":194,"to":200}}}}],["587",{"pageContent":"Is it possible to browse the documentation for past versions of Storybook?\n\nWith the release of version 6.0, we updated our documentation as well. That doesn't mean that the old documentation was removed. We kept it to help you with your Storybook migration process. Use the content from the table below in conjunction with our <a href=\"https://github.com/storybookjs/storybook/blob/next/MIGRATION.md\">migration guide</a> .\n\nWe're only covering versions 5.3 and 5.0 as they were important milestones for Storybook. If you want to go back in time a little more, you'll have to check the specific release in the monorepo.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":202,"to":206}}}}],["588",{"pageContent":"| Section          | Page                                         | Current Location                                                                                           | Version 5.3 location                                                                                                                                                                                                                                                 | Version 5.0 location                                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":208,"to":208}}}}],["589",{"pageContent":"| ---------------- | -------------------------------------------- | ---------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":209,"to":209}}}}],["590",{"pageContent":"| N/A              | Why Storybook                                | [See current documentation](./why-storybook.md)                                                            | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":210,"to":210}}}}],["591",{"pageContent":"| Get started      | Install                                      | [See current documentation](./get-started/install.md)                                                      | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/guides/quick-start-guide)                                                                                                                                     | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/guides/quick-start-guide)                         |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":211,"to":211}}}}],["592",{"pageContent":"|                  | What's a story                               | [See current documentation](./get-started/whats-a-story.md)                                                | [See versioned documentation for your framework](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/guides)                                                                                                                                    | [See versioned documentation for your framework](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/guides)                        |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":212,"to":212}}}}],["593",{"pageContent":"|                  | Browse Stories                               | [See current documentation](./get-started/browse-stories.md)                                               | [See versioned documentation for your framework](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/guides)                                                                                                                                    | [See versioned documentation for your framework](https://github.com/storybookjs/storybook/blob/release/5.0/docs/src/pages/guides)                        |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":213,"to":213}}}}],["594",{"pageContent":"|                  | Setup                                        | [See current documentation](./get-started/setup.md)                                                        | [See versioned documentation for your framework](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/guides)                                                                                                                                    | [See versioned documentation for your framework](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/guides)                        |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":214,"to":214}}}}],["595",{"pageContent":"| Write stories    | Introduction                                 | [See current documentation](./writing-stories/introduction.md)                                             | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/basics/writing-stories)                                                                                                                                       | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/basics/writing-stories)                           |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":215,"to":215}}}}],["596",{"pageContent":"|                  | Parameters                                   | [See current documentation](./writing-stories/parameters.md)                                               | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/basics/writing-stories/index.md#parameters)                                                                                                                   | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":216,"to":216}}}}],["597",{"pageContent":"|                  | Decorators                                   | [See current documentation](./writing-stories/decorators.md)                                               | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/basics/writing-stories/index.md#decorators)                                                                                                                   | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/basics/writing-stories/index.md#using-decorators) |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":217,"to":217}}}}],["598",{"pageContent":"|                  | Naming components and hierarchy              | [See current documentation](./writing-stories/naming-components-and-hierarchy.md)                          | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/basics/writing-stories)                                                                                                                                       | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/basics/writing-stories)                           |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":218,"to":218}}}}],["599",{"pageContent":"|                  | Build pages and screens                      | [See current documentation](./writing-stories/build-pages-with-storybook.md)                               | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":219,"to":219}}}}],["600",{"pageContent":"|                  | Stories for multiple components              | [See current documentation](./writing-stories/stories-for-multiple-components.md)                          | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":220,"to":220}}}}],["601",{"pageContent":"| Write docs       | Autodocs                                     | [See current documentation](./writing-docs/autodocs.md)                                                    | See versioned addon documentation                                                                                                                                                                                                                                    | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":221,"to":221}}}}],["602",{"pageContent":"|                  | MDX                                          | [See current documentation](./writing-docs/mdx.md)                                                         | See versioned addon documentation                                                                                                                                                                                                                                    | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":222,"to":222}}}}],["603",{"pageContent":"|                  | Doc Blocks                                   | [See current documentation](./writing-docs/doc-blocks.md)                                                  | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":223,"to":223}}}}],["604",{"pageContent":"|                  | Preview and build docs                       | [See current documentation](./writing-docs/build-documentation.md)                                         | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":224,"to":224}}}}],["605",{"pageContent":"| Testing          | Visual tests                                 | [See current documentation](./writing-tests/visual-testing.md)                                             | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/testing/automated-visual-testing)                                                                                                                             | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/testing/automated-visual-testing)                 |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":225,"to":225}}}}],["606",{"pageContent":"|                  | Accessibility tests                          | [See current documentation](./writing-tests/accessibility-testing.md)                                      | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":226,"to":226}}}}],["607",{"pageContent":"|                  | Interaction tests                            | [See current documentation](./writing-tests/interaction-testing.md)                                        | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/testing/interaction-testing)                                                                                                                                  | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/testing/interaction-testing)                      |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":227,"to":227}}}}],["608",{"pageContent":"|                  | Snapshot tests                               | [See current documentation](./writing-tests/snapshot-testing.md)                                           | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/testing/structural-testing)                                                                                                                                   | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/testing/structural-testing)                       |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":228,"to":228}}}}],["609",{"pageContent":"|                  | Import stories in tests                      | [See current documentation](./writing-tests/importing-stories-in-tests.md)                                 | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/testing/react-ui-testing)                                                                                                                                     | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/testing/react-ui-testing)                         |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":229,"to":229}}}}],["610",{"pageContent":"| Sharing          | Publish Storybook                            | [See current documentation](./sharing/publish-storybook.md)                                                | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/basics/exporting-storybook)                                                                                                                                   | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/basics/exporting-storybook)                       |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":230,"to":230}}}}],["611",{"pageContent":"|                  | Embed                                        | [See current documentation](./sharing/embed.md)                                                            | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":231,"to":231}}}}],["612",{"pageContent":"|                  | Composition                                  | [See current documentation](./sharing/storybook-composition.md)                                            | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":232,"to":232}}}}],["613",{"pageContent":"|                  | Package Composition                          | [See current documentation](./sharing/package-composition.md)                                              | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":233,"to":233}}}}],["614",{"pageContent":"| Essential addons | Controls                                     | [See current documentation](./essentials/controls.md)                                                      | Controls are specific to version 6.0 see [Knobs versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/addons/knobs)                                                                                                                     | Controls are specific to version 6.0 see [Knobs versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/addons/knobs)         |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":234,"to":234}}}}],["615",{"pageContent":"|                  | Actions                                      | [See current documentation](./essentials/actions.md)                                                       | [See addon versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/addons/actions)                                                                                                                                                        | [See addon versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/addons/actions)                                            |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":235,"to":235}}}}],["616",{"pageContent":"|                  | Viewport                                     | [See current documentation](./essentials/viewport.md)                                                      | [See addon versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/addons/viewport)                                                                                                                                                       | [See addon versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/addons/viewport)                                           |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":236,"to":236}}}}],["617",{"pageContent":"|                  | Backgrounds                                  | [See current documentation](./essentials/backgrounds.md)                                                   | [See addon versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/addons/backgrounds)                                                                                                                                                    | [See addon versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/addons/backgrounds)                                        |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":237,"to":237}}}}],["618",{"pageContent":"|                  | Toolbars and globals                         | [See current documentation](./essentials/toolbars-and-globals.md)                                          | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/basics/toolbar-guide)                                                                                                                                         | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":238,"to":238}}}}],["619",{"pageContent":"| Configure        | Overview                                     | [See current documentation](./configure/overview.md)                                                       | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/overview)                                                                                                                                      | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/basics/writing-stories)                           |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":239,"to":239}}}}],["620",{"pageContent":"|                  | Integration/Frameworks                       | [See current documentation](./configure/frameworks.md)                                                     | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":240,"to":240}}}}],["621",{"pageContent":"|                  | Integration/Framework support for frameworks | [See current documentation](./configure/frameworks-feature-support.md)                                     | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":241,"to":241}}}}],["622",{"pageContent":"|                  | Integration/Babel                            | [See current documentation](./configure/babel.md)                                                          | See versioned documentation [here](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/custom-babel-config)                                                                                                                      | See versioned documentation [here](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/custom-babel-config)          |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":242,"to":242}}}}],["623",{"pageContent":"|                  | Integration/Typescript                       | [See current documentation](./configure/typescript.md)                                                     | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/typescript-config)                                                                                                                             | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/typescript-config)                 |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":243,"to":243}}}}],["624",{"pageContent":"|                  | Integration/Styling and CSS                  | [See current documentation](./configure/styling-and-css.md)                                                | See versioned documentation                                                                                                                                                                                                                                          | See versioned documentation                                                                                                                              |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":244,"to":244}}}}],["625",{"pageContent":"|                  | Integration/Images and assets                | [See current documentation](./configure/images-and-assets.md)                                              | See versioned documentation                                                                                                                                                                                                                                          | See versioned documentation                                                                                                                              |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":245,"to":245}}}}],["626",{"pageContent":"|                  | Story rendering                              | [See current documentation](./configure/story-rendering.md)                                                | See versioned documentation [here](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/add-custom-head-tags) and [here](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/add-custom-body) | See versioned documentation [here](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/add-custom-head-tags)         |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":246,"to":246}}}}],["627",{"pageContent":"|                  | Story Layout                                 | [See current documentation](./configure/story-layout.md)                                                   | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":247,"to":247}}}}],["628",{"pageContent":"|                  | User Interface/Features and behavior         | [See current documentation](./configure/features-and-behavior.md)                                          | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/options-parameter)                                                                                                                             | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/options-parameter)                 |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":248,"to":248}}}}],["629",{"pageContent":"|                  | User Interface/Theming                       | [See current documentation](./configure/theming.md)                                                        | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/theming)                                                                                                                                       | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/theming)                           |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":249,"to":249}}}}],["630",{"pageContent":"|                  | User Interface/Sidebar & URLS                | [See current documentation](./configure/sidebar-and-urls.md)                                               | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/options-parameter)                                                                                                                             | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/options-parameter)                 |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":250,"to":250}}}}],["631",{"pageContent":"|                  | Environment variables                        | [See current documentation](./configure/environment-variables.md)                                          | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/env-vars)                                                                                                                                      | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/env-vars)                          |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":251,"to":251}}}}],["632",{"pageContent":"| Builders         | Introduction                                 | [See current documentation](./builders/overview.md)                                                        | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":252,"to":252}}}}],["633",{"pageContent":"|                  | Vite                                         | [See current documentation](./builders/vite.md)                                                            | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":253,"to":253}}}}],["634",{"pageContent":"|                  | Webpack                                      | [See current documentation](./builders/webpack.md)                                                         | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/custom-webpack-config/index.md)                                                                                                                | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/custom-webpack-config/index.md)    |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":254,"to":254}}}}],["635",{"pageContent":"|                  | Builder API                                  | [See current documentation](./builders/builder-api.md)                                                     | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":255,"to":255}}}}],["636",{"pageContent":"| Addons           | Introduction                                 | [See current documentation](./addons/introduction.md)                                                      | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/addons/writing-addons)                                                                                                                                        | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/addons/writing-addons)                            |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":256,"to":256}}}}],["637",{"pageContent":"|                  | Install addons                               | [See current documentation](./addons/install-addons.md)                                                    | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/addons/using-addons/)                                                                                                                                         | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/addons/using-addons/)                             |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":257,"to":257}}}}],["638",{"pageContent":"|                  | Writing Addons                               | [See current documentation](./addons/writing-addons.md)                                                    | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/addons/writing-addons)                                                                                                                                        | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/addons/writing-addons)                            |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":258,"to":258}}}}],["639",{"pageContent":"|                  | Writing Presets                              | [See current documentation](./addons/writing-presets.md)                                                   | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/presets/writing-presets)                                                                                                                                      | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":259,"to":259}}}}],["640",{"pageContent":"|                  | Addons Knowledge Base                        | [See current documentation](./addons/addon-knowledge-base.md)                                              | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/addons/writing-addons)                                                                                                                                        | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/addons/writing-addons)                            |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":260,"to":260}}}}],["641",{"pageContent":"|                  | Types of addons                              | [See current documentation](./addons/addon-types.md)                                                       | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":261,"to":261}}}}],["642",{"pageContent":"|                  | Addons API                                   | [See current documentation](./addons/addons-api.md)                                                        | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/addons/api)                                                                                                                                                   | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/addons/api)                                       |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":262,"to":262}}}}],["643",{"pageContent":"| API              | @storybook/blocks/ArgTypes                   | [See current documentation](./api/doc-block-argtypes.md)                                                   | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":263,"to":263}}}}],["644",{"pageContent":"|                  | @storybook/blocks/Canvas                     | [See current documentation](./api/doc-block-canvas.md)                                                     | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":264,"to":264}}}}],["645",{"pageContent":"|                  | @storybook/blocks/ColorPalette               | [See current documentation](./api/doc-block-colorpalette.md)                                               | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":265,"to":265}}}}],["646",{"pageContent":"|                  | @storybook/blocks/Controls                   | [See current documentation](./api/doc-block-controls.md)                                                   | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":266,"to":266}}}}],["647",{"pageContent":"|                  | @storybook/blocks/Description                | [See current documentation](./api/doc-description.md)                                                      | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":267,"to":267}}}}],["648",{"pageContent":"|                  | @storybook/blocks/IconGallery                | [See current documentation](./api/doc-block-icongallery.md)                                                | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":268,"to":268}}}}],["649",{"pageContent":"|                  | @storybook/blocks/Markdown                   | [See current documentation](./api/doc-block-markdown.md)                                                   | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":269,"to":269}}}}],["650",{"pageContent":"|                  | @storybook/blocks/Meta                       | [See current documentation](./api/doc-block-meta.md)                                                       | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":270,"to":270}}}}],["651",{"pageContent":"|                  | @storybook/blocks/Primary                    | [See current documentation](./api/doc-block-primary.md)                                                    | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":271,"to":271}}}}],["652",{"pageContent":"|                  | @storybook/blocks/Source                     | [See current documentation](./api/doc-block-source.md)                                                     | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":272,"to":272}}}}],["653",{"pageContent":"|                  | @storybook/blocks/Stories                    | [See current documentation](./api/doc-block-stories.md)                                                    | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":273,"to":273}}}}],["654",{"pageContent":"|                  | @storybook/blocks/Story                      | [See current documentation](./api/doc-block-story.md)                                                      | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":274,"to":274}}}}],["655",{"pageContent":"|                  | @storybook/blocks/Subtitle                   | [See current documentation](./api/doc-block-subtitle.md)                                                   | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":275,"to":275}}}}],["656",{"pageContent":"|                  | @storybook/blocks/Title                      | [See current documentation](./api/doc-block-title.md)                                                      | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":276,"to":276}}}}],["657",{"pageContent":"|                  | @storybook/blocks/Typeset                    | [See current documentation](./api/doc-block-typeset.md)                                                    | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":277,"to":277}}}}],["658",{"pageContent":"|                  | @storybook/blocks/Unstyled                   | [See current documentation](./api/doc-block-unstyled.md)                                                   | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":278,"to":278}}}}],["659",{"pageContent":"|                  | @storybook/blocks/useOf                      | [See current documentation](./api/doc-block-useof.md)                                                      | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":279,"to":279}}}}],["660",{"pageContent":"|                  | Stories/Component Story Format               | [See current documentation](./api/csf.md)                                                                  | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/formats/component-story-format)                                                                                                                               | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":280,"to":280}}}}],["661",{"pageContent":"|                  | Stories/StoriesOF format (see note below)    | [See current documentation](https://github.com/storybookjs/storybook/blob/main/lib/core/docs/storiesOf.md) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/formats/storiesof-api)                                                                                                                                        | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":281,"to":281}}}}],["662",{"pageContent":"|                  | Frameworks                                   | [See current documentation](./api/new-frameworks.md)                                                       | Non existing feature or undocumented                                                                                                                                                                                                                                 | Non existing feature or undocumented                                                                                                                     |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":282,"to":282}}}}],["663",{"pageContent":"|                  | CLI options                                  | [See current documentation](./api/cli-options.md)                                                          | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/cli-options)                                                                                                                                   | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/cli-options)                       |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":283,"to":283}}}}],["664",{"pageContent":"<div class=\"aside\">\nWith the release of version 5.3, we've updated how you can write your stories more compactly and easily. It doesn't mean that the <code>storiesOf</code> format has been removed. For the time being, we're still supporting it, and we have documentation for it. But be advised that this is bound to change in the future.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":285,"to":287}}}}],["665",{"pageContent":"What icons are available for my toolbar or my addon?\n\nWith the [`@storybook/components`](https://www.npmjs.com/package/@storybook/components) package, you get a set of icons that you can use to customize your UI. Use the table below as a reference while writing your addon or defining your Storybook global types.\nGo through this [story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-icon--labels) to see how the icons look.\n\n<iframe src=\"https://main--5a375b97f4b14f0020b0cda3.chromatic.com/iframe.html?args=&id=basics-icon--labels&viewMode=story&shortcuts=false&singleStory=true\" width=\"100%\" height=\"600\"></iframe>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":289,"to":294}}}}],["666",{"pageContent":"I see a \"No Preview\" error with a Storybook production build\n\nIf you're using the `serve` package to verify your production build of Storybook, you'll get that error. It relates to how `serve` handles rewrites. For instance, `/iframe.html` is rewritten into `/iframe`, and you'll get that error.\n\nWe recommend that you use [http-server](https://www.npmjs.com/package/http-server) instead and use the following command to preview Storybook:\n\n```shell\nnpx http-server storybook-static\n```\n\n<div class=\"aside\">\nSuppose you don't want to run the command above frequently. Add <code>http-server</code> as a development dependency and create a new script to preview your production build of Storybook.\n</div>\n\n### Can I use Storybook with Vue 3?\n\nYes, with the release of version 6.2, Storybook now includes support for Vue 3. See the [install page](./get-started/install.md) for instructions.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":296,"to":312}}}}],["667",{"pageContent":"Can I use Storybook with Vue 3?\n\nYes, with the release of version 6.2, Storybook now includes support for Vue 3. See the [install page](./get-started/install.md) for instructions.\n\n### Is snapshot testing with Storyshots supported for Vue 3?\n\nYes, with the release of version 6.2, the [`Storyshots addon`](https://www.npmjs.com/package/@storybook/addon-storyshots) will automatically detect Vue 3 projects.\n\nIf you run into a situation where this is not the case, you can adjust the `config` object and manually specify the framework (e.g., `vue3`).\n\nSee our documentation on how to customize the [Storyshots configuration](./writing-tests/snapshot-testing.md).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":312,"to":322}}}}],["668",{"pageContent":"Why aren't my code blocks highlighted with Storybook MDX\n\nOut of the box, Storybook provides syntax highlighting for a set of languages (e.g., Javascript, Markdown, CSS, HTML, Typescript, GraphQL) you can use with your code blocks. Currently, there's a know limitation when you try and register a custom language to get syntax highlighting. We're working on a fix for this And will update this section once it's available.\n\n### Why aren't my MDX 2 stories working in Storybook?\n\nMDX 2 introduced some changes to how the code is rendered. For example, if you enabled it in your Storybook and you have the following code block:\n\n```\n<style>{`\n  .class1 {\n    ...\n  }\n\n  .class2 {\n    ...\n  }\n`}</style>\n\n```\n\nYou'll need to update it to make it compatible with MDX 2.\n\n```\n<style>\n  {`\n    .class1 {\n      ...\n    }\n\n    .class2 {\n      ...\n    }\n  `}\n</style>\n```\n\nSee the following [issue](https://github.com/mdx-js/mdx/issues/1945) for more information.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":324,"to":361}}}}],["669",{"pageContent":"Why are my mocked GraphQL queries failing with Storybook's MSW addon?\n\nIf you're working with Vue 3, you'll need to install [`@vue/apollo-composable`](https://www.npmjs.com/package/@vue/apollo-composable). With Svelte, you'll need to install [`@rollup/plugin-replace`](https://www.npmjs.com/package/@rollup/plugin-replace) and update your `rollup.config` file to the following:\n\n```js\n// rollup.config\n\n// Boilerplate imports\n\nimport replace from '@rollup/plugin-replace';\nconst production = !process.env.ROLLUP_WATCH;\n\n// Remainder rollup.config implementation\n\nexport default {\n  input: 'src/main.js',\n  output: {\n    sourcemap: true,\n    format: 'iife',\n    name: 'app',\n    file: 'public/build/bundle.js',\n  },\n  plugins: [\n    // Other plugins\n\n    // Configures the replace plugin to allow GraphQL Queries to work properly\n    replace({\n      'process.env.NODE_ENV': JSON.stringify('development'),\n    }),\n};","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":363,"to":392}}}}],["670",{"pageContent":"With Angular, the most common issue is the placement of the `mockServiceWorker.js` file. Use this [example](https://github.com/mswjs/examples/tree/master/examples/rest-angular/) as a point of reference.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":395,"to":395}}}}],["671",{"pageContent":"Can I use other GraphQL providers with Storybook's MSW addon?\n\nYes, check the [addon's examples](https://github.com/mswjs/msw-storybook-addon/tree/master/packages/docs/src/demos) to learn how to integrate different providers.\n\n### Can I mock GraphQL mutations with Storybook's MSW addon?\n\nNo, currently, the MSW addon only has support for GraphQL queries. If you're interested in including this feature, open an issue in the [MSW addon repository](https://github.com/mswjs/msw-storybook-addon) and follow up with the maintainer.\n\n### How can my code detect if it is running in Storybook?\n\nYou can do this by checking for the `IS_STORYBOOK` global variable, which will equal `true` when running in Storybook. The environment variable `process.env.STORYBOOK` is also set to `true`.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":397,"to":407}}}}],["672",{"pageContent":"Why are my stories not showing up correctly when using certain characters?\n\nStorybook allows you to use most characters while naming your stories. Still, specific characters (e.g., `#`) can lead to issues when Storybook generates the internal identifier for the story, leading to collisions and incorrectly outputting the correct story. We recommend using such characters sparsely.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":409,"to":411}}}}],["673",{"pageContent":"Why are the TypeScript examples and documentation using `as` for type safety?\n\nWe're aware that the default Typescript story construct might seem outdated and could potentially introduce a less than ideal way of handling type safety and strictness and could be rewritten as such:\n\n```ts\n// Button.stories.ts | tsx\n\nimport React from 'react';\nimport type { ComponentStory, ComponentMeta } from '@storybook/react';\n\nconst StoryMeta: ComponentMeta<typeof Button> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/react/configure/overview#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n};\n\nexport default meta;","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":413,"to":432}}}}],["674",{"pageContent":"Although valid, it introduces additional boilerplate code to the story definition. Instead, we're working towards implementing a safer mechanism based on what's currently being discussed in the following [issue](https://github.com/microsoft/TypeScript/issues/7481). Once the feature is released, we'll migrate our existing examples and documentation accordingly.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":435,"to":435}}}}],["675",{"pageContent":"Why is Storybook's source loader returning undefined with curried functions?\n\nThis is a known issue with Storybook. If you're interested in getting it fixed, open an issue with a [working reproduction](./contribute/how-to-reproduce.md) so that it can be triaged and fixed in future releases.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":437,"to":439}}}}],["676",{"pageContent":"Why are my args no longer displaying the default values?\n\nBefore version 6.3, unset args were set to the `argTypes.defaultValue` if specified or inferred from the component's properties (e.g., React's prop types, Angular inputs, Vue props). Starting with version 6.3, Storybook no longer infers default values but instead defines the arg's value as `undefined` when unset, allowing the framework to supply its default value.\n\nIf you are using `argTypes.defaultValue` to fix the above, you no longer need to, and you can safely remove it from your stories.\n\nAdditionally, suppose you were using `argTypes.defaultValue` or relying on inference to set a default value for an arg. In that case, you should define the arg's value at the component level instead:\n\n```js\n// MyComponent.stories.js\n\nexport default {\n  component: MyComponent,\n  args: {\n    //👇 Defining the arg's value at the component level.\n    text: 'Something',\n  },\n};","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":441,"to":458}}}}],["677",{"pageContent":"For Storybook's Docs, you can manually configure the displayed value by configuring the `table.defaultValue` setting:\n\n```js\n// MyComponent.stories.js\n\nexport default {\n  component: MyComponent,\n  argTypes: {\n    //👇 Defining the arg's display value in docs.\n    text: {\n      table: { defaultValue: { summary: 'SomeType<T>' } },\n    },\n  },\n};\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":461,"to":475}}}}],["678",{"pageContent":"Why isn't Storybook's test runner working?\n\nThere's an issue with Storybook's test runner and the latest version of Jest (i.e., version 28), which prevents it from running effectively. As a workaround, you can downgrade Jest to the previous stable version (i.e., version 27), and you'll be able to run it. See the following [issue](https://github.com/storybookjs/test-runner/issues/99) for more information.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":477,"to":479}}}}],["679",{"pageContent":"How does Storybook handle environment variables?\n\nStorybook has built-in support for [environment variables](./configure/environment-variables.md). By default, environment variables are only available in Node.js code and are not available in the browser as some variables should be kept secret (e.g., API keys) and **not** exposed to anyone visiting the published Storybook.\n\nTo expose a variable, you must preface its name with `STORYBOOK_`. So `STORYBOOK_API_URL` will be available in browser code but `API_KEY` will not. Additionally you can also customize which variables are exposed by setting the [`env`](./configure/environment-variables.md#using-storybook-configuration) field in the `.storybook/main.js` file.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":481,"to":485}}}}],["680",{"pageContent":"Variables are set when JavaScript is compiled so when the development server is started or you build your Storybook. Environment variable files should not be committed to Git as they often contain secrets which are not safe to add to Git. Instead, add `.env.*` to your `.gitignore` file and set up the environment variables manually on your hosting provider (e.g., [GitHub](https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository)).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/faq.md","loc":{"lines":{"from":487,"to":487}}}}],["681",{"pageContent":"---\ntitle: 'Browse Stories'\n---\n\nLast chapter, we learned that stories correspond with discrete component states. This chapter demonstrates how to use Storybook as a workshop for building components.\n\n## Sidebar and Canvas\n\nA `*.stories.js` file defines all the stories for a component. Each story has a corresponding sidebar item. When you click on a story, it renders in the Canvas an isolated preview iframe.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"example-browse-all-stories-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n\nNavigate between stories by clicking on them in the sidebar. Try the sidebar search to find a story by name.\n\nOr use keyboard shortcuts. Click on the Storybook's menu to see the list of shortcuts available.\n\n\n![Storybook keyboard shortcuts examples](./storybook-keyboard-shortcuts.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/browse-stories.md","loc":{"lines":{"from":1,"to":23}}}}],["682",{"pageContent":"Toolbar\n\nStorybook ships with time-saving tools built-in. The toolbar contains tools that allow you to adjust how the story renders in the Canvas:\n\n- 🔍 Zooming visually scales the component so you can check the details.\n- 🖼 Background changes the rendered background behind your component so you can verify how your component renders in different visual contexts.\n- 📐 Grid renders your component on top of a grid layout so you can verify if your component is aligned correctly.\n- 📏 Measure toggles a measurement overlay to help you inspect the dimensions of components.\n- 🎚️ Outline displays the component's bounding box so you can verify if your component is positioned correctly.\n- 📱 Viewport renders the component in a variety of dimensions and orientations. It’s ideal for checking the responsiveness of components.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"toolbar-walkthrough-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/browse-stories.md","loc":{"lines":{"from":25,"to":41}}}}],["683",{"pageContent":"<video autoPlay muted playsInline loop>\n  <source\n    src=\"toolbar-walkthrough-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n\nThe [“Docs”](../writing-docs/introduction.md) page displays auto-generated documentation for components (inferred from the source code). Usage documentation is helpful when sharing reusable components with your team, for example, in an application.\n\n![Storybook keyboard shortcuts examples](./mdx-example.png)\n\nThe toolbar is customizable. You can use [globals](../essentials/toolbars-and-globals.md) to quickly toggle themes and languages. Or install Storybook toolbar [addons](../configure/storybook-addons.md) from the community to enable advanced workflows.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/browse-stories.md","loc":{"lines":{"from":41,"to":52}}}}],["684",{"pageContent":"Addons\n\nAddons are plugins that extend Storybook's core functionality. You can find them in the addons panel, a reserved place in the Storybook UI below the Canvas. Each tab shows the generated metadata, logs, or static analysis for the selected story by the addon.\n\n![Storybook addon examples](./addons.png)\n\n- **Controls** allows you to interact with a component’s args (inputs) dynamically. Experiment with alternate configurations of the component to discover edge cases.\n- **Actions** help you verify interactions produce the correct outputs via callbacks. For instance, if you view the “Logged In” story of the `Header` component, we can verify that clicking the “Log out” button triggers the `onLogout` callback, which would be provided by the component that made use of the Header.\n- **Interactions** provides a helpful user interface for debugging [interaction tests](../writing-tests/interaction-testing.md) with the `play` function.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/browse-stories.md","loc":{"lines":{"from":54,"to":62}}}}],["685",{"pageContent":"<video autoPlay muted playsInline loop>\n  <source\n    src=\"addons-walkthrough-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n\nStorybook is extensible. Our rich ecosystem of addons helps you test, document, and optimize your stories. You can also create an addon to satisfy your workflow requirements. Read more in the [addons section](../addons/introduction.md).\n\nIn the next chapter, we'll get your components rendering in Storybook so you can use it to supercharge component development.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/browse-stories.md","loc":{"lines":{"from":64,"to":73}}}}],["686",{"pageContent":"Use stories to build UIs\n\nWhen building apps, one of the biggest challenges is to figure out if a piece of UI already exists in your codebase and how to use it for the new feature you're building.\n\nStorybook catalogues all your components and their use cases. Therefore, you can quickly browse it to find what you're looking for.\n\nHere's what the workflow looks like:\n\n- 🗃 Use the sidebar to find a suitable component\n- 👀 Review its stories to pick a variant that suits your needs\n- 📝 Copy/paste the story definition into your app code and wire it up to data\n\nYou can access the story definition from the stories file or make it available in your published Storybook using the [Storysource addon](https://storybook.js.org/addons/@storybook/addon-storysource/) or the [Docs addon](../api/doc-block-source).\n\n![Docblock source](./docblock-source.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/browse-stories.md","loc":{"lines":{"from":75,"to":89}}}}],["687",{"pageContent":"---\ntitle: 'Conclusion'\n---\n\nCongratulations! You learned the basics. Storybook is the most popular tool for UI component development and documentation. You’ll be able to transfer these skills to thousands of companies that use Storybook to build UIs including GitHub, Airbnb, and Stripe.\n\nIf you’d like to learn workflows for building app UIs with Storybook, check out our in-depth guides over at the [tutorials](https://storybook.js.org/tutorials/) page. Continue reading for detailed information on how to use Storybook APIs.\n\n- [How to write stories](../writing-stories/introduction.md)\n- [How to document components and design systems](../writing-docs/introduction.md)\n- [View example Storybooks from leading companies](https://storybook.js.org/showcase)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/conclusion.md","loc":{"lines":{"from":1,"to":11}}}}],["688",{"pageContent":"---\ntitle: 'Install Storybook'\n---\n\nUse the Storybook CLI to install it in a single command. Run this inside your _existing project’s_ root directory:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'common/init-command.npx.js.mdx',\n   'common/init-command.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\nIf you run into issues with the installation, check the [Troubleshooting section](#troubleshooting) below for guidance on how to solve it.\n\n</div>\n\n<details>\n\n<summary><code>storybook init</code> is not made for empty projects</summary>\n\nStorybook needs to be installed into a project that is already set up with a framework. It will not work on an empty project. There are many ways to bootstrap an app in a given framework, including:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/install.md","loc":{"lines":{"from":1,"to":28}}}}],["689",{"pageContent":"Storybook needs to be installed into a project that is already set up with a framework. It will not work on an empty project. There are many ways to bootstrap an app in a given framework, including:\n\n- 📦 [Create an Angular Workspace](https://angular.io/cli/new)\n- 📦 [Create React App](https://reactjs.org/docs/create-a-new-react-app.html)\n- 📦 [Create a Vue App](https://vuejs.org/guide/quick-start.html)\n- 📦 [Ember CLI](https://guides.emberjs.com/release/getting-started/quick-start/)\n- 📦 [Vite CLI](https://vitejs.dev/guide/#scaffolding-your-first-vite-project)\n- Or any other tooling available.\n\n</details>\n\nStorybook will look into your project's dependencies during its install process and provide you with the best configuration available.\n\nThe command above will make the following changes to your local environment:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/install.md","loc":{"lines":{"from":28,"to":41}}}}],["690",{"pageContent":"The command above will make the following changes to your local environment:\n\n- 📦 Install the required dependencies.\n- 🛠 Setup the necessary scripts to run and build Storybook.\n- 🛠 Add the default Storybook configuration.\n- 📝 Add some boilerplate stories to get you started.\n- 📡 Set up telemetry to help us improve Storybook. Read more about it [here](../configure/telemetry.md).\n\nDepending on your framework, first, build your app and then check that everything worked by running:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/storybook-run-dev.with-builder.js.mdx',\n    'common/storybook-run-dev.npm.js.mdx',\n    'common/storybook-run-dev.yarn.js.mdx',\n    'common/storybook-run-dev.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nIt will start Storybook locally and output the address. Depending on your system configuration, it will automatically open the address in a new browser tab, and you'll be greeted by a welcome screen.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/install.md","loc":{"lines":{"from":41,"to":64}}}}],["691",{"pageContent":"It will start Storybook locally and output the address. Depending on your system configuration, it will automatically open the address in a new browser tab, and you'll be greeted by a welcome screen.\n\n![Storybook welcome screen](./example-welcome.png)\n\nThere are some noteworthy items here:\n\n- A collection of useful links for more in-depth configuration and customization options you have at your disposal.\n- A second set of links for you to expand your Storybook knowledge and get involved with the ever-growing Storybook community.\n- A few example stories to get you started.\n\n<details>\n<summary><h4 id=\"troubleshooting\">Troubleshooting</h4></summary>\n\nBelow are some of the most common installation issues and instructions on how to solve them.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/install.md","loc":{"lines":{"from":64,"to":79}}}}],["692",{"pageContent":"<details>\n<summary><h4 id=\"troubleshooting\">Troubleshooting</h4></summary>\n\nBelow are some of the most common installation issues and instructions on how to solve them.\n\n<!-- prettier-ignore-start -->\n\n<FeatureSnippets\n  paths={[\n   'get-started/installation-problems/angular.mdx',\n   'get-started/installation-problems/ember.mdx',\n   'get-started/installation-problems/html.mdx',\n   'get-started/installation-problems/preact.mdx',\n   'get-started/installation-problems/react.mdx',\n   'get-started/installation-problems/svelte.mdx',\n   'get-started/installation-problems/vue.mdx',\n   'get-started/installation-problems/web-components.mdx',\n   'get-started/installation-problems/qwik.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\nStorybook collects completely anonymous data to help us improve user experience. Participation is optional, and you may [opt-out](../configure/telemetry.md#how-to-opt-out) if you'd not like to share any information.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/install.md","loc":{"lines":{"from":79,"to":106}}}}],["693",{"pageContent":"</div>\n\nIf all else fails, try asking for [help](https://storybook.js.org/support)\n\n</details>\n\nNow that you installed Storybook successfully, let’s take a look at a story that was written for us.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/install.md","loc":{"lines":{"from":106,"to":112}}}}],["694",{"pageContent":"---\ntitle: 'Setup Storybook'\n---\n\nNow that you’ve learned what stories are and how to browse them, let’s demo working on one of your components.\n\nPick a simple component from your project, like a Button, and write a `.stories.js`, or a `.stories.ts` file to go along with it. It might look something like this:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/your-component.js.mdx',\n    'react/your-component.ts.mdx',\n    'angular/your-component.ts.mdx',\n    'vue/your-component.2.js.mdx',\n    'vue/your-component.2.ts.mdx',\n    'vue/your-component.3.js.mdx',\n    'vue/your-component.3.ts.mdx',\n    'web-components/your-component.js.mdx',\n    'web-components/your-component.ts.mdx',\n    'svelte/your-component.js.mdx',\n    'html/your-component.js.mdx',\n    'html/your-component.ts.mdx',\n    'preact/your-component.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"get-started/setup#snippet-your-component\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/setup.md","loc":{"lines":{"from":1,"to":31}}}}],["695",{"pageContent":"<!-- prettier-ignore-end -->\n\nGo to your Storybook to view the rendered component. It’s OK if it looks a bit unusual right now.\n\nDepending on your technology stack, you also might need to configure the Storybook environment further.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/setup.md","loc":{"lines":{"from":31,"to":35}}}}],["696",{"pageContent":"Configure Storybook for your stack\n\nStorybook comes with a permissive [default configuration](../configure/overview.md). It attempts to customize itself to fit your setup. But it’s not foolproof.\n\nYour project may have additional requirements before components can be rendered in isolation. This warrants customizing configuration further. There are three broad categories of configuration you might need.\n\n<details>\n<summary>Build configuration like Webpack and Babel</summary>\n\nIf you see errors on the CLI when you run the `yarn storybook` command, you likely need to make changes to Storybook’s build configuration. Here are some things to try:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/setup.md","loc":{"lines":{"from":37,"to":46}}}}],["697",{"pageContent":"If you see errors on the CLI when you run the `yarn storybook` command, you likely need to make changes to Storybook’s build configuration. Here are some things to try:\n\n- [Presets](../addons/addon-types.md) bundle common configurations for various technologies into Storybook. In particular, presets exist for Create React App and Ant Design.\n- Specify a custom [Babel configuration](../configure/babel.md#custom-babel-config) for Storybook. Storybook automatically tries to use your project’s config if it can.\n- Adjust the [Webpack configuration](../builders/webpack.md) that Storybook uses. Try patching in your own configuration if needed.\n\n</details>\n\n<details>\n<summary>Runtime configuration</summary>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/setup.md","loc":{"lines":{"from":46,"to":55}}}}],["698",{"pageContent":"</details>\n\n<details>\n<summary>Runtime configuration</summary>\n\nIf Storybook builds but you see an error immediately when connecting to it in the browser, in that case, chances are one of your input files is not compiling/transpiling correctly to be interpreted by the browser. Storybook supports evergreen browsers, but you may need to check the Babel and Webpack settings (see above) to ensure your component code works correctly.\n\n</details>\n\n<details id=\"component-context\" name=\"component-context\">\n<summary>Component context</summary>\n\nIf a particular story has a problem rendering, often it means your component expects a specific environment is available to the component.\n\nA common frontend pattern is for components to assume that they render in a specific “context” with parent components higher up the rendering hierarchy (for instance, theme providers).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/setup.md","loc":{"lines":{"from":55,"to":69}}}}],["699",{"pageContent":"A common frontend pattern is for components to assume that they render in a specific “context” with parent components higher up the rendering hierarchy (for instance, theme providers).\n\nUse [decorators](../writing-stories/decorators.md) to “wrap” every story in the necessary context providers. The [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering) file allows you to customize how components render in Canvas, the preview iframe. See how you can wrap every component rendered in Storybook with [Styled Components](https://styled-components.com/) `ThemeProvider`, [Vue's Fontawesome](https://github.com/FortAwesome/vue-fontawesome), or with an Angular theme provider component in the example below.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/setup.md","loc":{"lines":{"from":69,"to":73}}}}],["700",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/storybook-preview-with-styled-components-decorator.js.mdx',\n    'react/storybook-preview-with-styled-components-decorator.ts.mdx',\n    'vue/storybook-preview-with-library-decorator.library-2.js.mdx',\n    'vue/storybook-preview-with-library-decorator.library-2.ts.mdx',\n    'vue/storybook-preview-with-library-decorator.library-3.js.mdx',\n    'vue/storybook-preview-with-library-decorator.library-3.ts.mdx',\n    'vue/storybook-preview-with-hoc-component-decorator.component-2.js.mdx',\n    'vue/storybook-preview-with-hoc-component-decorator.component-2.ts.mdx',\n    'vue/storybook-preview-with-hoc-component-decorator.component-3.js.mdx',\n    'vue/storybook-preview-with-hoc-component-decorator.component-3.ts.mdx',\n    'vue/storybook-preview-with-mixin-decorator.mixin-2.js.mdx',\n    'vue/storybook-preview-with-mixin-decorator.mixin-2.ts.mdx',\n    'angular/storybook-preview-with-styled-components-decorator.ts.mdx',\n  ]}\n/>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/setup.md","loc":{"lines":{"from":73,"to":91}}}}],["701",{"pageContent":"<!-- prettier-ignore-end -->\n\n</details>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/setup.md","loc":{"lines":{"from":93,"to":95}}}}],["702",{"pageContent":"Render component styles\n\nStorybook isn’t opinionated about how you generate or load CSS. It renders whatever DOM elements you provide. But sometimes, things won’t “look right” out of the box.\n\nYou may have to configure your CSS tooling for Storybook’s rendering environment. Here are some tips on what could help:\n\n<details>\n  <summary>CSS-in-JS like styled-components and Emotion</summary>\n\nIf you are using CSS-in-JS, chances are your styles are working because they’re generated in JavaScript and served alongside each component. Theme users may need to add a decorator to `.storybook/preview.js`, [see above](#component-context).\n\n</details>\n\n<details>\n  <summary>@import CSS into components</summary>\n\nStorybook allows you to import CSS files in your components directly. But in some cases you may need to [tweak its Webpack configuration](../builders/webpack.md#override-the-default-configuration). Angular components require [a special import](../configure/styling-and-css.md#importing-css-files).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/setup.md","loc":{"lines":{"from":97,"to":113}}}}],["703",{"pageContent":"</details>\n\n<details>\n  <summary>Global imported styles</summary>\n\nIf you have global imported styles, create a file called [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering) and import the styles there. They will be added by Storybook automatically for all stories.\n\n</details>\n\n<details>\n  <summary>Add external CSS or webfonts in the &lt;head&gt;</summary>\n\nAlternatively, if you want to inject a CSS link tag to the `<head>` directly (or some other resource like a webfont link), you can use [`.storybook/preview-head.html`](../configure/story-rendering.md#adding-to-&#60head&#62) to add arbitrary HTML.\n\n</details>\n\n<details>\n  <summary>Load fonts or images from a local directory</summary>\n\nIf you're referencing fonts or images from a local directory, you'll need to configure the Storybook script to [serve the static files](../configure/images-and-assets.md).\n\n</details>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/setup.md","loc":{"lines":{"from":115,"to":136}}}}],["704",{"pageContent":"Load assets and resources\n\nIf you want to [link to static files](../configure/images-and-assets.md) in your project or stories (e.g., `/fonts/XYZ.woff`), use the `-s path/to/folder` flag to specify a static folder to serve from when you start up Storybook. To do so, edit the `storybook` and `build-storybook` scripts in `package.json`.\n\nWe recommend serving external resources and assets requested in your components statically with Storybook. It ensures that assets are always available to your stories.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/setup.md","loc":{"lines":{"from":138,"to":142}}}}],["705",{"pageContent":"---\ntitle: \"What's a Story\"\n---\n\nA story captures the rendered state of a UI component. Developers write multiple stories per component that describe all the “interesting” states a component can support.\n\nThe CLI created example components that demonstrate the types of components you can build with Storybook: Button, Header, and Page.\n\nEach example component has a set of stories that show the states it supports. You can browse the stories in the UI and see the code behind them in files that end with `.stories.js` or `.stories.ts`. The stories are written in Component Story Format (CSF)--an ES6 modules-based standard--for writing component examples.\n\nLet’s start with the `Button` component. A story is a function that describes how to render the component in question. Here’s how to render `Button` in the “primary” state and export a story called `Primary`.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/whats-a-story.md","loc":{"lines":{"from":1,"to":13}}}}],["706",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story.js.mdx',\n    'react/button-story.ts.mdx',\n    'angular/button-story.ts.mdx',\n    'vue/button-story.js.mdx',\n    'vue/button-story.ts.mdx',\n    'web-components/button-story.js.mdx',\n    'web-components/button-story.ts.mdx',\n    'svelte/button-story.js.mdx',\n    'html/button-story.js.mdx',\n    'html/button-story.ts.mdx',\n    'preact/button-story.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"get-started/whats-a-story#snippet-button-story\"\n/>\n\n<!-- prettier-ignore-end -->\n\n![Initial button story](./example-button-noargs.png)\n\nView the rendered `Button` by clicking on it in the Storybook sidebar.\n\nThe above story definition can be further improved to take advantage of [Storybook’s “args”](../writing-stories/args.md) concept. Args describes the arguments to Button in a machine-readable way. It unlocks Storybook’s superpower of altering and composing arguments dynamically.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/whats-a-story.md","loc":{"lines":{"from":13,"to":41}}}}],["707",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-with-args.js.mdx',\n    'react/button-story-with-args.ts.mdx',\n    'vue/button-story-with-args.2.js.mdx',\n    'vue/button-story-with-args.2.ts.mdx',\n    'vue/button-story-with-args.3.js.mdx',\n    'vue/button-story-with-args.3.ts.mdx',\n    'angular/button-story-with-args.ts.mdx',\n    'web-components/button-story-with-args.js.mdx',\n    'web-components/button-story-with-args.ts.mdx',\n    'svelte/button-story-with-args.js.mdx',\n    'html/button-story-with-args.js.mdx',\n    'html/button-story-with-args.ts.mdx',\n    'preact/button-story-with-args.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"get-started/whats-a-story#snippet-button-story-with-args\"\n/>\n\n<!-- prettier-ignore-end -->\n\n![Button story with args](./example-button-args.png)\n\nBoth story examples render the same thing because Storybook feeds the given `args` property into the story during render. But you get timesaving conveniences with args:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/whats-a-story.md","loc":{"lines":{"from":41,"to":67}}}}],["708",{"pageContent":"Both story examples render the same thing because Storybook feeds the given `args` property into the story during render. But you get timesaving conveniences with args:\n\n- `Button`s callbacks are logged into the Actions tab. Click to try it.\n- `Button`s arguments are dynamically editable in the Controls tab. Adjust the controls","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/whats-a-story.md","loc":{"lines":{"from":67,"to":70}}}}],["709",{"pageContent":"Edit a story\n\nStorybook makes it easy to work on one component in one state (aka a story) at a time. When you edit the Button code or stories, Storybook will instantly re-render in the browser. No need to refresh manually.\n\nUpdate the `label` of the `Primary` story, then see your change in Storybook.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"example-button-hot-module-reload-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n\nStories are also helpful for checking that UI continues to look correct as you make changes. The `Button` component has four stories that show it in different use cases. View those stories now to confirm that your change to `Primary` didn’t introduce unintentional bugs in the other stories.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"example-button-browse-stories-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/whats-a-story.md","loc":{"lines":{"from":72,"to":92}}}}],["710",{"pageContent":"<video autoPlay muted playsInline loop>\n  <source\n    src=\"example-button-browse-stories-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n\nChecking component’s stories as you develop helps prevent accidental regressions. [Tools that integrate with Storybook can automate this](../writing-tests/introduction.md) for you.\n\nNow that we’ve seen the basic anatomy of a story let’s see how we use Storybook’s UI to develop stories.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/whats-a-story.md","loc":{"lines":{"from":92,"to":101}}}}],["711",{"pageContent":"---\ntitle: 'Why Storybook?'\n---","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/why-storybook.md","loc":{"lines":{"from":1,"to":3}}}}],["712",{"pageContent":"The problem\n\nThe web’s universality is pushing more complexity into the frontend. It began with responsive web design, which turned every user interface from one to 10, 100, 1000 different user interfaces. Over time, additional requirements piled on like devices, browsers, accessibility, performance, and async states.\n\nComponent-driven tools like React, Vue, and Angular help break down complex UIs into simple components but they’re not silver bullets. As frontends grow, the number of components swells. Mature projects can contain hundreds of components that yield thousands of discrete variations.\n\nTo complicate matters further, those UIs are painful to debug because they’re entangled in business logic, interactive states, and app context.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/why-storybook.md","loc":{"lines":{"from":5,"to":11}}}}],["713",{"pageContent":"To complicate matters further, those UIs are painful to debug because they’re entangled in business logic, interactive states, and app context.\n\nThe breadth of modern frontends overwhelm existing workflows. Developers must consider countless UI variations, yet aren’t equipped to develop or organize them all. You end up in a situation where UIs are tougher to build, less satisfying to work on, and brittle.\n\n![UI multiverse](./multiverse.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/why-storybook.md","loc":{"lines":{"from":11,"to":15}}}}],["714",{"pageContent":"The solution\n\n#### Build UIs in isolation\n\nEvery piece of UI is now a [component](https://www.componentdriven.org/). The superpower of components is that you don't need to spin up the whole app just to see how they render. You can render a specific variation in isolation by passing in props, mocking data, or faking events.\n\nStorybook is packaged as a small, development-only, [workshop](https://bradfrost.com/blog/post/a-frontend-workshop-environment/) that lives alongside your app. It provides an isolated iframe to render components without interference from app business logic and context. That helps you focus development on each variation of a component, even the hard-to-reach edge cases.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"./whats-a-story.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/why-storybook.md","loc":{"lines":{"from":17,"to":30}}}}],["715",{"pageContent":"Capture UI variations as “stories”\n\nWhen developing a component variation in isolation, save it as a story. [Stories](https://github.com/ComponentDriven/csf) are a declarative syntax for supplying props and mock data to simulate component variations. Each component can have multiple stories. Each story allows you to demonstrate a specific variation of that component to verify appearance and behavior.\n\nYou write stories for granular UI component variation and then use those stories in development, testing, and documentation.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/why-storybook.md","loc":{"lines":{"from":32,"to":38}}}}],["716",{"pageContent":"You write stories for granular UI component variation and then use those stories in development, testing, and documentation.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/histogram-story.js.mdx',\n    'react/histogram-story.ts.mdx',\n    'angular/histogram-story.ts.mdx',\n    'vue/histogram-story.2.js.mdx',\n    'vue/histogram-story.2.ts.mdx',\n    'vue/histogram-story.3.js.mdx',\n    'vue/histogram-story.3.ts.mdx',\n    'svelte/histogram-story.js.mdx',\n    'web-components/histogram-story.js.mdx',\n    'web-components/histogram-story.ts.mdx',\n    'preact/histogram-story.js.mdx',\n    'html/histogram-story.js.mdx',\n    'html/histogram-story.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"why-storybook#snippet-histogram-story\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/why-storybook.md","loc":{"lines":{"from":38,"to":62}}}}],["717",{"pageContent":"Storybook keeps track of every story\n\nStorybook is an interactive directory of your UI components and their stories. In the past, you'd have to spin up the app, navigate to a page, and contort the UI into the right state. This is a huge waste of time and bogs down frontend development. With Storybook, you can skip all those steps and jump straight to working on a UI component in a specific state.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"./7.0-storybook-hero-video.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n\n<details>\n<summary>Where does Storybook fit into my project?</summary>\n\nStorybook is packaged as a small, development-only, [workshop](https://bradfrost.com/blog/post/a-frontend-workshop-environment/) that lives alongside your app. Install it by [running a command](../get-started/install.md).\n\nDuring development, run it in a separate node process. If you’re working on UI in isolation, the only thing you’ll need to run is Storybook.\n\n</details>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/why-storybook.md","loc":{"lines":{"from":64,"to":82}}}}],["718",{"pageContent":"During development, run it in a separate node process. If you’re working on UI in isolation, the only thing you’ll need to run is Storybook.\n\n</details>\n\n<details>\n<summary>Does Storybook work with X?</summary>\n\nStorybook aims to integrate with industry-standard tools and platforms to simplify setup. Thanks to our ambitious developer community, we’ve made significant progress. There are hundreds of [addons](https://storybook.js.org/addons/) and tutorials that walk through how to set up Storybook in all types of projects.\n\nIf you’re using a niche framework or a recently launched tool, we might not have an integration for it yet. Consider creating a [proof of concept](../addons/writing-addons.md) yourself first to lead the way for the rest of the community.\n\n</details>\n\n<details>\n<summary>What’s the recommended Storybook workflow?</summary>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/why-storybook.md","loc":{"lines":{"from":82,"to":96}}}}],["719",{"pageContent":"</details>\n\n<details>\n<summary>What’s the recommended Storybook workflow?</summary>\n\nEvery team is different and so is their workflow. Storybook is designed to be incrementally adoptable. Teams can gradually try features to see what works best for them.\n\nMost community members choose a [Component-Driven](https://www.componentdriven.org/) workflow. UIs are developed in isolation from the “bottom up” starting with basic components then progressively combined to assemble pages.\n\n1. Build each component in isolation and write stories for its variations.\n2. Compose small components together to enable more complex functionality.\n3. Assemble pages by combining composite components.\n4. Integrate pages into your project by hooking up data and business logic.\n\n</details>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/why-storybook.md","loc":{"lines":{"from":96,"to":110}}}}],["720",{"pageContent":"Benefits\n\nWhen you write stories for components, you get a bunch of additional benefits for free.\n\n#### 📝 Develop UIs that are more durable\n\nIsolate components and pages and track their use cases as [stories](../writing-stories/introduction.md). Verify hard-to-reach edge cases of UI. Use addons to mock everything a component needs—context, API requests, device features, etc.\n\n#### ✅ Test UIs with less effort and no flakes\n\nStories are a pragmatic, reproducible way of tracking UI states. Use them to spot-test the UI during development. Storybook offers built-in workflows for automated [Accessibility](../writing-tests/accessibility-testing.md), [Interaction](../writing-tests/interaction-testing.md), and [Visual](../writing-tests/visual-testing.md) testing. Or use stories as test cases by importing them into other JavaScript testing tools.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/why-storybook.md","loc":{"lines":{"from":112,"to":122}}}}],["721",{"pageContent":"📚 Document UI for your team to reuse\n\nStorybook is the single source of truth for your UI. Stories index all your components and their various states, making it easy for your team to find and reuse existing UI patterns. Storybook also auto-generates [documentation](../writing-docs/introduction.md) from those stories.\n\n#### 📤 Share how the UI actually works\n\nStories show how UIs actually work, not just a picture of how they're supposed to work. That keeps everyone aligned on what's currently in production. [Publish Storybook](../sharing/publish-storybook.md) to get sign-off from teammates. Or [embed](../sharing/embed.md) them in wikis, Markdown, and Figma to streamline collaboration.\n\n#### 🚦Automate UI workflows\n\nStorybook is compatible with your continuous integration workflow. Add it as a CI step to automate user interface testing, review implementation with teammates, and get signoff from stakeholders.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/why-storybook.md","loc":{"lines":{"from":124,"to":134}}}}],["722",{"pageContent":"Write stories once, reuse everywhere\n\nStorybook is powered by [Component Story Format](https://github.com/ComponentDriven/csf), an open standard based on JavaScript ES6 modules. This enables stories to interoperate between development, testing, and design tools. Each story is exported as a JavaScript function enabling you to reuse it with other tools. No vendor lock-in.\n\nReuse stories with [Jest](https://jestjs.io/) and [Testing Library](https://testing-library.com/) to verify interactions. Put them in [Chromatic](https://www.chromatic.com/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook) for visual testing. Audit story accessibility with [Axe](https://github.com/dequelabs/axe-core). Or test user flows with [Playwright](https://playwright.dev/) and [Cypress](https://www.cypress.io/). Reuse unlocks more workflows at no extra cost.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/why-storybook.md","loc":{"lines":{"from":136,"to":140}}}}],["723",{"pageContent":"Storybook is purpose-built to help you develop complex UIs faster with greater durability and lower maintenance. It’s used by 100s of [leading companies](https://storybook.js.org/showcase) and thousands of [developers](https://github.com/storybookjs/storybook/).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/get-started/why-storybook.md","loc":{"lines":{"from":144,"to":144}}}}],["724",{"pageContent":"---\ntitle: 'Migration guide for Storybook 7.0'\n---\n\nStorybook 7 is our first major release in over 2 years. A lot has changed during that time, so this is a big one. This guide is meant to help you **upgrade from Storybook 6.x to 7.0** successfully!","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":1,"to":5}}}}],["725",{"pageContent":"Major breaking changes\n\nThe rest of this guide will help you upgrade successfully, either automatically or manually. But first, we’ve accumulated a lot of breaking changes in Storybook 7. Here are the most impactful changes you should know about before you go further:\n\n- [Webpack4 support discontinued](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#webpack4-support-discontinued)\n- [IE11 support discontinued](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#modern-browser-support)\n- [Minimum supported version of node is 16](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#dropped-support-for-node-15-and-below)\n- [Some community addons might not work yet](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#specific-instructions-for-addon-users)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":7,"to":14}}}}],["726",{"pageContent":"If any of these apply to your project, please read through the [full migration notes](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-65x-to-700) before continuing. If these are hard requirements, you should probably stick with Storybook 6.x.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":16,"to":16}}}}],["727",{"pageContent":"Automatic upgrade\n\nTo upgrade your Storybook:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-upgrade.npm.js.mdx',\n    'common/storybook-upgrade.pnpm.js.mdx',\n    'common/storybook-upgrade.yarn.js.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThis will:\n\n1. Upgrade your Storybook dependencies to the latest version\n2. Run a collection of _automigrations_, which will:\n   - Check for common upgrade tasks\n   - Explain the necessary changes with links to more information\n   - Ask for approval, then perform the task on your behalf\n\nTo add Storybook to a project that isn’t currently using Storybook:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/init-command.npx.js.mdx',\n    'common/init-command.pnpm.js.mdx',\n    'common/init-command.yarn.js.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThis will:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":18,"to":56}}}}],["728",{"pageContent":"<CodeSnippets\n  paths={[\n    'common/init-command.npx.js.mdx',\n    'common/init-command.pnpm.js.mdx',\n    'common/init-command.yarn.js.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThis will:\n\n1. Figure out which renderer (React, Vue, Angular, Web Components), builder (Webpack, Vite), or meta-framework (Next.js, SvelteKit) you’re using\n2. Install Storybook 7 and auto-configure it to mirror project settings","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":56,"to":69}}}}],["729",{"pageContent":"Manual migrations\n\nIn addition to the automated upgrades above, there are manual migrations that might be required to get Storybook 7 working in your project. We’ve tried to minimize this list to make it easier to upgrade. These include:\n\n- Upgrade MDX1 to MDX2\n- `storiesOf` support discontinued by default","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":71,"to":76}}}}],["730",{"pageContent":"Upgrade MDX1 to MDX2\n\nStorybook 7 uses MDX2 by default for rendering [docs](./writing-docs/introduction.md). The upgrade from MDX1 to MDX2 is not fully automated, due to the large number of changes between versions. Fortunately, we have some tips to help make it a lot easier.\n\n#### Automatically detect MDX2 errors with a CLI tool\n\nIf your project contains MDX files, run the following command before starting up Storybook:\n\n```sh\nnpx @hipster/mdx2-issue-checker\n```\n\nThis will go through every MDX file in the current working directory, and show you which files have errors:\n\n![Terminal output of mdx2-issue-checker, showing errors found](./assets/mdx2-issue-checker-errors.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":78,"to":92}}}}],["731",{"pageContent":"Fix MDX2 errors iteratively\n\nThe CLI only shows the first error per file, so you might need to run the checker iteratively. One way to streamline this process if you use VS Code is to:\n\n1. Install the [MDX VS Code extension](https://marketplace.visualstudio.com/items?itemName=unifiedjs.vscode-mdx)\n2. Enable experimental IntelliSense support for MDX files in your user settings: `\"mdx.experimentalLanguageServer\": true`\n\nThis shows the errors visually in your editor, which speeds things up a lot. Here's what it looks like to fix multiple errors in a file using the extension:\n\n![MDX errors showing in VS Code](./assets/mdx-vs-code-extension-errors.gif)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":94,"to":103}}}}],["732",{"pageContent":"MDX1 as fallback\n\nIf, for some reason, you are unable to get MDX2 working, we’ve implemented legacy MDX1 support as a last resort. MDX1 is deprecated and opt-in, and we recommend against it unless you really need it.\n\nTo use MDX1:\n\n1. Install `@storybook/mdx1-csf` as a dev dependency\n2. Add the `legacyMdx1` feature flag to your `.storybook/main.js`:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-fallback-mdx.js.mdx',\n    'common/storybook-main-fallback-mdx.ts.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":105,"to":123}}}}],["733",{"pageContent":"storiesOf support discontinued by default\n\nIf you use Storybook’s legacy `storiesOf` API, it is no longer supported by default in Storybook 7.\n\nWe recommend you upgrade your `storiesOf` stories to [Component Story Format (CSF)](https://storybook.js.org/blog/storybook-csf3-is-here/). To do so, please see our [optional migration instructions below](#storiesof-to-csf).\n\nIf you can’t upgrade to CSF, or want to get your project working with Storybook 7 before putting in the time to upgrade, you can opt out of on-demand story loading. This legacy mode has a variety of performance implications, but is a convenient stop-gap solution.\n\nTo opt out, add the `storyStoreV7` feature flag in `.storybook/main.js`:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-on-demand-story-loading.js.mdx',\n    'common/storybook-on-demand-story-loading.ts.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":125,"to":144}}}}],["734",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-on-demand-story-loading.js.mdx',\n    'common/storybook-on-demand-story-loading.ts.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nFor more information on this change, see the [migration notes](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#storystorev7-enabled-by-default).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":144,"to":155}}}}],["735",{"pageContent":"Troubleshooting\n\nThe automatic upgrade should get your Storybook into a working state. If you encounter an error running Storybook after upgrading, here’s what to do:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":157,"to":159}}}}],["736",{"pageContent":"1. If you’re running `storybook` with the `dev` command, try using the `build` command instead. Sometimes `build` errors are more legible than `dev` errors!\n2. Check [the full migration notes](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-65x-to-700), which contains an exhaustive list of noteworthy changes in Storybook 7. Many of these are already handled by automigrations when you upgrade, but not all are. It’s also possible that you’re experiencing a corner case that we’re not aware of.\n3. Search [Storybook issues on GitHub](https://github.com/storybookjs/storybook/issues). If you’re seeing a problem, there’s a good chance other people are too. If so, upvote the issue, try out any workarounds described in the comments, and comment back if you have useful info to contribute.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":161,"to":163}}}}],["737",{"pageContent":"4. If there’s no existing issue, you can [file one](https://github.com/storybookjs/storybook/issues/new/choose), ideally with a reproduction attached. We’ll be on top of Storybook 7 issues as we’re stabilizing the release.\n5. If you prefer a more interactive medium, try out the `#prerelease` forum in the [Storybook Discord](https://discord.gg/storybook). We have Storybook maintainers and a large community of users who should be able to give you a hand.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":164,"to":165}}}}],["738",{"pageContent":"If you prefer to debug yourself, here are a few useful things you can do to help narrow down the problem:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":167,"to":167}}}}],["739",{"pageContent":"1. Try removing all addons that are not in the `@storybook` npm namespace. Community addons that work well with 6.x might not yet be compatible with 7.0, and this is the fastest way to isolate that possibility. If you find an addon that needs to be upgraded to work with Storybook 7, please post an issue on the addon’s repository, or better yet, a PR to upgrade it!","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":169,"to":169}}}}],["740",{"pageContent":"2. Another debugging technique is to bisect to older prerelease versions of Storybook to figure out which release broke your Storybook. For example, assuming that the current prerelease of Storybook is `7.0.0-beta.56`, you could set the version to `7.0.0-alpha.0` in your `package.json` and reinstall to verify that it still works (alpha.0 should be nearly identical to `6.5.x`). If it works, you could then try `7.0.0-beta.0`, then `7.0.0-beta.28` and so forth. Once you’ve isolated the bad release, read through its [CHANGELOG](https://github.com/storybookjs/storybook/blob/next/CHANGELOG.md) entry and perhaps there’s a change that jumps out as the culprit. If you find the problem, please submit an issue or PR to the Storybook repo and we’ll do our best to take care of it quickly.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":170,"to":170}}}}],["741",{"pageContent":"Optional migrations\n\nIn addition to the automigrations and manual migrations above, there are also optional migrations that you should consider. These are things that we’ve deprecated in Storybook 7 (but remain backwards compatible), or best practices that should help you be more productive in the future.\n\nThese include:\n\n- Upgrade to Component Story Format v3 (CSF3), the latest iteration of our example format\n- Upgrade from the legacy storiesOf API to Component Story Format\n- Upgrade from `.stories.mdx` files to pure MDX and Component Story Format\n- Upgrade from Storybook 6 recipe “CSF stories with arbitrary MDX”","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":172,"to":181}}}}],["742",{"pageContent":"CSF2 to CSF3\n\nWe published a [detailed post about CSF3](https://storybook.js.org/blog/storybook-csf3-is-here/) including all of its benefits and migration steps.\n\nIf you want to just skip to the migration, we provide a codemod for your convenience which should automatically make the code changes for you (make sure to update the glob to fit your files):\n\n```sh\nnpx storybook@latest migrate csf-2-to-3 --glob=\"src/**/*.stories.js\"\n```\n\n### storiesOf to CSF\n\nStorybook 7's architecture is focused on performance and needs code that is statically analyzable. For that reason, it does not work with `storiesOf`. We provide a codemod which, in most cases, should automatically make the code changes for you (make sure to update the glob to fit your files):\n\n```sh\nnpx storybook@latest migrate storiesof-to-csf --glob=\"src/**/*.stories.tsx\"\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":183,"to":199}}}}],["743",{"pageContent":".stories.mdx to MDX+CSF\n\nStorybook 7 provides a cleaner [docs](./writing-docs/introduction.md) that defines manual documentation in pure MDX and stories in CSF, rather than the previous `.stories.mdx` hybrid approach, which is now deprecated. You can automatically convert your files using the following codemod (make sure to update the glob to fit your files):\n\n```sh\nnpx storybook@latest migrate mdx-to-csf --glob \"src/**/*.stories.mdx\"\n```\n\nYou’ll also need to update your `stories` glob in `.storybook/main.js` to include the newly created `.mdx` and `.stories.js` files if it doesn’t already.\n\n**NOTE:** this migration supports the Storybook 6 [“CSF stories with MDX docs”](https://github.com/storybookjs/storybook/blob/6e19f0fe426d58f0f7981a42c3d0b0384fab49b1/code/addons/docs/docs/recipes.md#csf-stories-with-mdx-docs) recipe.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":201,"to":211}}}}],["744",{"pageContent":"Storybook 6 recipe “CSF stories with arbitrary MDX”\n\nStorybook 6 had a second recipe, [“CSF stories with arbitrary MDX”](https://github.com/storybookjs/storybook/blob/6e19f0fe426d58f0f7981a42c3d0b0384fab49b1/code/addons/docs/docs/recipes.md#csf-stories-with-arbitrary-mdx). This recipe is still supported in Storybook 7, but the new recommendation is cleaner & more future proof. Upgrade manually using the following example:\n\n#### Before\n\n```mdx\n// Button.mdx\n\nimport { Story } from '@storybook/addon-docs';\n\n# Story embed\n\n<Story id=\"button--basic\" />\n```\n\n```js\n// Button.stories.js\n\nimport { Button } from './Button';\nimport mdx from './Button.mdx';\n\nexport default {\n  parameters: { docs: { page: mdx } },\n  component: Button,\n};\n```\n\n```js\n// .storybook/main.js\n\nmodule.exports = {\n  stories: ['../src/**.stories.@(js|jsx|ts|tsx)'],\n};\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":213,"to":247}}}}],["745",{"pageContent":"After\n\nYour MDX files should be updated to reference the CSF story export, which is safer and cleaner than referencing the string ID:\n\n<!-- prettier-ignore-start -->\n```mdx\n{/* Button.mdx */}\n\n{/* Note the new package we import from */}\nimport { Story } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\n\n# Story embed\n\n<Story of={ButtonStories.Basic} />\n```\n<!-- prettier-ignore-end -->\n\nYou should also remove the MDX imports from your story files:\n\n```js\n// Button.stories.js\n\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n```\n\nFinally, you’ll need to add the MDX files to `.storybook/main.js` so that they are indexed:\n\n```js\n// .storybook/main.js\n\nmodule.exports = {\n  stories: ['../src/**.mdx', '../src/**.stories.@(js|jsx|ts|tsx)'],\n};\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/migration-guide.md","loc":{"lines":{"from":249,"to":287}}}}],["746",{"pageContent":"---\ntitle: 'Design integrations'\n---\n\nStorybook integrates with design tools to speed up your development workflow. That helps you debug inconsistencies earlier in the design process, discover existing components to reuse, and compare designs to stories.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/design-integrations.md","loc":{"lines":{"from":1,"to":5}}}}],["747",{"pageContent":"Figma\n\n[Figma](https://www.figma.com/) is a collaborative UI design tool that allows multiple people to work on the same design simultaneously in the browser. There are two ways to integrate Storybook and Figma.\n\n- [**Embed Storybook in Figma**](#embed-storybook-in-figma-with-the-plugin)\n- [**Embed Figma in Storybook**](#embed-figma-in-storybook-with-the-addon)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/design-integrations.md","loc":{"lines":{"from":7,"to":12}}}}],["748",{"pageContent":"Embed Storybook in Figma with the plugin\n\n[Storybook Connect](https://www.figma.com/community/plugin/1056265616080331589/Storybook-Connect) is a Figma plugin that allows you to embed component stories in Figma. It’s powered by [Storybook embeds](./embed.md) and [Chromatic](https://www.chromatic.com/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook), a publishing tool created by the Storybook team.\n\n<video autoPlay muted playsInline loop>\n  <source src=\"figma-plugin-open-story.mp4\" type=\"video/mp4\" />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/design-integrations.md","loc":{"lines":{"from":14,"to":20}}}}],["749",{"pageContent":"Install plugin\n\nBefore we begin, you must have a Storybook [published to Chromatic](./publish-storybook.md#publish-storybook-with-chromatic). It provides the index, versions, and access control that back the plugin.\n\nGo to [Storybook Connect](https://www.figma.com/community/plugin/1056265616080331589/Storybook-Connect) to install the plugin.\n\nIn Figma, open the command palette (in Mac OS, use `Command + /`, in Windows use `Control + /`) and type `Storybook Connect` to enable it.\n\n![Figma palette Storybook connect](./figma-plugin-open-in-figma.png)\n\nFollow the instructions to connect and authenticate with Chromatic.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/design-integrations.md","loc":{"lines":{"from":22,"to":32}}}}],["750",{"pageContent":"Link stories to Figma components\n\nLink stories to Figma components, variants, and instances.\n\nGo to a story in a Storybook published on Chromatic. Make sure it’s on the branch you want to link. Then copy the URL to the story.\n\nIn Figma, select the component, open the plugin, and paste the URL.\n\n![Story linked in Figma](./figma-plugin-paste-url.png)\n\nChromatic will automatically update your linked stories to reflect the most recent Storybook published on the branch you linked. That means the link persists even as you push new code.\n\n<div class=\"aside\">\n💡 The plugin does not support linking stories to Figma layers.\n</div>\n\n#### View stories in Figma\n\nOnce they're connected, you'll be able to view the story by clicking the link in the sidebar. Click \"View story\". Alternatively, open the plugin by using the command palette (in Mac OS, use `Command + /`, in Windows, use `Control + /`), then type `Storybook Connect`.\n\n![Figma sidebar with story link](./figma-plugin-sidebar.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/design-integrations.md","loc":{"lines":{"from":34,"to":54}}}}],["751",{"pageContent":"Embed Figma in Storybook with the addon\n\n[Design addon](https://storybook.js.org/addons/storybook-addon-designs) allows you to embed Figma files and prototypes in Storybook.\n\n![Storybook addon figma](./storybook-figma-addon.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/design-integrations.md","loc":{"lines":{"from":56,"to":60}}}}],["752",{"pageContent":"Install design addon\n\nRun the following command to install the addon.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-figma-addon-install.yarn.js.mdx',\n    'common/storybook-figma-addon-install.npm.js.mdx',\n    'common/storybook-figma-addon-install.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\nℹ️ This addon is still being converted to fully support Storybook 7.0. If you're adding this addon to a Storybook 7.0 instance or migrating from a previous version, you must install the `beta` version.\n\n</div>\n\nUpdate your Storybook configuration (in `.storybook/main.js|ts`) to include the addon.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-figma-addon-register.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/design-integrations.md","loc":{"lines":{"from":62,"to":94}}}}],["753",{"pageContent":"Link Figma components to stories\n\nIn Figma, open the file you want to embed in Storybook. You can embed files, prototypes, components, and frames.\n\n- Embed a file or prototype, click the \"Share\" button to generate a unique URL for the file then click \"Copy link\".\n\n- Embed a component or frame check \"Link to selected frame\" in the Share dialog. Or right click on the frame and go to \"Copy/Paste as\" » \"Copy link\".\n\nIn Storybook, add a new [parameter](../writing-stories/parameters.md) named `design` to your story and paste the Figma URL. For example:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/design-integrations.md","loc":{"lines":{"from":96,"to":106}}}}],["754",{"pageContent":"In Storybook, add a new [parameter](../writing-stories/parameters.md) named `design` to your story and paste the Figma URL. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/component-story-figma-integration.js.mdx',\n    'react/component-story-figma-integration.ts.mdx',\n    'vue/component-story-figma-integration.js.mdx',\n    'vue/component-story-figma-integration.ts.mdx',\n    'angular/component-story-figma-integration.ts.mdx',\n    'svelte/component-story-figma-integration.js.mdx',\n    'web-components/component-story-figma-integration.js.mdx',\n    'web-components/component-story-figma-integration.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"sharing/design-integrations#snippet-component-story-figma-integration\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/design-integrations.md","loc":{"lines":{"from":106,"to":125}}}}],["755",{"pageContent":"View designs in Storybook\n\nClick the \"Design\" tab in the addon panel to view the embedded Figma design.\n\n![Design addon panel](./design-addon-panel.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/design-integrations.md","loc":{"lines":{"from":127,"to":131}}}}],["756",{"pageContent":"Zeplin\n\n[Zeplin](https://zeplin.io/) is a design tool that generates styleguides from [Sketch](https://www.sketch.com/), [Figma](https://www.figma.com/), and [Adobe XD](https://www.adobe.com/products/xd.html).\n\nUse the [Zeplin addon](https://storybook.js.org/addons/storybook-zeplin) to connect Storybook. The addon displays designs from Zeplin alongside the currently selected story. It includes convenient tooling to overlay the design image atop the live component.\n\nZeplin's native app also supports [links to published Storybooks](https://support.zeplin.io/en/articles/5674596-connecting-your-storybook-instance-with-zeplin).\n\n![Zeplin Storybook addon](./storybook-zeplin-addon.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/design-integrations.md","loc":{"lines":{"from":133,"to":141}}}}],["757",{"pageContent":"Zeroheight\n\n[Zeroheight](https://zeroheight.com/) is a collaborative styleguide generator for design systems. It showcases design, code, brand, and copywriting documentation in one place. Users can easily edit that documentation with a WYSIWYG editor.\n\nZeroheight integrates with [Storybook](https://zeroheight.com/3xlwst8/p/507ba7-storybook), enabling you to embed stories alongside your design specs.\n\n![Zeroheight Storybook integration](./storybook-zeroheight.gif)\n\n## UXPin\n\n[UXPin](https://www.uxpin.com/) is an interactive design tool that uses production code to generate prototypes.\n\nUXPin allows you to [use interactive stories](https://www.uxpin.com/docs/merge/storybook-integration/) to design user flows.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"storybook-uxpin.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/design-integrations.md","loc":{"lines":{"from":143,"to":162}}}}],["758",{"pageContent":"InVision Design System Manager\n\n[InVision DSM](https://www.invisionapp.com/design-system-manager) is a design system documentation tool. It helps design teams consolidate UX principles, user interface design, and design tokens in a shared workspace.\n\nInVision allows you to embed [Storybook](https://support.invisionapp.com/hc/en-us/articles/360028388192-Publishing-Storybook-to-DSM) in your design system documentation.\n\n![Invision DSM Storybook integration](./storybook-invision-dsm.gif)\n\n## Adobe XD\n\n[Adobe XD](https://www.adobe.com/products/xd.html) is a UI and UX design tool for creating wireframes, interactive designs, and prototypes.\n\nIntegrate Adobe XD with Storybook using the [design addon](https://storybook.js.org/addons/storybook-addon-designs/). You can [embed design specs](https://helpx.adobe.com/xd/help/publish-design-specs.html) alongside stories by following these [instructions](https://pocka.github.io/storybook-addon-designs/?path=/story/docs-iframe-readme--page).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/design-integrations.md","loc":{"lines":{"from":164,"to":176}}}}],["759",{"pageContent":"Build your own integration\n\nExtend and customize Storybook by building an integration. Integrate with lower-level Storybook APIs or bootstrap an addon to customize Storybook's UI and behavior.\n\n- [Addon documentation](../addons/introduction.md)\n- [Create an addon tutorial](https://storybook.js.org/tutorials/create-an-addon/)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/design-integrations.md","loc":{"lines":{"from":178,"to":183}}}}],["760",{"pageContent":"---\ntitle: 'Embed stories'\n---\n\nEmbed stories to showcase your work to teammates and the developer community at large. In order to use embeds, your Storybook must be published and publicly accessible.\n\nStorybook supports `<iframe>` embeds out of the box. If you use Chromatic to [publish Storybook](./publish-storybook.md#publish-storybook-with-chromatic), you can also embed stories in Notion, Medium, and countless other platforms that support the oEmbed standard.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/embed.md","loc":{"lines":{"from":1,"to":7}}}}],["761",{"pageContent":"Embed a story with the toolbar\n\nEmbed a story with the toolbar, and paste the published story URL. For example:\n\n<!-- prettier-ignore-start -->\n\n```js\n// oEmbed\nhttps://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/?path=/story/shadowboxcta--default\n\n// iframe embed\n<iframe\n  src=\"https://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/?path=/story/shadowboxcta--default&full=1&shortcuts=false&singleStory=true\"\n  width=\"800\"\n  height=\"260\"\n></iframe>\n```\n\n<!-- prettier-ignore-end -->\n\n<br/>\n\n<iframe src=\"https://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/?path=/story/shadowboxcta--default&full=1&shortcuts=false&singleStory=true\" width=\"800\" height=\"260\"></iframe>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/embed.md","loc":{"lines":{"from":9,"to":31}}}}],["762",{"pageContent":"Embed a story without the toolbar\n\nTo embed a plain story without Storybook's toolbar, click the \"open canvas in new tab\" icon in the top-right corner of Storybook to get the canvas URL. For example:\n\n<!-- prettier-ignore-start -->\n\n```js\n// oEmbed\nhttps://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/iframe.html?id=/story/shadowboxcta--default&viewMode=story\n\n// iframe embed\n <iframe\n  src=\"https://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/iframe.html?id=shadowboxcta--default&viewMode=story&shortcuts=false&singleStory=true\"\n  width=\"800\"\n  height=\"200\"\n></iframe>\n```\n<!-- prettier-ignore-end -->\n\n<br/>\n\n<iframe src=\"https://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/iframe.html?id=shadowboxcta--default&viewMode=story&shortcuts=false&singleStory=true\" width=\"800\" height=\"200\"></iframe>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/embed.md","loc":{"lines":{"from":33,"to":54}}}}],["763",{"pageContent":"Embed documentation\n\nEmbed a documentation page by replacing `viewMode=story` with the uniquely auto-generated documentation entry for the story.\n\n<!-- prettier-ignore-start -->\n\n```js\n// oEmbed\nhttps://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/iframe.html?id=shadowboxcta--docs&viewMode=docs&shortcuts=false&singleStory=true\n\n// iframe embed\n <iframe\n  src=\"https://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/iframe.html?id=shadowboxcta--docs&viewMode=docs&shortcuts=false&singleStory=true\"\n  width=\"800\"\n  height=\"400\"\n></iframe>\n```\n\n<!-- prettier-ignore-end -->\n\n<br/>\n\n<iframe src=\"https://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/iframe.html?id=shadowboxcta--docs&viewMode=docs&shortcuts=false&singleStory=true\" width=\"800\" height=\"400\"></iframe>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/embed.md","loc":{"lines":{"from":56,"to":78}}}}],["764",{"pageContent":"Embed stories on other platforms\n\nEvery platform has different levels of embed support. Check the documentation of your service to see how they recommend embedding external content.\n\n<details>\n\n<summary>How to embed in Medium</summary>\n\nPaste the Storybook URL into your Medium article, then press Enter. The embed will automatically resize to fit the story's height.\n\nWhile editing an article, Medium renders all embeds non-interactive. Once your article is published, it will become interactive. [Preview a demo on Medium](https://medium.com/@ghengeveld/embedding-storybook-on-medium-ce8a280c03ad).\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"embed-medium-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n\n</details>\n\n<details>\n\n<summary>How to embed in Notion</summary>\n\nIn your Notion document, type /embed, press Enter, and paste the story URL as the embed link. You can resize the embed as necessary.\n\n![Embed Notion](./embed-notion.png)\n\n</details>\n\n<details>\n\n<summary>How to embed in Ghost</summary>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/embed.md","loc":{"lines":{"from":80,"to":113}}}}],["765",{"pageContent":"![Embed Notion](./embed-notion.png)\n\n</details>\n\n<details>\n\n<summary>How to embed in Ghost</summary>\n\nType `/html` in your Ghost post, press Enter and paste the iframe URL. You can resize the embed via the width and height properties as required.\n\n![Embed Ghost](./embed-ghost.png)\n\n</details>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/embed.md","loc":{"lines":{"from":113,"to":125}}}}],["766",{"pageContent":"---\ntitle: 'Package Composition'\n---\n\nStorybook is widely used by component libraries and design systems. Design system authors can automatically compose their design systems inside their consumer’s Storybooks.\n\nFor example, if you use a design system package, its stories can appear alongside your own. That makes it convenient to cross reference usage documentation without leaving Storybook.\n\n<div class=\"aside\">\n\nComposition via a package requires a secure integration between the service where you publish Storybook and Storybook’s own APIs. We recommend [publishing Storybook to Chromatic](./publish-storybook.md#publish-storybook-with-chromatic) for full support of these features.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/package-composition.md","loc":{"lines":{"from":1,"to":13}}}}],["767",{"pageContent":"For consumers\n\nComposition happens automatically if the package [supports](#for-authors) it. When you install the package, Storybook will load its stories alongside your own.\n\n![Package composition workflow](./package-composition.png)\n\n### Set up\n\nIf you want to configure how the composed Storybook behaves, you can disable the `ref` element in your [`.storybook/main.js`](../configure/overview.md#configure-story-rendering)\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-disable-refs.js.mdx',\n    'common/storybook-main-disable-refs.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n### Switching versions\n\nChange the version of the composed Storybook to see how the library evolves. This requires [configuration](#show-a-version-selector) from the package author.\n\n![Package composition workflow](./composition-versioning.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/package-composition.md","loc":{"lines":{"from":15,"to":40}}}}],["768",{"pageContent":"For authors\n\nComponent library authors can expand adoption by composing their components in their consumer’s Storybooks.\n\nAdd a `storybook` property in your published `package.json`that contains an object with a `url` field. Point the URL field to a published Storybook at the version you want.\n\n```json\n// Your component library’s package.json\n{\n  \"storybook\": {\n    \"url\": \"https://host.com/your-storybook-for-this-version\"\n  }\n}\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/package-composition.md","loc":{"lines":{"from":42,"to":55}}}}],["769",{"pageContent":"Automatic version selection\n\nIf you're using [Chromatic](./publish-storybook.md#publish-storybook-with-chromatic), you can provide a single URL for your Storybook in the `storybook.url` field. You do not need to change the URL each time you publish a new version. Storybook will automatically find the correct URL for your package. For example:\n\n```json\n{\n  \"storybook\": {\n    \"url\": \"https://master--xyz123.chromatic.com\"\n  }\n}\n```\n\nIn this example `xyz123` is your Chromatic project id. Storybook will automatically compose in the Storybook published to that project corresponding to the version the user has installed.\n\n### Show a version selector\n\nIf you're using [Chromatic](./publish-storybook.md#publish-storybook-with-chromatic), you can provide a list of versions for the user to [choose from](#switching-versions) to experiment with other versions of your package.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/package-composition.md","loc":{"lines":{"from":57,"to":73}}}}],["770",{"pageContent":"---\ntitle: 'Publish Storybook'\n---\n\nTeams publish Storybook online to review and collaborate on works in progress. That allows developers, designers, PMs, and other stakeholders to check if the UI looks right without touching code or requiring a local dev environment.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"storybook-workflow-publish.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/publish-storybook.md","loc":{"lines":{"from":1,"to":12}}}}],["771",{"pageContent":"Build Storybook as a static web application\n\nFirst, we'll need to build Storybook as a static web application. The functionality is already built-in and pre-configured for most supported frameworks. Others require a bit of customization (e.g., Angular). Run the following command inside your project's root directory:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/custom-build-script-production.script-for-builder.js.mdx',\n    'angular/build-storybook-production-mode.with-builder.js.mdx',\n    'common/build-storybook-production-mode.yarn.js.mdx',\n    'common/build-storybook-production-mode.npm.js.mdx',\n    'common/build-storybook-production-mode.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 You can provide additional flags to customize the command. Read more about the flag options [here](../api/cli-options.md).\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/publish-storybook.md","loc":{"lines":{"from":14,"to":36}}}}],["772",{"pageContent":"<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 You can provide additional flags to customize the command. Read more about the flag options [here](../api/cli-options.md).\n\n</div>\n\nStorybook will create a static web application capable of being served by any web server. Preview it locally by running the following command:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/preview-storybook-production-mode.npm.js.mdx',\n    'common/preview-storybook-production-mode.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/publish-storybook.md","loc":{"lines":{"from":36,"to":55}}}}],["773",{"pageContent":"Publish Storybook with Chromatic\n\nOnce you've built your Storybook as a static web app, you can publish it to your web host. We recommend [Chromatic](https://www.chromatic.com/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook), a free publishing service made for Storybook that documents, versions, and indexes your UI components securely in the cloud.\n\n![Storybook publishing workflow](./workflow-publish.png)\n\nTo get started, sign up with your GitHub, GitLab, Bitbucket, or email and generate a unique _project-token_ for your project.\n\nNext, install the [Chromatic CLI](https://www.npmjs.com/package/chromatic) package from npm:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/chromatic-install.yarn.js.mdx',\n    'common/chromatic-install.npm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nRun the following command after the package finishes installing. Make sure that you replace `your-project-token` with your own project token.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/publish-storybook.md","loc":{"lines":{"from":57,"to":78}}}}],["774",{"pageContent":"<!-- prettier-ignore-end -->\n\nRun the following command after the package finishes installing. Make sure that you replace `your-project-token` with your own project token.\n\n```shell\nnpx chromatic --project-token=<your-project-token>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/publish-storybook.md","loc":{"lines":{"from":78,"to":83}}}}],["775",{"pageContent":"When Chromatic finishes, you should have successfully deployed your Storybook. Preview it by clicking the link provided (i.e., https://random-uuid.chromatic.com).\n\n```shell\nBuild 1 published.\n\nView it online at https://www.chromatic.com/build?appId=...&number=1.\n```\n\n![Chromatic publish build](./build-publish-only.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/publish-storybook.md","loc":{"lines":{"from":86,"to":94}}}}],["776",{"pageContent":"Setup CI to publish automatically\n\nConfigure your CI environment to publish your Storybook and [run Chromatic](https://www.chromatic.com/docs/ci?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook)) whenever you push code to a repository. Let's see how to set it up using GitHub Actions.\n\nIn your project's root directory, add a new file called `chromatic.yml` inside the `.github/workflows` directory:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/chromatic-github-action.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 Secrets are secure environment variables provided by GitHub so that you don't need to hard code your `project-token`. Read the [official documentation](https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository) to learn how to configure them.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/publish-storybook.md","loc":{"lines":{"from":96,"to":116}}}}],["777",{"pageContent":"</div>\n\nCommit and push the file. Congratulations, you've successfully automated publishing your Storybook. Now whenever you open a PR you’ll get a handy link to your published Storybook in your PR checks.\n\n![PR check publish](./prbadge-publish.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/publish-storybook.md","loc":{"lines":{"from":116,"to":120}}}}],["778",{"pageContent":"Review with your team\n\nPublishing Storybook as part of the development process makes it quick and easy to [gather team feedback](https://storybook.js.org/tutorials/design-systems-for-developers/react/en/review/).\n\nA common method to ask for review is to paste a link to the published Storybook in a pull request or Slack.\n\nIf you publish your Storybook to Chromatic, you can use the [UI Review](https://www.chromatic.com/features/publish?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook) feature to automatically scan your PRs for new and updated stories. That makes it easy to identify what changed and give feedback.\n\n![UI review in Chromatic](./workflow-uireview.png)\n\n### Versioning and history\n\nWhen you publish Storybook, you also get component history and versioning down to the commit. That's useful during implementation review for comparing components between branches/commits to past versions.\n\n![Library history in Chromatic](./workflow-history-versioning.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/publish-storybook.md","loc":{"lines":{"from":122,"to":136}}}}],["779",{"pageContent":"Publish Storybook to other services\n\nYou can publish the static Storybook web app to many hosts. We maintain [`storybook-deployer`](https://github.com/storybookjs/storybook-deployer), a handy tool to help you publish to AWS or GitHub pages.\n\nBut features like [Composition](./storybook-composition.md), [embed](./embed.md), history, and versioning require tighter integration with Storybook APIs and secure authentication. Your hosting provider may not be capable of supporting these features. Learn about the Component Publishing Protocol (CPP) to see what.\n\n<details>\n\n<summary><h2>Component Publishing Protocol (CPP)</h2></summary>\n\nStorybook can communicate with services that host built Storybooks online. This enables features such as [Composition](./storybook-composition.md). We categorize services via compliance with the \"Component Publishing Protocol\" (CPP) with various levels of support in Storybook.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/publish-storybook.md","loc":{"lines":{"from":138,"to":148}}}}],["780",{"pageContent":"CPP level 1\n\nThis level of service serves published Storybooks and makes the following available:\n\n- Versioned endpoints, URLs that resolve to different published Storybooks depending on a `version=x.y.z` query parameter (where `x.y.z` is the released version of the package).\n- Support for `/stories.json`\n- Support for `/metadata.json` and the `releases` field.\n\nExample: [Chromatic](https://www.chromatic.com/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook)\n\n### CPP level 0\n\nThis level of service can serve published Storybooks but has no further integration with Storybook’s APIs.\n\nExamples: [Netlify](https://www.netlify.com/), [S3](https://aws.amazon.com/en/s3/)\n\n</details>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/publish-storybook.md","loc":{"lines":{"from":150,"to":166}}}}],["781",{"pageContent":"Search engine optimization (SEO)\n\nIf your Storybook is publically viewable, you may wish to configure how it is represented in search engine result pages.\n\n### Title\n\nStorybook will generate the document title (i.e. `<title>`) for you automatically, to include the currently-viewed component and story. By default, it looks something like \"Components / Button - Primary ⋅ Storybook\". You can modify the \"Storybook\" portion by adding the following to the `main.js` file in your config directory:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/seo-title.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n### Description\n\nYou can provide a description for search engines to display in the results listing, by adding the following to the `manager-head.html` file in your config directory:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/seo-description.html.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/publish-storybook.md","loc":{"lines":{"from":168,"to":198}}}}],["782",{"pageContent":"Preventing your Storybook from being crawled\n\nYou can prevent your published Storybook from appearing in search engine results by including a noindex meta tag, which you can do by adding the following to the `manager-head.html` file in your config directory:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/seo-noindex.html.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/publish-storybook.md","loc":{"lines":{"from":200,"to":212}}}}],["783",{"pageContent":"---\ntitle: 'Storybook Composition'\n---\n\nComposition allows you to browse components from any Storybook accessible via URL inside your local Storybook. You can compose any [Storybook published online](./publish-storybook.md) or running locally no matter the view layer, tech stack, or dependencies.\n\n![Storybook reference external](./reference-external-storybooks-composition.png)\n\nYou’ll see the composed Storybook’s stories in the sidebar alongside your own. This unlocks common workflows that teams often struggle with:\n\n- 👩‍💻 UI developers can quickly reference prior art without switching between Storybooks.\n- 🎨 Design systems can expand adoption by composing themselves into their users’ Storybooks.\n- 🛠 Frontend platform can audit how components are used across projects.\n- 📚 View multiple Storybooks with different tech stacks in one place\n\n![Storybook composition](./combine-storybooks.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/storybook-composition.md","loc":{"lines":{"from":1,"to":16}}}}],["784",{"pageContent":"Compose published Storybooks\n\nIn your [`.storybook/main.js`](../configure/overview.md#configure-story-rendering) file add a `refs` field with information about the reference Storybook. Pass in a URL to a statically built Storybook.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-ref-remote.js.mdx',\n    'common/storybook-main-ref-remote.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n 💡 Limitation: Addons in composed Storybooks will not work as they normally do in a non-composed Storybook.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/storybook-composition.md","loc":{"lines":{"from":18,"to":35}}}}],["785",{"pageContent":"Compose local Storybooks\n\nYou can also compose multiple Storybooks that are running locally. For instance, if you have a React Storybook and an Angular Storybook running on different ports, you can update your configuration file (i.e., `.storybook/main.js`) and reference them;\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-ref-local.js.mdx',\n    'common/storybook-main-ref-local.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nAdding this configuration will combine React and Angular Storybooks into your current one. You’ll see the changes being applied automatically when either of these changes. Enabling you to develop both frameworks in sync.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/storybook-composition.md","loc":{"lines":{"from":37,"to":52}}}}],["786",{"pageContent":"Compose Storybooks per environment\n\nYou can also compose Storybooks based on the current development environment (e.g., development, staging, production). For instance, if the project you're working on already has a published Storybook but also includes a version with cutting-edge features not yet released, you can adjust the composition based on that. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-ref-per-environment.js.mdx',\n    'common/storybook-main-ref-per-environment.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 Similar to the other fields available in Storybook’s configuration file, the `refs` field can also be a function that accepts a config parameter containing Storybook’s configuration object. Check the [Webpack documentation](../builders/webpack.md#override-the-default-configuration) to learn more about it.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/storybook-composition.md","loc":{"lines":{"from":54,"to":73}}}}],["787",{"pageContent":"Improve your Storybook composition\n\nSo far, we've seen how we can use composition with local or published Storybooks. As your Storybook will grow in time with your stories or through composition with other Storybooks, you can optimize the deployment process using various methods.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/storybook-composition.md","loc":{"lines":{"from":75,"to":77}}}}],["788",{"pageContent":"With feature flags\n\nIf you're using Storybook 6.4, or higher, you can optimize your composition via the `buildStoriesJson` feature flag, allowing you to generate a `stories.json` file with the required information, providing you with a seamless integration without the need for additional dependencies. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-enable-buildstoriesjson.js.mdx',\n    'common/storybook-enable-buildstoriesjson.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 If you already enabled automatic code splitting via the [`storyStoreV7`](https://storybook.js.org/docs/react/builders/webpack#code-splitting), you won't need this flag as it will automatically generate the `stories.json` file.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/storybook-composition.md","loc":{"lines":{"from":79,"to":98}}}}],["789",{"pageContent":"</div>\n\nWhen you compose a Storybook featuring this flag, it will use the information retrieved from the file to populate the UI with your composed Storybook stories automatically. Here's an example of the output generated by the `stories.json` file:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-storiesjsonflag-result.json.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/storybook-composition.md","loc":{"lines":{"from":98,"to":110}}}}],["790",{"pageContent":"With the CLI\n\nIf you're working with an outdated Storybook version or have a project-specific requirement that prevents you from enabling the `buildStoriesJson` feature flag. In that case, you can use Storybook's CLI to automatically generate the `stories.json` file when you deploy your Storybook. For example:\n\n```shell\nnpx storybook extract","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/storybook-composition.md","loc":{"lines":{"from":112,"to":117}}}}],["791",{"pageContent":"<div class=\"aside\">\n\n💡 `storybook extract` uses [Puppeteer](https://www.npmjs.com/package/puppeteer), which downloads and installs Chromium. Set the environment `SB_CHROMIUM_PATH` to configure your local Chromium installation.\n\n</div>\n\nAlthough a good approach to improve composition, it comes with a cost, as it will require an additional dependency being added and increased build times. Once it finishes executing, it will generate a `stories.json` file in the default build directory (`storybook-static`) with the information related to your Storybook. Here’s an example of the file contents:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-extract-result.json.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nLinking to a Storybook deployed using this approach will yield all the stories and other relevant information displayed in the UI.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/storybook-composition.md","loc":{"lines":{"from":120,"to":138}}}}],["792",{"pageContent":"<!-- prettier-ignore-end -->\n\nLinking to a Storybook deployed using this approach will yield all the stories and other relevant information displayed in the UI.\n\nIf you need, you can also add additional arguments to this command. For instance, if you want to generate the stories.json file into a custom directory, you can use the following:\n\n```shell\nnpx storybook extract my-built-storybook-directory my-other-directory/stories.json","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/storybook-composition.md","loc":{"lines":{"from":138,"to":145}}}}],["793",{"pageContent":"When executed, it will look up a built Storybook in the `my-built-storybook-directory` and create the `stories.json` file in the `my-other-directory` with all the necessary information.\n\n<div class=\"aside\">\n\n💡 If you need to use the arguments, you’ll need to include both of them, or the command will fail.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/sharing/storybook-composition.md","loc":{"lines":{"from":148,"to":154}}}}],["794",{"pageContent":"---\ntitle: 'Automatic documentation and Storybook'\n---\n\nStorybook Autodocs is a powerful tool that can help you quickly generate comprehensive documentation for your UI components. By leveraging Autodocs, you're transforming your stories into living documentation which can be further extended with [MDX](./mdx.md) and [Doc Blocks](./doc-blocks.md) to provide a clear and concise understanding of your components' functionality.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":1,"to":5}}}}],["795",{"pageContent":"Setup automated documentation\n\nTo enable auto-generated documentation for your stories, you'll need to add the `tags` configuration property to the story's default export. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-auto-docs.js.mdx',\n    'react/button-story-auto-docs.ts.mdx',\n    'vue/button-story-auto-docs.js.mdx',\n    'vue/button-story-auto-docs.ts.mdx',\n    'angular/button-story-auto-docs.ts.mdx',\n    'svelte/button-story-auto-docs.js.mdx',\n    'web-components/button-story-auto-docs.js.mdx',\n    'web-components/button-story-auto-docs.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n![Storybook autodocs](./autodocs.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":7,"to":28}}}}],["796",{"pageContent":"<!-- prettier-ignore-end -->\n\n![Storybook autodocs](./autodocs.png)\n\n\nOnce the story loads, Storybook infers the relevant metadata (e.g., [`args`](../writing-stories/args.md), [`argTypes`](../api/argtypes.md), [`parameters`](../writing-stories/parameters.md)) and automatically generates a documentation page with this information positioned at the root-level of your component tree in the sidebar.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":28,"to":33}}}}],["797",{"pageContent":"Configure\n\nBy default, Storybook offers zero-config support for documentation and automatically sets up a documentation page for each story enabled via the `tags` configuration property. However, you can extend your Storybook configuration file (i.e., `.storybook/main.js|ts|cjs`) and provide additional options to control how documentation gets created. Listed below are the available options and examples of how to use them.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-auto-docs-full-config.js.mdx',\n    'common/storybook-auto-docs-full-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":35,"to":48}}}}],["798",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-auto-docs-full-config.js.mdx',\n    'common/storybook-auto-docs-full-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n| Option        | Description                                                                                                                         |\n| ------------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| `autodocs`    | Configures auto-generated documentation pages. Available options: `true`, `false`,`tag` (default) <br/> `docs: { autodocs: false }` |\n| `defaultName` | Renames the auto-generated documentation page<br/> `docs: { defaultName: 'Documentation' }`                                         |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":48,"to":62}}}}],["799",{"pageContent":"Write a custom template\n\nTo replace the default documentation template used by Storybook, you can extend your UI configuration file (i.e., `.storybook/preview.js`) and introduce a `docs` [parameter](./doc-blocks.md#customizing-the-automatic-docs-page). This parameter accepts a `page` function that returns a React component, which you can use to generate the required template. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-auto-docs-custom-template-function.js.mdx',\n    'common/storybook-preview-auto-docs-custom-template-function.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 Internally, Storybook uses a similar implementation to generate the default template. See the Doc Blocks [API reference](./doc-blocks.md#available-blocks) if you want to learn more about how Doc Blocks work.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":64,"to":83}}}}],["800",{"pageContent":"</div>\n\nGoing over the code snippet in more detail. When Storybook starts up, it will override the default template with the custom one composed of the following:\n\n1. A header with the component's metadata retrieved by the `Title`, `Subtitle`, and `Description` Doc Blocks.\n2. The first story defined in the file via the `Primary` Doc Block with a handy set of UI controls to zoom in and out of the component.\n3. An interactive table with all the relevant [`args`](../writing-stories/args.md) and [`argTypes`](../api/argtypes.md) defined in the story via the `Controls` Doc Block.\n4. A overview of the remaining stories via the `Stories` Doc Block.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":83,"to":90}}}}],["801",{"pageContent":"With MDX\n\nYou can also use MDX to generate the documentation template. This is useful in non-React projects where JSX-handling is not configured. Normally, when you create an MDX file in your project, it is treated as normal documentation. To indicate that an MDX file is a documentation template, supply the `isTemplate` property to its [`Meta`](../api/doc-block-meta.md) Doc Block. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-mdx-template-with-prop.mdx.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThen you can use it in your `.storybook/preview.js` or an individual story file by importing it:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-auto-docs-custom-mdx-template.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 If you only need to override the documentation page for a single component, we recommend creating an MDX file and referencing it directly via the `<Meta of={} />` Doc Block.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":92,"to":122}}}}],["802",{"pageContent":"Customize component documentation\n\nCreating automated documentation with Storybook's Autodocs provides you with the starting point to build a sustainable documentation pattern. Nevertheless, it may not be suited for every case, and you may want to extend it and provide additional information. We recommend combining [MDX](./mdx.md) alongside Storybook's [Doc Blocks](./doc-blocks.md) for such cases to author your documentation.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":124,"to":126}}}}],["803",{"pageContent":"Advanced configuration\n\n### Customize the Docs Container\n\nThe Docs Container is the component that wraps up the documentation page. It's responsible for rendering the documentation page in Storybook's UI. You can customize it by creating your own component and updating your Storybook UI configuration file (i.e., `.storybook/preview.js`) to reference it.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-auto-docs-custom-docs-container.js.mdx',\n    'common/storybook-preview-auto-docs-custom-docs-container.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":128,"to":143}}}}],["804",{"pageContent":"Override the default theme\n\nBy default, Storybook provides two themes for the UI: `light` and `dark`. If you need to customize the theme used by the documentation to match the existing one, you can update your Storybook UI configuration file (i.e., `.storybook/preview.js`) and apply it.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-auto-docs-override-theme.js.mdx',\n    'common/storybook-preview-auto-docs-override-theme.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":145,"to":158}}}}],["805",{"pageContent":"Working with custom MDX components\n\nOut of the box, Storybook has a set of components that you can use to customize your documentation page. If you're working with a design system or component library and wish to add them to your documentation page, you can override the `MDXProvider` component inherited from `@mdx-js/react` with your own. However, there's a caveat to this, the component replacement will only have an impact if you're writing documentation using Markdown syntax (e.g., `#` for headings). Native HTML elements, such as `<h1>`, will not be replaced with your custom implementation.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-auto-docs-override-mdx-container.js.mdx',\n    'common/storybook-preview-auto-docs-override-mdx-container.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":160,"to":175}}}}],["806",{"pageContent":"<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 This is not a Storybook issue but a breaking change introduced with MDX 2. For more information on this and other breaking changes, see our [MDX documentation](./mdx.md#breaking-changes).\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":175,"to":181}}}}],["807",{"pageContent":"Troubleshooting","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":183,"to":183}}}}],["808",{"pageContent":"The auto-generated documentation is not showing up in a monorepo setup\n\nOut of the box, Storybook's Autodocs feature is built to generate documentation for your stories automatically. Nevertheless, if you're working with a monorepo setup (e.g., [`Yarn Workspaces`](https://yarnpkg.com/features/workspaces), [`pnpm Workspaces`](https://pnpm.io/workspaces)), you may run into issues where part of the documentation may not be generated for you. To help you troubleshoot those issues, we've prepared some recommendations that might help you.\n\nUpdate your import statements to reference the component directly instead of the package's root. For example:\n\n<!-- prettier-ignore-start -->\n\n\n<CodeSnippets\n  paths={[\n    'common/storybook-fix-imports-autodocs-monorepo.js.mdx',\n    'common/storybook-fix-imports-autodocs-monorepo.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":185,"to":201}}}}],["809",{"pageContent":"<CodeSnippets\n  paths={[\n    'common/storybook-fix-imports-autodocs-monorepo.js.mdx',\n    'common/storybook-fix-imports-autodocs-monorepo.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nAdditionally, if you're developing using TypeScript, you may need to update Storybook's configuration file (i.e., `.storybook/main.js|ts`) to include the following:\n\n<!-- prettier-ignore-start -->\n\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-fix-imports-autodocs-monorepo.js.mdx',\n    'common/storybook-main-fix-imports-autodocs-monorepo.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nIf you're still encountering issues, we recommend reaching out to the maintainers using the default communication channels (e.g., [Discord server](https://discord.com/channels/486522875931656193/570426522528382976), [GitHub issues](https://github.com/storybookjs/storybook/issues)).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":201,"to":224}}}}],["810",{"pageContent":"Learn more about Storybook documentation\n\n- Autodocs for creating documentation for your stories\n- [MDX](./mdx.md) for customizing your documentation\n- [Doc Blocks](./doc-blocks.md) for authoring your documentation\n- [Publishing docs](./build-documentation.md) to automate the process of publishing your documentation","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/autodocs.md","loc":{"lines":{"from":226,"to":231}}}}],["811",{"pageContent":"---\ntitle: 'Preview and build docs'\n---\n\nStorybook allows you to create rich and extensive [documentation](./introduction.md) that will help you and any other stakeholder involved in the development process. Out of the box you have the tooling required to not only write it but also to preview it and build it.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/build-documentation.md","loc":{"lines":{"from":1,"to":5}}}}],["812",{"pageContent":"Preview Storybook's documentation\n\nAt any point during your development, you can preview the documentation you've written. Storybook allows you to generate a preview of the final documentation when you use the `--docs` flag. We recommend including it in your `package.json` as a new script:\n\n```json\n{\n  \"scripts\": {\n    \"storybook-docs\": \"storybook dev --docs\"\n  }\n}","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/build-documentation.md","loc":{"lines":{"from":7,"to":16}}}}],["813",{"pageContent":"Depending on your configuration, when you execute the `storybook-docs` script. Storybook will be put into documentation mode and will generate a different build.\n\nIt will look for any stories available either in [MDX](./mdx.md) or [CSF](../writing-stories/introduction.md#component-story-format) and based on the documentation you've added it will display it...\n\n![Storybook in documentation mode](./storybook-docs-build.png)\n\nThere's some caveats to this build mode, as to the normal Storybook build:\n\n- The top level item refers to the primary story for your component.\n- Each individual story is now in a flattened display mode, with a different set of icons. This allows focus on the documentation itself.\n- Storybook's layout is rendered differently. The toolbar will not be displayed.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/build-documentation.md","loc":{"lines":{"from":19,"to":29}}}}],["814",{"pageContent":"Publish Storybook's documentation\n\nYou can also publish your documentation, the same you would [publish](../sharing/publish-storybook.md) your Storybook. You can use the `--docs` flag with `build-storybook` command. We recommend as well including it as a script in your `package.json` file:\n\n```json\n{\n  \"scripts\": {\n    \"build-storybook-docs\": \"storybook build --docs\"\n  }\n}\n```\n\nBased on the configuration you have, when the `build-storybook-docs` script is executed, Storybook once again will be put into documentation mode and will generate a different build and output the documentation into the `storybook-static` folder.\n\nThe same caveats mentioned above will apply.\n\nYou can use any hosting provider to deploy your documentation, for instance:\n\n- [Vercel](https://vercel.com/)\n- [Netlify](https://www.netlify.com/)\n- [S3](https://aws.amazon.com/en/s3/)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/build-documentation.md","loc":{"lines":{"from":31,"to":51}}}}],["815",{"pageContent":"Learn more about Storybook documentation\n\n- [Autodocs](./autodocs.md) for creating documentation for your stories\n- [MDX](./mdx.md) for customizing your documentation\n- [Doc Blocks](./doc-blocks.md) for authoring your documentation\n- Publishing docs to automate the process of publishing your documentation","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/build-documentation.md","loc":{"lines":{"from":53,"to":58}}}}],["816",{"pageContent":"---\ntitle: Doc blocks\n---\n\nStorybook offers several doc blocks to help document your components and other aspects of your project.\n\nThere are two common ways to use doc blocks in Storybook, within MDX and as part of the docs page template.\n\n## Within MDX\n\nThe blocks are most commonly used within Storybook's [MDX documentation](./mdx.md):\n\n![Screenshot of mdx content](./mdx-example.png)\n\n<!-- prettier-ignore-start -->\n```md\n{/* ButtonDocs.mdx */}\n\nimport { Meta, Primary, Controls, Story } from '@storybook/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n# Button\n\nA button is ...\n\n<Primary />\n\n## Props\n\n<Controls />\n\n## Stories\n\n### Primary\n\nA button can be of primary importance.\n\n<Story of={ButtonStories.Primary} />\n\nA button can be of secondary importance.\n\n<Story of={ButtonStories.Secondary} />\n\n{/* ... */}\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":1,"to":48}}}}],["817",{"pageContent":"Customizing the automatic docs page\n\nThe blocks are also used to define the page template for [automatics docs](./autodocs.md). For example, here's the default template:\n\n![Screenshot of automatic docs template](./autodocs-default-template.png)\n\n```jsx\nimport { Title, Subtitle, Description, Primary, Controls, Stories } from '@storybook/blocks';\n\nexport const autoDocsTemplate = () => (\n  <>\n    <Title />\n    <Subtitle />\n    <Description />\n    <Primary />\n    <Controls />\n    <Stories />\n  </>\n);\n```\n\nIf you [override the default page template](./autodocs.md#write-a-custom-template), you can similarly use Doc Blocks to build the perfect documentation page for your project.\n\nNote that some doc blocks render other blocks. For example, the `<Stories />` block expands to:\n\n<!-- prettier-ignore-start -->\n```md","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":50,"to":76}}}}],["818",{"pageContent":"Stories\n\n<Canvas>\n  ### Story name\n  <Description />\n  <Story />\n  <Source />\n</Canvas>\n\n{/* ... repeat <Canvas> for each story */}\n```\n<!-- prettier-ignore-end -->\n\nAs a result, for example, customizing the [`Source`](../api/doc-block-source.md) block via parameters (see next section) will also affect the Source blocks rendered as part of [`Canvas`](../api/doc-block-canvas.md) blocks.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":77,"to":90}}}}],["819",{"pageContent":"Customizing doc blocks\n\nIn both use cases (MDX and automatic docs), many of the doc blocks can be customized via [parameters](../writing-stories/parameters.md).\n\nFor example, you can filter out the `style` prop from all [`Controls`](../api/doc-block-controls.md) tables through your Storybook:\n\n<!-- prettier-ignore-start -->\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-doc-blocks-controls-exclude-prop.js.mdx',\n    'common/storybook-preview-doc-blocks-controls-exclude-prop.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\nℹ️ Parameters can also be defined at the [component](../writing-stories/parameters.md#component-parameters) (or meta) level or the [story](../writing-stories/parameters.md#story-parameters) level, allowing you to customize Doc Blocks exactly as you need, where you need.\n\n</div>\n\nThe blocks that accept customization via parameters are marked in the list of available blocks below.\n\nWhen using a doc block in MDX, it can also be customized with its props:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":92,"to":116}}}}],["820",{"pageContent":"</div>\n\nThe blocks that accept customization via parameters are marked in the list of available blocks below.\n\nWhen using a doc block in MDX, it can also be customized with its props:\n\n<!-- prettier-ignore-start -->\n```md\n<Controls exclude={['style']}>\n```\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":116,"to":126}}}}],["821",{"pageContent":"Available blocks\n\nEach block has a dedicated API reference page detailing usage, available options, and technical details.\n\n### [ArgTypes](../api/doc-block-argtypes.md)\n\n<div class=\"aside\">\n\nAccepts parameters in the namespace `parameters.docs.argTypes`.\n\n</div>\n\nThe `ArgTypes` block can be used to show a static table of [arg types](../api/argtypes.md) for a given component as a way to document its interface.\n\n![Screenshot of ArgTypes block](../api/doc-block-argtypes.png)\n\n### [Canvas](../api/doc-block-canvas.md)\n\n<div class=\"aside\">\n\nAccepts parameters in the namespace `parameters.docs.canvas`.\n\n</div>\n\nThe `Canvas` block is a wrapper around a [`Story`](../api/doc-block-story.md), featuring a toolbar that allows you to interact with its content while automatically providing the required [`Source`](../api/doc-block-source.md) snippets.\n\n![Screenshot of Canvas block](../api/doc-block-canvas.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":128,"to":154}}}}],["822",{"pageContent":"[ColorPalette](../api/doc-block-colorpalette.md)\n\nThe `ColorPalette` block allows you to document all color-related items (e.g., swatches) used throughout your project.\n\n![Screenshot of ColorPalette and ColorItem blocks](../api/doc-block-colorpalette.png)\n\n### [Controls](../api/doc-block-controls.md)\n\n<div class=\"aside\">\n\nAccepts parameters in the namespace `parameters.docs.controls`.\n\n</div>\n\nThe `Controls` block can be used to show a dynamic table of args for a given story, as a way to document its interface, and to allow you to change the args for a (separately) rendered story (via the [`Story`](../api/doc-block-story.md) or [`Canvas`](../api/doc-block-canvas.md) blocks).\n\n![Screenshot of Controls block](../api/doc-block-controls.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":156,"to":172}}}}],["823",{"pageContent":"[Description](../api/doc-block-description.md)\n\nThe `Description` block displays the description for a component, story, or meta obtained from their respective JSDoc comments.\n\n![Screenshot of Description block](../api/doc-block-title-subtitle-description.png)\n\n### [IconGallery](../api/doc-block-icongallery.md)\n\nThe `IconGallery` block lets you quickly document all icons associated with your project, displayed in a neat grid.\n\n![Screenshot of IconGallery and IconItem blocks](../api/doc-block-icongallery.png)\n\n### [Markdown](../api/doc-block-markdown.md)\n\nThe `Markdown` block allows you to import and include plain markdown in your MDX files.\n\n![Screenshot of Markdown block](../api/doc-block-markdown.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":174,"to":190}}}}],["824",{"pageContent":"[Markdown](../api/doc-block-markdown.md)\n\nThe `Markdown` block allows you to import and include plain markdown in your MDX files.\n\n![Screenshot of Markdown block](../api/doc-block-markdown.png)\n\n### [Meta](../api/doc-block-meta.md)\n\nThe `Meta` block is used to [attach](#attached-vs-unattached) a custom MDX docs page alongside a component’s list of stories. It doesn’t render any content but serves two purposes in an MDX file:\n\n- Attaches the MDX file to a component and its stories, or\n- Controls the location of the unattached docs entry in the sidebar.\n\n### [Primary](../api/doc-block-primary.md)\n\nThe `Primary` block displays the primary (first defined in the stories file) story in a [`Story`](../api/doc-block-story.md) block. It is typically rendered immediately under the title in a docs entry.\n\n![Screenshot of Primary block](../api/doc-block-primary.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":190,"to":207}}}}],["825",{"pageContent":"[Source](../api/doc-block-source.md)\n\n<div class=\"aside\">\n\nAccepts parameters in the namespace `parameters.docs.source`.\n\n</div>\n\nThe `Source` block is used to render a snippet of source code directly.\n\n![Screenshot of Source block](../api/doc-block-source.png)\n\n### [Stories](../api/doc-block-stories.md)\n\nThe `Stories` block renders the full collection of stories in a stories file.\n\n![Screenshot of Stories block](../api/doc-block-stories.png)\n\n### [Story](../api/doc-block-story.md)\n\n<div class=\"aside\">\n\nAccepts parameters in the namespace `parameters.docs.story`.\n\n</div>\n\nStories (component tests) are Storybook's fundamental building blocks.\n\nIn Storybook Docs, you can render any of your stories from your CSF files in the context of an MDX file with all annotations (parameters, args, loaders, decorators, play function) applied using the `Story` block.\n\n![Screenshot of Story block](../api/doc-block-story.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":209,"to":239}}}}],["826",{"pageContent":"[Subtitle](../api/doc-block-subtitle.md)\n\nThe `Subtitle` block can serve as a secondary heading for your docs entry.\n\n![Screenshot of Subtitle block](../api/doc-block-title-subtitle-description.png)\n\n### [Title](../api/doc-block-title.md)\n\nThe `Title` block serves as the primary heading for your docs entry. It is typically used to provide the component or page name.\n\n![Screenshot of Title block](../api/doc-block-title-subtitle-description.png)\n\n### [Typeset](../api/doc-block-typeset.md)\n\nThe `Typeset` block helps document the fonts used throughout your project.\n\n![Screenshot of Typeset block](../api/doc-block-typeset.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":241,"to":257}}}}],["827",{"pageContent":"[Typeset](../api/doc-block-typeset.md)\n\nThe `Typeset` block helps document the fonts used throughout your project.\n\n![Screenshot of Typeset block](../api/doc-block-typeset.png)\n\n### [Unstyled](../api/doc-block-unstyled.md)\n\nThe `Unstyled` block is a unique block that disables Storybook's default styling in MDX docs wherever it is added.\n\nBy default, most elements (like `h1`, `p`, etc.) in docs have a few default styles applied to ensure the docs look good. However, sometimes you might want some of your content not to have these styles applied. In those cases, wrap the content with the `Unstyled` block to remove the default styles.\n\n![Screenshot of Unstyled block](../api/doc-block-unstyled.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":257,"to":269}}}}],["828",{"pageContent":"Make your own Doc Blocks\n\nStorybook also provides a [`useOf` hook](../api/doc-block-useof.md) to make it easier to create your own blocks that function like the built-in blocks.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":271,"to":273}}}}],["829",{"pageContent":"Troubleshooting","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":275,"to":275}}}}],["830",{"pageContent":"Why can't I use the Doc Blocks inside my stories?\n\nStorybook's Doc Blocks are highly customizable and helpful building blocks to assist you with building your custom documentation. Although most of them enable you to customize them with parameters or globally to create custom [documentation templates](#customizing-the-automatic-docs-page), they are primarily designed for MDX files. For example, if you try to add the `ColorPalette` block to your stories as follows, you'll get an error message when the story loads in Storybook.\n\n<!-- prettier-ignore-start -->\n<CodeSnippets\n  paths={[\n    'common/storybook-canvas-doc-block-story.js.mdx',\n    'common/storybook-canvas-doc-block-story.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":277,"to":289}}}}],["831",{"pageContent":"Learn more about Storybook documentation\n\n- [Autodocs](./autodocs.md) for creating documentation for your stories\n- [MDX](./mdx.md) for customizing your documentation\n- Doc Blocks for authoring your documentation\n- [Publishing docs](./build-documentation.md) to automate the process of publishing your documentation","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/doc-blocks.md","loc":{"lines":{"from":291,"to":296}}}}],["832",{"pageContent":"---\ntitle: 'How to document components'\n---\n\nWhen you write component stories during development, you also create basic documentation to revisit later.\n\nStorybook gives you tools to expand this essential documentation with prose and layout that feature your components and stories prominently. That allows you to create UI library usage guidelines, design system sites, and more.\n\n![Docs page](./docs-completed.png)\n\nIf you're including Storybook in your project for the [first time](../get-started/install.md), we provide you with a [documentation page](./autodocs.md) (\"Autodocs\" for short), positioned near your stories. It's a baseline template automatically generated, listing your existing stories and relevant metadata.\n\nAdditionally, you can customize this template if needed or create free-form pages for each component using [MDX](./mdx.md). In both cases, you’ll use Doc Blocks as the building blocks to create full-featured documentation.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/introduction.md","loc":{"lines":{"from":1,"to":13}}}}],["833",{"pageContent":"Docs is autoconfigured to work out of the box in most use cases. In some cases, you may need or want to tweak the configuration. Read more about it [here](https://storybook.js.org/addons/@storybook/addon-docs).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/introduction.md","loc":{"lines":{"from":15,"to":15}}}}],["834",{"pageContent":"---\ntitle: 'MDX'\n---\n\n[MDX](https://mdxjs.com/) files mix Markdown and Javascript/JSX to create rich interactive documentation. You can use Markdown’s readable syntax (such as `# heading`) for your documentation, include stories defined in [Component Story Format (CSF)](../api/csf.md), and freely embed JSX component blocks at any point in the file. All at once.\n\nIn addition, you can write pure documentation pages in MDX and add them to Storybook alongside your stories.\n\n![MDX simple example result](./mdx-hero.png)\n\n<div class=\"aside\">\n\nWriting stories directly in MDX was deprecated in Storybook 7. Please reference the <LinkWithVersion version=\"6.5\" href=\"./mdx.md\">previous documentation</LinkWithVersion> for guidance on that feature.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":1,"to":15}}}}],["835",{"pageContent":"Basic example\n\nLet's start with an example, `Checkbox.mdx`, combining Markdown with a single story.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/checkbox-story.mdx.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThis MDX file references a story file, `Checkbox.stories.js|ts`, that is written in [Component Story Format (CSF)](../api/csf.md):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/checkbox-story-csf.ts.mdx',\n    'web-components/checkbox-story-csf.js.mdx',\n    'web-components/checkbox-story-csf.ts.mdx',\n    'common/checkbox-story-csf.js.mdx',\n    'common/checkbox-story-csf.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-docs/mdx#snippet-checkbox-story-csf\"\n/>\n\n<!-- prettier-ignore-end -->\n\nAnd here's how that's rendered in Storybook:\n\n![MDX simple example result](./mdx-simple.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":17,"to":51}}}}],["836",{"pageContent":"<!-- prettier-ignore-end -->\n\nAnd here's how that's rendered in Storybook:\n\n![MDX simple example result](./mdx-simple.png)\n\nThere’s a lot going on here. We're writing Markdown, we're writing JSX, and we're also defining and referencing Storybook stories that are drop-in compatible with the entire Storybook ecosystem.\n\nLet’s break it down.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":51,"to":59}}}}],["837",{"pageContent":"MDX and CSF\n\nThe first thing you'll notice is that the component documentation is divided into distinct formats: one for writing component stories describing each possible component state and the second one for documenting how to use them. This split leverages the best qualities of each format:\n\n- **CSF** is great for succinctly defining stories (component examples). If you use TypeScript, it also provides type safety and auto-completion.\n- **MDX** is great for writing structured documentation and composing it with interactive JSX elements.\n\n<div class=\"aside\">\n\n💡 If you’re coming from a previous version of Storybook, you might be accustomed to using MDX both for **documentation** and for defining **stories** in the same `.stories.mdx` file. We’ve deprecated this functionality and plan to remove it in a future version of Storybook. We provide [migration](#automigration) scripts to help you onto the new format.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":61,"to":72}}}}],["838",{"pageContent":"Anatomy of MDX\n\nAssuming you’re already familiar with writing stories with [CSF](../writing-stories/introduction.md), we can dissect the MDX side of things in greater detail.\n\nThe document consists of a number of blocks separated by blank lines. Since MDX mixes a few different languages together, it uses those blank lines to help distinguish where one starts, and the next begins. Failing to separate blocks by whitespace can cause (sometimes cryptic) parse errors.\n\nGoing through the code blocks in sequence:\n\n<!-- prettier-ignore-start -->\n\n```mdx\n{ /* Checkbox.mdx */ }","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":74,"to":85}}}}],["839",{"pageContent":"<!-- prettier-ignore-end -->\n\nComments in MDX are JSX blocks that contain JS comments.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-auto-docs-mdx-docs-imports.mdx.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nImports the components and stories that will be used in the JSX throughout the rest of the file.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-auto-docs-mdx-docs-meta-block.mdx.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\nℹ️ When providing the `of` prop to the `Meta` block, make sure that you're referencing the [**default export**](../api/csf.md#default-export) of the story file and not the component itself to prevent render issues with the generated documentation.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":88,"to":118}}}}],["840",{"pageContent":"</div>\n\nThe `Meta` block defines where the document will be placed in the sidebar. In this case, it is adjacent to the Checkbox’s stories. By default, the docs sidebar node is titled `\"Docs\"`, but this can be customized by passing a `name` prop (e.g., `<Meta of={CheckboxStories} name=\"Info\" />`). If you want to place a docs node at an arbitrary point in the navigation hierarchy, you can use the `title` prop (e.g., `<Meta title=\"path/to/node\" />`).\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-auto-docs-mdx-docs-definition.mdx.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nMDX2 supports standard markdown ([”commonmark”](https://commonmark.org/)) by default and can be extended to support [GitHub-flavored markdown (GFM)](https://github.github.com/gfm) and other extensions (see [Breaking changes](#breaking-changes), below).\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-auto-docs-mdx-docs-story.mdx.mdx',\n  ]}\n/>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":118,"to":140}}}}],["841",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-auto-docs-mdx-docs-story.mdx.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nFinally, MDX supports blocks of arbitrary JSX.\n\nIn this case, we are leveraging “Doc Blocks”, a library of documentation components designed to work with Storybook stories to show your stories, your component APIs & controls for interacting with your components inside your documentation, among other utilities.\n\nIn addition to Doc Blocks, MDX can incorporate arbitrary React components, making it a very flexible documentation system. Suppose you want a stylized list of “dos and don’ts” for your component; you can use off-the-shelf components or write your own.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-auto-docs-mdx-docs-dos-donts.mdx.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":140,"to":164}}}}],["842",{"pageContent":"Known limitations\n\nWhile MDX2 supports a variety of runtimes ([React](https://mdxjs.com/packages/react/), [Preact](https://mdxjs.com/packages/preact/), [Vue](https://mdxjs.com/packages/vue/)), Storybook’s implementation is React-only. That means your documentation is rendered in React, while your stories render in the runtime of your choice (React, Vue, Angular, Web Components, Svelte, etc.).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":166,"to":168}}}}],["843",{"pageContent":"Breaking changes\n\nThere are many breaking changes if you move from MDX 1 to version 2. As far as we know, all of these are due to changes in the MDX library itself rather than changes to Storybook’s usage. Nevertheless, as an MDX user, you will probably need to update your MDX files as part of the upgrade. MDX has published their own [Migration guide](https://mdxjs.com/migrating/v2/#update-mdx-files). Here we try to summarize some of the fundamental changes for Storybook users.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":170,"to":172}}}}],["844",{"pageContent":"Custom components apply differently\n\nFrom the MDX migration guide:\n\n> We now “sandbox” components, for lack of a better name. It means that when you pass a component for `h1`, it does get used for `# hi` but not for `<h1>hi</h1>`\n\nThis means that the first heading in the following example gets replaced, whereas the second does not. It may not sound like a significant change, but in practice, it is highly disruptive and manifests itself in various ways. Unfortunately, this cannot be automatically converted in a safe way.\n\n<!-- prettier-ignore-start -->\n\n```md\n# Some heading\n\n<h1>another heading</h1>\n```\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":174,"to":190}}}}],["845",{"pageContent":"Lack of GitHub Flavored Markdown (GFM)\n\nAlso, from the MDX migration guide:\n\n> We turned off GFM features in MDX by default. GFM extends CommonMark to add autolink literals, footnotes, strikethrough, tables, and task lists. If you do want these features, you can use a plugin. How to do so is described in [our guide on GFM](https://mdxjs.com/guides/gfm/).\n\nIn Storybook, you can apply MDX options, including plugins, in the main configuration file:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\npaths={[\n  'common/storybook-main-config-remark-options.js.mdx',\n  'common/storybook-main-config-remark-options.ts.mdx',\n]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 The [`remark-gfm`](https://github.com/remarkjs/remark-gfm) package isn't provided by default during migration. We recommend installing it as a development dependency if you use its features.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":192,"to":215}}}}],["846",{"pageContent":"Automigration\n\nTo help you transition to the new version, we've created a migration helper in our CLI. We recommend using it and reaching out to the maintainers using the default communication channels (e.g., [Discord server](https://discord.com/channels/486522875931656193/570426522528382976), [GitHub issues](https://github.com/storybookjs/storybook/issues)) for problems you encounter.\n\n```shell\nnpx storybook@latest automigrate mdx1to2\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":217,"to":223}}}}],["847",{"pageContent":"Setup custom documentation\n\nIn addition, to document your components with MDX, you can also extend it to write other types of content, such as guidelines or best practices on how to use them. To enable custom documentation for your stories with this format, start by updating your Storybook configuration file (i.e., `.storybook/main.js|ts|cjs`).\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-auto-docs-main-mdx-config.js.mdx',\n    'common/storybook-auto-docs-main-mdx-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nCreate an MDX file to add your custom documentation. Depending on how you want your documentation to render in the UI, you'll need to consider the following use cases.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":225,"to":240}}}}],["848",{"pageContent":"Using the `Meta` Doc Block\n\nIf you need to match the component documentation to an existing story, you can configure the [`Meta`](../api/doc-block-meta.md) Doc Block to control how the documentation gets rendered. Out of the box, it allows you to define a custom title or a reference to the story you need to document (i.e., via the `of` prop). For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-auto-docs-baseline-example.custom-title.mdx.mdx',\n    'common/storybook-auto-docs-baseline-example.of-prop.mdx.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":242,"to":255}}}}],["849",{"pageContent":"Writing unattached documentation\n\nSuppose you're documenting an existing component and only provide the `Meta` Doc Block without additional props or other blocks. In that case, Storybook will consider it as \"unattached\" documentation, or in other words, a \"documentation-only\" page, and it will render it differently in the sidebar navigation menu:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\npaths={[\n  'common/storybook-auto-docs-mdx-docs-docs-only-page.mdx.mdx',\n]}\n/>\n\n<!-- prettier-ignore-end -->\n\n![MDX docs only story](./mdx-documentation-only.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":257,"to":271}}}}],["850",{"pageContent":"Using the File System\n\nHowever, providing the `Meta` Doc Block may not be required for certain use cases, such as standalone pages or even as guidelines for testing your components. In that case, you can safely omit it. Storybook will instead rely on the file's physical location to place the documentation in the sidebar, overriding any pre-existent [auto-generated](./autodocs.md) documentation with your own. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-auto-docs-custom-file.mdx.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 If you're overriding an existing auto-generated documentation page enabled via [`tags`](./autodocs.md#setup-automated-docs) configuration property, we recommend removing it to avoid errors.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":273,"to":291}}}}],["851",{"pageContent":"💡 If you're overriding an existing auto-generated documentation page enabled via [`tags`](./autodocs.md#setup-automated-docs) configuration property, we recommend removing it to avoid errors.\n\n</div>\n\nOnce the custom MDX documentation is loaded, Storybook will infer the title and location using the same heuristic rules to generate [auto-title stories](../configure/sidebar-and-urls.md#csf-30-auto-titles) and render it in the sidebar as a `Docs` entry.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":291,"to":295}}}}],["852",{"pageContent":"Fully control custom documentation\n\nDocumentation can be expensive to maintain and keep up to date when applied to every project component. To help simplify this process, Storybook provides a set of useful UI components (i.e., Doc Blocks) to help cover more advanced cases. If you need additional content, use them to help create your custom documentation.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-auto-docs-starter-example.mdx.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n### Working with multiple components\n\nIf you need to document multiple components in a single documentation page, you can reference them directly inside your MDX file. Internally, Storybook looks for the story metadata and composes it alongside your existing documentation. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-auto-docs-mdx-file.mdx.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":297,"to":323}}}}],["853",{"pageContent":"Linking to other stories and pages\n\nAnother way to improve documentation is by linking to other stories and pages. Suppose you already have a component story with the following unique identifier, `some--id`, and you want to link it to your documentation page. In that case, you can use the `path` query string to redirect to the documentation entry related to the story:\n\n```md\n[Go to specific documentation page](?path=/docs/some--id)\n```\n\nInstead, if you need to target a specific documentation section, you can adjust the link to point at it. For example:\n\n```md\n[Go to the conclusion of the documentation page](?path=/docs/some--id#conclusion)\n```\n\nHowever, cross-linking documentation isn't restricted to documentation pages. You can adjust the `path` query and supply the story's unique identifier if you need to reference a specific one. For example:\n\n<!--This redirects to the **Canvas** tab of the story: -->\n\n```md\n[Go to specific story canvas](?path=/story/some--id)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":325,"to":344}}}}],["854",{"pageContent":"<!--You can also use anchors to target a specific section of a page: -->\n\n<div class=\"aside\">\n💡 By applying this pattern with the Controls addon, all anchors will be ignored in Canvas based on how Storybook handles URLs to track the args values.\n</div>\n\n<!--\nTODO: Uncomment once support for `transcludeMarkdown` is confirmed","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":347,"to":354}}}}],["855",{"pageContent":"Creating a Changelog story\n\nOne common use case for documentation-only MDX is importing a project's `CHANGELOG.md`, so that users can easily refer to the CHANGELOG via a documentation node in Storybook.\n\nFirst, ensure that `transcludeMarkdown` is set to `true` in `main.js`:\n\n<!-- prettier-ignore-start - ->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-enable-transcludemarkdown.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end - ->\n\nThen, import the markdown and treat the imported file as a component in the MDX file:\n\n```mdx\nimport { Meta } from '@storybook/blocks';\n\nimport Changelog from '../CHANGELOG.md';\n\n<Meta title=\"Changelog\" />\n\n<Changelog />\n```\n\n\n![Changelog markdown in an MDX story](./changelog-mdx-md-transcludemarkdown-optimized.png)\n\n-->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":356,"to":387}}}}],["856",{"pageContent":"Troubleshooting","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":389,"to":389}}}}],["857",{"pageContent":"The MDX documentation doesn't render in my environment\n\nAs Storybook relies on MDX 2 to render documentation, some technical limitations may prevent you from migrating to this version. If that's the case, we've prepared a set of instructions to help you transition to this new version.\n\n#### Storybook doesn't create documentation for my component stories\n\nIf you run into a situation where Storybook is not able to able to detect and render the documentation for your component stories, it may be due to a misconfiguration in your Storybook. Check your configuration file (i.e., `.storybook/main.js|ts`) and ensure the `stories` configuration element provides the correct path to your stories location(e.g., `../src/**/*.stories.@(js|jsx|ts|tsx)`).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":391,"to":397}}}}],["858",{"pageContent":"The documentation doesn't render using `stories.mdx`\n\nStarting with Storybook 7.0, we've deprecated documenting stories with the `.stories.mdx` file extension. If you're still using the `stories.mdx` extension, we recommend [migrating](#automigration) as soon as possible to avoid any issues, as the majority of APIs and [Doc Blocks](./doc-blocks.md) used by Storybook were overhauled to support MDX 2 and the new MDX compiler (e.g., the [`Meta`](../api/doc-block-meta.md) block).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":399,"to":401}}}}],["859",{"pageContent":"MDX 1 fallback\n\nIf you're still having issues with MDX documentation, you can enable MDX 1 as a fallback. To do so, you'll need to take some additional steps.\n\nRun the following command to install the required dependency.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-fallback-mdx-install.yarn.js.mdx',\n    'common/storybook-fallback-mdx-install.npm.js.mdx',\n    'common/storybook-fallback-mdx-install.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nUpdate your Storybook configuration (in `.storybook/main.js|ts`), and provide the `legacyMdx1` feature flag to enable MDX 1 support.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-fallback-mdx.js.mdx',\n    'common/storybook-main-fallback-mdx.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":403,"to":432}}}}],["860",{"pageContent":"The migration seems flaky and keeps failing\n\nBy default, running the [migration command](#automigration) will try and migrate all existing MDX files in your project according to the MDX 2 specification. However, this might not always be possible, and you might run into issues during the migration. To help you troubleshoot those issues, we've prepared some recommendations that might help you.\n\nStart by running the following command inside your project directory:\n\n```shell\nnpx @hipster/mdx2-issue-checker","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":434,"to":441}}}}],["861",{"pageContent":"<div class=\"aside\">\n💡 Depending on the volume, you may be required to run the command multiple times to fix all the issues.\n</div>\n\nWhen it finishes, it will output the list of files causing issues. You can then use this information to fix the problems manually.\n\nAdditionally, if you're working with VSCode, you can add the [MDX extension](https://marketplace.visualstudio.com/items?itemName=unifiedjs.vscode-mdx) and enable MDX experimental support for linting, type checking, and auto-completion by adding the following to your user settings:\n\n```json\n{\n  \"mdx.experimentalLanguageServer\": true\n}\n```\n\nIf you're still encountering issues, we recommend reaching out to the maintainers using the default communication channels (e.g., [Discord server](https://discord.com/channels/486522875931656193/570426522528382976), [GitHub issues](https://github.com/storybookjs/storybook/issues)).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":444,"to":458}}}}],["862",{"pageContent":"Learn more about Storybook documentation\n\n- [Autodocs](./autodocs.md) for creating documentation for your stories\n- MDX for customizing your documentation\n- [Doc Blocks](./doc-blocks.md) for authoring your documentation\n- [Publishing docs](./build-documentation.md) to automate the process of publishing your documentation","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-docs/mdx.md","loc":{"lines":{"from":460,"to":465}}}}],["863",{"pageContent":"---\ntitle: 'Args'\n---\n\n<YouTubeCallout id=\"0gOfS6K0x0E\" title=\"Build better UIs with Storybook Args\" />\n\nA story is a component with a set of arguments that define how the component should render. “Args” are Storybook’s mechanism for defining those arguments in a single JavaScript object. Args can be used to dynamically change props, slots, styles, inputs, etc. It allows Storybook and its addons to live edit components. You _do not_ need to modify your underlying component code to use args.\n\nWhen an arg’s value changes, the component re-renders, allowing you to interact with components in Storybook’s UI via addons that affect args.\n\nLearn how and why to write stories in [the introduction](./introduction.md#using-args). For details on how args work, read on.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/args.md","loc":{"lines":{"from":1,"to":11}}}}],["864",{"pageContent":"Args object\n\nThe `args` object can be defined at the [story](#story-args), [component](#component-args) and [global level](#global-args). It is a JSON serializable object composed of string keys with matching valid value types that can be passed into a component for your framework.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/args.md","loc":{"lines":{"from":13,"to":15}}}}],["865",{"pageContent":"Story args\n\nTo define the args of a single story, use the `args` CSF story key:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-with-args.js.mdx',\n    'react/button-story-with-args.ts.mdx',\n    'vue/button-story-with-args.2.js.mdx',\n    'vue/button-story-with-args.2.ts.mdx',\n    'vue/button-story-with-args.3.js.mdx',\n    'vue/button-story-with-args.3.ts.mdx',\n    'angular/button-story-with-args.ts.mdx',\n    'web-components/button-story-with-args.js.mdx',\n    'web-components/button-story-with-args.ts.mdx',\n    'svelte/button-story-with-args.js.mdx',\n    'html/button-story-with-args.ts.mdx',\n    'html/button-story-with-args.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/args#snippet-button-story-with-args\"\n/>\n\n\n<!-- prettier-ignore-end -->\n\nThese args will only apply to the story for which they are attached, although you can [reuse](./build-pages-with-storybook.md#args-composition-for-presentational-screens) them via JavaScript object reuse:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/args.md","loc":{"lines":{"from":17,"to":45}}}}],["866",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/button-story-primary-long-name.ts.mdx',\n    'web-components/button-story-primary-long-name.js.mdx',\n    'web-components/button-story-primary-long-name.ts.mdx',\n    'common/button-story-primary-long-name.js.mdx',\n    'common/button-story-primary-long-name.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/args#snippet-button-story-primary-long-name\"\n/>\n\n<!-- prettier-ignore-end -->\n\nIn the above example, we use the [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) feature of ES 2015.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/args.md","loc":{"lines":{"from":47,"to":63}}}}],["867",{"pageContent":"Component args\n\nYou can also define args at the component level; they will apply to all the component's stories unless you overwrite them. To do so, use the `args` key on the `default` CSF export:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-component-args-primary.js.mdx',\n    'react/button-story-component-args-primary.ts.mdx',\n    'vue/button-story-component-args-primary.js.mdx',\n    'vue/button-story-component-args-primary.ts.mdx',\n    'angular/button-story-component-args-primary.ts.mdx',\n    'web-components/button-story-component-args-primary.js.mdx',\n    'web-components/button-story-component-args-primary.ts.mdx',\n    'svelte/button-story-component-args-primary.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/args#snippet-button-story-component-args-primary\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/args.md","loc":{"lines":{"from":65,"to":86}}}}],["868",{"pageContent":"Global args\n\nYou can also define args at the global level; they will apply to every component's stories unless you overwrite them. To do so, export the `args` key in your `preview.js`:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/button-story-project-args-theme.js.mdx',\n    'common/button-story-project-args-theme.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/args.md","loc":{"lines":{"from":88,"to":101}}}}],["869",{"pageContent":"Args composition\n\nYou can separate the arguments to a story to compose in other stories. Here's how you can combine args for multiple stories of the same component.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/button-story-primary-composition.ts.mdx',\n    'web-components/button-story-primary-composition.js.mdx',\n    'web-components/button-story-primary-composition.ts.mdx',\n    'common/button-story-primary-composition.js.mdx',\n    'common/button-story-primary-composition.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/args#snippet-button-story-primary-composition\"\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 If you find yourself re-using the same args for most of a component's stories, you should consider using [component-level args](#component-args).\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/args.md","loc":{"lines":{"from":103,"to":127}}}}],["870",{"pageContent":"<div class=\"aside\">\n\n💡 If you find yourself re-using the same args for most of a component's stories, you should consider using [component-level args](#component-args).\n\n</div>\n\nArgs are useful when writing stories for composite components that are assembled from other components. Composite components often pass their arguments unchanged to their child components, and similarly, their stories can be compositions of their child components stories. With args, you can directly compose the arguments:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/page-story.js.mdx',\n    'react/page-story.ts.mdx',\n    'angular/page-story.ts.mdx',\n    'vue/page-story.2.js.mdx',\n    'vue/page-story.2.ts.mdx',\n    'vue/page-story.3.js.mdx',\n    'vue/page-story.3.ts.mdx',\n    'web-components/page-story.js.mdx',\n    'web-components/page-story.ts.mdx',\n    'svelte/page-story.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/args#snippet-page-story\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/args.md","loc":{"lines":{"from":127,"to":154}}}}],["871",{"pageContent":"Args can modify any aspect of your component\n\nYou can use args in your stories to configure the component's appearance, similar to what you would do in an application. For example, here's how you could use a `footer` arg to populate a child component:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/page-story-slots.js.mdx',\n    'react/page-story-slots.ts.mdx',\n    'vue/page-story-slots.2.js.mdx',\n    'vue/page-story-slots.2.ts.mdx',\n    'vue/page-story-slots.3.js.mdx',\n    'vue/page-story-slots.3.ts.mdx',\n    'angular/page-story-slots.ts.mdx',\n    'web-components/page-story-slots.js.mdx',\n    'web-components/page-story-slots.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/args#snippet-page-story-slots\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/args.md","loc":{"lines":{"from":156,"to":178}}}}],["872",{"pageContent":"Setting args through the URL\n\nYou can also override the set of initial args for the active story by adding an `args` query parameter to the URL. Typically you would use the [Controls addon](../essentials/controls.md) to handle this. For example, here's how you could set a `size` and `style` arg in the Storybook's URL:\n\n```\n?path=/story/avatar--default&args=style:rounded;size:100","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/args.md","loc":{"lines":{"from":180,"to":185}}}}],["873",{"pageContent":"As a safeguard against [XSS](https://owasp.org/www-community/attacks/xss/) attacks, the arg's keys and values provided in the URL are limited to alphanumeric characters, spaces, underscores, and dashes. Any other types will be ignored and removed from the URL, but you can still use them with the Controls addon and [within your story](#mapping-to-complex-arg-values).\n\nThe `args` param is always a set of `key: value` pairs delimited with a semicolon `;`. Values will be coerced (cast) to their respective `argTypes` (which may have been automatically inferred). Objects and arrays are supported. Special values `null` and `undefined` can be set by prefixing with a bang `!`. For example, `args=obj.key:val;arr[0]:one;arr[1]:two;nil:!null` will be interpreted as:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'common/storybook-args-url-params-converted.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/args.md","loc":{"lines":{"from":188,"to":200}}}}],["874",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'common/storybook-args-url-params-converted.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nSimilarly, special formats are available for dates and colors. Date objects will be encoded as `!date(value)` with value represented as an ISO date string. Colors are encoded as `!hex(value)`, `!rgba(value)` or `!hsla(value)`. Note that rgb(a) and hsl(a) should not contain spaces or percentage signs in the URL.\n\nArgs specified through the URL will extend and override any default values of args set on the story.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/args.md","loc":{"lines":{"from":200,"to":212}}}}],["875",{"pageContent":"Mapping to complex arg values\n\nComplex values such as JSX elements cannot be serialized to the manager (e.g., the Controls addon) or synced with the URL. Arg values can be \"mapped\" from a simple string to a complex type using the `mapping` property in `argTypes` to work around this limitation. It works in any arg but makes the most sense when used with the `select` control type.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/my-component-argtypes-with-mapping.ts.mdx',\n    'web-components/my-component-argtypes-with-mapping.js.mdx',\n    'web-components/my-component-argtypes-with-mapping.ts.mdx',\n    'common/my-component-argtypes-with-mapping.js.mdx',\n    'common/my-component-argtypes-with-mapping.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nNote that `mapping` does not have to be exhaustive. If the arg value is not a property of `mapping`, the value will be used directly. Keys in `mapping` always correspond to arg _values_, not their index in the `options` array.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/args.md","loc":{"lines":{"from":214,"to":232}}}}],["876",{"pageContent":"<details>\n<summary>Using args in addons</summary>\n\nIf you are [writing an addon](../addons/writing-addons.md) that wants to read or update args, use the `useArgs` hook exported by `@storybook/manager-api`:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/args-usage-with-addons.js.mdx'\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n</details>\n\n<details>\n<summary>parameters.passArgsFirst</summary>\n\nIn Storybook 6+, we pass the args as the first argument to the story function. The second argument is the “context”, which includes story parameters, globals, argTypes, and other information.\n\nIn Storybook 5 and before we passed the context as the first argument. If you’d like to revert to that functionality set the `parameters.passArgsFirst` parameter in [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering):\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/args.md","loc":{"lines":{"from":234,"to":258}}}}],["877",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-parameters-old-format.js.mdx',\n    'common/storybook-preview-parameters-old-format.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n  <div class=\"aside\">\n  💡 Note that `args` is still available as a key in the context.\n  </div>\n</details>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/args.md","loc":{"lines":{"from":258,"to":272}}}}],["878",{"pageContent":"---\ntitle: 'Building pages with Storybook'\n---\n\nStorybook helps you build any component, from small “atomic” components to composed pages. But as you move up the component hierarchy toward the page level, you deal with more complexity.\n\nThere are many ways to build pages in Storybook. Here are common patterns and solutions.\n\n- Pure presentational pages.\n- Connected components (e.g., network requests, context, browser environment).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":1,"to":10}}}}],["879",{"pageContent":"Pure presentational pages\n\nTeams at the BBC, The Guardian, and the Storybook maintainers themselves build pure presentational pages. If you take this approach, you don't need to do anything special to render your pages in Storybook.\n\nIt's straightforward to write components to be fully presentational up to the screen level. That makes it easy to show in Storybook. The idea is that you do all the messy “connected” logic in a single wrapper component in your app outside of Storybook. You can see an example of this approach in the [Data](https://storybook.js.org/tutorials/intro-to-storybook/react/en/data/) chapter of the Intro to Storybook tutorial.\n\nThe benefits:\n\n- Easy to write stories once components are in this form.\n- All the data for the story is encoded in the args of the story, which works well with other parts of Storybook's tooling (e.g. [controls](../essentials/controls.md)).\n\nThe downsides:\n\n- Your existing app may not be structured in this way, and it may be difficult to change it.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":12,"to":25}}}}],["880",{"pageContent":"The downsides:\n\n- Your existing app may not be structured in this way, and it may be difficult to change it.\n\n- Fetching data in one place means that you need to drill it down to the components that use it. This can be natural in a page that composes one big GraphQL query (for instance), but other data fetching approaches may make this less appropriate.\n\n- It's less flexible if you want to load data incrementally in different places on the screen.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":25,"to":31}}}}],["881",{"pageContent":"Args composition for presentational screens\n\nWhen you are building screens in this way, it is typical that the inputs of a composite component are a combination of the inputs of the various sub-components it renders. For instance, if your screen renders a page layout (containing details of the current user), a header (describing the document you are looking at), and a list (of the subdocuments), the inputs of the screen may consist of the user, document and subdocuments.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/simple-page-implementation.js.mdx',\n    'react/simple-page-implementation.ts.mdx',\n    'vue/simple-page-implementation.2.js.mdx',\n    'vue/simple-page-implementation.3.js.mdx',\n    'angular/simple-page-implementation.ts.mdx',\n    'web-components/simple-page-implementation.js.mdx',\n    'web-components/simple-page-implementation.ts.mdx',\n    'svelte/simple-page-implementation.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":33,"to":52}}}}],["882",{"pageContent":"<!-- prettier-ignore-end -->\n\nIn such cases, it is natural to use [args composition](./args.md#args-composition) to build the stories for the page based on the stories of the sub-components:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/page-story-with-args-composition.ts.mdx',\n    'web-components/page-story-with-args-composition.js.mdx',\n    'web-components/page-story-with-args-composition.ts.mdx',\n    'common/page-story-with-args-composition.js.mdx',\n    'common/page-story-with-args-composition.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/build-pages-with-storybook#snippet-page-story-with-args-composition\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":52,"to":70}}}}],["883",{"pageContent":"<!-- prettier-ignore-end -->\n\nThis approach is beneficial when the various subcomponents export a complex list of different stories. You can pick and choose to build realistic scenarios for your screen-level stories without repeating yourself. Your story maintenance burden is minimal by reusing the data and taking a Don't-Repeat-Yourself(DRY) philosophy.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":70,"to":72}}}}],["884",{"pageContent":"Mocking connected components\n\nIf you need to render a connected component in Storybook, you can mock the network requests to fetch its data. There are various layers in which you can do that.\n\n### Mocking providers\n\nSuppose you are using a provider that supplies data via the context. In that case, you can wrap your story in a decorator that provides a mocked version of that provider. For example, in the [Screens](https://storybook.js.org/tutorials/intro-to-storybook/react/en/screen/) chapter of the Intro to Storybook tutorial, we mock a Redux provider with mock data.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":74,"to":80}}}}],["885",{"pageContent":"Mocking API Services\n\nConnected applications such as Twitter, Instagram, amongst others, are everywhere, consuming data from REST or GraphQL endpoints. Suppose you're working in an application that relies on either of these data providers. In that case, you can add Mock Service Worker (MSW) via [Storybook's MSW addon](https://storybook.js.org/addons/msw-storybook-addon) to mock data alongside your app and stories.\n\n[Mock Service Worker](https://mswjs.io/) is an API mocking library. It relies on service workers to capture network requests and provides mocked data in response. The MSW addon adds this functionality into Storybook, allowing you to mock API requests in your stories. Below is an overview of how to set up and use the addon.\n\nRun the following commands to install MSW, the addon, and generate a mock service worker.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":82,"to":90}}}}],["886",{"pageContent":"Run the following commands to install MSW, the addon, and generate a mock service worker.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-msw-install.yarn.js.mdx',\n    'common/storybook-msw-install.npm.js.mdx',\n    'common/storybook-msw-install.pnpm.js.mdx',\n    'common/storybook-msw-generate.msw.js.mdx',\n    'common/storybook-msw-generate.msw-pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 If you're working with Angular, you'll need to adjust the command to save the mock service worker file in a different directory (e.g., `src`).\n\n</div>\n\nUpdate your `.storybook/preview.js` file and enable the addon via a [global decorator](./decorators.md#global-decorators).\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-register-msw-addon.js.mdx',\n    'common/storybook-preview-register-msw-addon.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":90,"to":123}}}}],["887",{"pageContent":"<CodeSnippets\n  paths={[\n    'common/storybook-preview-register-msw-addon.js.mdx',\n    'common/storybook-preview-register-msw-addon.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nFinally, update your [`.storybook/main.js|ts`](../configure/overview.md#using-storybook-api) to allow Storybook to load the generated mock service worker file as follows:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-with-single-static-dir.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":123,"to":142}}}}],["888",{"pageContent":"Mocking REST requests with MSW addon\n\nIf you're working with pure presentational screens, adding stories through [args composition](#args-composition-for-presentational-screens) is recommended. You can easily encode all the data via [args](../writing-stories/args.md), removing the need for handling it with \"wrapper components\". However, this approach loses its flexibility if the screen's data is retrieved from a RESTful endpoint within the screen itself. For instance, if your screen had a similar implementation to retrieve a list of documents:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/document-screen-fetch.js.mdx',\n    'vue/document-screen-fetch.3.js.mdx',\n    'vue/document-screen-fetch.3.ts.mdx',\n    'angular/document-screen-fetch.ts.mdx',\n    'svelte/document-screen-fetch.js.mdx',\n    'web-components/document-screen-fetch.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nTo test your screen with the mocked data, you could write a similar set of stories:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":144,"to":163}}}}],["889",{"pageContent":"<!-- prettier-ignore-end -->\n\nTo test your screen with the mocked data, you could write a similar set of stories:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/documentscreen-story-msw-rest-request.ts.mdx',\n    'web-components/documentscreen-story-msw-rest-request.js.mdx',\n    'web-components/documentscreen-story-msw-rest-request.ts.mdx',\n    'common/documentscreen-story-msw-rest-request.js.mdx',\n    'common/documentscreen-story-msw-rest-request.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/build-pages-with-storybook#snippet-documentscreen-story-msw-rest-request\"\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n💡 This example details how you can mock the REST request with fetch. Similar HTTP clients such as <a href=\"https://axios-http.com/\">axios</a> can be used as well.\n</div>\n\nThe mocked data (i.e., `TestData`) will be injected via [parameters](./parameters.md), enabling you to configure it per-story basis.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":163,"to":187}}}}],["890",{"pageContent":"Mocking GraphQL queries with MSW addon\n\nIn addition to mocking RESTful requests, the other noteworthy feature of the [MSW addon](https://msw-sb.vercel.app/?path=/story/guides-introduction--page) is the ability to mock incoming data from any of the mainstream [GraphQL](https://www.apollographql.com/docs/react/integrations/integrations/) clients (e.g., [Apollo Client](https://www.apollographql.com/docs/), [URQL](https://formidable.com/open-source/urql/) or [React Query](https://react-query.tanstack.com/)). For instance, if your screen retrieves the user's information and a list of documents based on a query result, you could have a similar implementation:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":189,"to":193}}}}],["891",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/document-screen-with-graphql.js.mdx',\n    'react/document-screen-with-graphql.ts.mdx',\n    'vue/document-screen-with-graphql.3.js.mdx',\n    'vue/document-screen-with-graphql.3.ts.mdx',\n    'angular/document-screen-with-graphql.ts.mdx',\n    'svelte/document-screen-with-grapqhl.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nTo test your screen with the GraphQL mocked data, you could write the following stories:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":193,"to":210}}}}],["892",{"pageContent":"<!-- prettier-ignore-end -->\n\nTo test your screen with the GraphQL mocked data, you could write the following stories:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/documentscreen-story-msw-graphql-query.js.mdx',\n    'react/documentscreen-story-msw-graphql-query.ts.mdx',\n    'vue/apollo-wrapper-component.with-mock-implementation.3.js.mdx',\n    'vue/documentscreen-story-msw-graphql-query.js.mdx',\n    'vue/documentscreen-story-msw-graphql-query.ts.mdx',\n    'angular/apollo-module.mock-apollo-module.ts.mdx',\n    'angular/documentscreen-story-msw-graphql-query.ts.mdx',\n    'svelte/documentscreen-story-msw-graphql-query.js.mdx',\n    'svelte/apollo-wrapper-component.with-mock-implementation.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/build-pages-with-storybook#snippet-documentscreen-story-msw-graphql-query\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":210,"to":232}}}}],["893",{"pageContent":"Mocking imports\n\nIt is also possible to mock imports directly, as you might in a unit test, using Webpack’s aliasing. It's advantageous if your component makes network requests directly with third-party libraries.\n\nWe'll use [isomorphic-fetch](https://www.npmjs.com/package/isomorphic-fetch) as an example.\n\nInside a directory called `__mocks__`, create a new file called\n`isomorphic-fetch.js` with the following code:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/isomorphic-fetch-mock.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThe code above creates a decorator which reads story-specific data off the story's [parameters](./parameters.md), enabling you to configure the mock on a per-story basis.\n\nTo use the mock in place of the real import, we use [webpack aliasing](https://webpack.js.org/configuration/resolve/#resolvealias):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-with-mock-decorator.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":234,"to":265}}}}],["894",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-main-with-mock-decorator.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nAdd the decorator you've just implemented to your [storybook/preview.js](../configure/overview.md#configure-story-rendering):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-with-mock-decorator.js.mdx',\n    'common/storybook-preview-with-mock-decorator.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nFinally, we can set the mock values in a specific story. Let's borrow an example from this [blog post](https://medium.com/@edogc/visual-unit-testing-with-react-storybook-and-fetch-mock-4594d3a281e6):\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":265,"to":290}}}}],["895",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/app-story-with-mock.ts.mdx',\n    'web-components/app-story-with-mock.js.mdx',\n    'web-components/app-story-with-mock.ts.mdx',\n    'common/app-story-with-mock.js.mdx',\n    'common/app-story-with-mock.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/build-pages-with-storybook#snippet-app-story-with-mock\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":290,"to":304}}}}],["896",{"pageContent":"Specific mocks\n\nAnother mocking approach is to use libraries that intercept calls at a lower level. For instance, you can use [`fetch-mock`](https://www.npmjs.com/package/fetch-mock) to mock fetch requests specifically.\n\nLike the [import mocking](##mocking-imports) above, once you have a mock, you’ll still want to set the return value of the mock per-story basis. Do this in Storybook with a [decorator](./decorators.md) that reads the story's [parameters](./parameters.md).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":306,"to":310}}}}],["897",{"pageContent":"Avoiding mocking dependencies\n\nIt's possible to avoid mocking the dependencies of connected \"container\" components entirely by passing them around via props or React context. However, it requires a strict split of the container and presentational component logic. For example, if you have a component responsible for data fetching logic and rendering DOM, it will need to be mocked as previously described.\n\nIt’s common to import and embed container components amongst presentational components. However, as we discovered earlier, we’ll likely have to mock their dependencies or the imports to render them within Storybook.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":312,"to":316}}}}],["898",{"pageContent":"Not only can this quickly grow to become a tedious task, but it’s also challenging to mock container components that use local states. So, instead of importing containers directly, a solution to this problem is to create a React context that provides the container components. It allows you to freely embed container components as usual, at any level in the component hierarchy without worrying about subsequently mocking their dependencies; since we can swap out the containers themselves with their mocked presentational counterpart.\n\nWe recommend dividing context containers up over specific pages or views in your app. For example, if you had a `ProfilePage` component, you might set up a file structure as follows:\n\n```\nProfilePage.js\nProfilePage.stories.js\nProfilePageContainer.js\nProfilePageContext.js","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":318,"to":326}}}}],["899",{"pageContent":"<div class=\"aside\">\n\nIt’s also often helpful to set up a “global” container context (perhaps named `GlobalContainerContext`) for container components that may be rendered on every page of your app and add them to the top level of your application. While it’s possible to place every container within this global context, it should only provide globally required containers.\n\n</div>\n\nLet’s look at an example implementation of this approach.\n\nFirst, create a React context, and name it `ProfilePageContext`. It does nothing more than export a React context:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/mock-context-create.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n`ProfilePage` is our presentational component. It will use the `useContext` hook to retrieve the container components from `ProfilePageContext`:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/mock-context-in-use.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":329,"to":359}}}}],["900",{"pageContent":"Mocking containers in Storybook\n\nIn the context of Storybook, instead of providing container components through context, we’ll instead provide their mocked counterparts. In most cases, the mocked versions of these components can often be borrowed directly from their associated stories.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/mock-context-container.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/build-pages-with-storybook#snippet-mock-context-container\"\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\nIf the same context applies to all `ProfilePage` stories, we can use a [decorator](./decorators.md).\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":361,"to":381}}}}],["901",{"pageContent":"Providing containers to your application\n\nNow, in the context of your application, you’ll need to provide `ProfilePage` with all of the container components it requires by wrapping it with `ProfilePageContext.Provider`:\n\nFor example, in Next.js, this would be your `pages/profile.js` component.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/mock-context-container-provider.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n#### Mocking global containers in Storybook\n\nIf you’ve set up `GlobalContainerContext`, you’ll need to set up a decorator within Storybook’s `preview.js` to provide context to all stories. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/mock-context-container-global.js.mdx',\n    'react/mock-context-container-global.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/build-pages-with-storybook.md","loc":{"lines":{"from":383,"to":412}}}}],["902",{"pageContent":"---\ntitle: 'Decorators'\n---\n\n<YouTubeCallout id=\"4yi_yCTkgng\" title=\"Storybook Decorators Crash Course\" />\n\nA decorator is a way to wrap a story in extra “rendering” functionality. Many addons define decorators to augment your stories with extra rendering or gather details about how your story renders.\n\nWhen writing stories, decorators are typically used to wrap stories with extra markup or context mocking.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/decorators.md","loc":{"lines":{"from":1,"to":9}}}}],["903",{"pageContent":"Wrap stories with extra markup\n\nSome components require a “harness” to render in a useful way. For instance, if a component runs right up to its edges, you might want to space it inside Storybook. Use a decorator to add spacing for all stories of the component.\n\n![Story without padding](./decorators-no-padding.png)\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/your-component-with-decorator.js.mdx',\n    'react/your-component-with-decorator.ts.mdx',\n    'vue/your-component-with-decorator.js.mdx',\n    'vue/your-component-with-decorator.ts.mdx',\n    'angular/your-component-with-decorator.ts.mdx',\n    'web-components/your-component-with-decorator.js.mdx',\n    'web-components/your-component-with-decorator.ts.mdx',\n    'svelte/your-component-with-decorator.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n![Story with padding](./decorators-padding.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/decorators.md","loc":{"lines":{"from":11,"to":34}}}}],["904",{"pageContent":"“Context” for mocking\n\nFramework-specific libraries (e.g., [Styled Components](https://styled-components.com/), [Fontawesome](https://github.com/FortAwesome/vue-fontawesome) for Vue, Angular's [localize](https://angular.io/api/localize)) may require additional configuration to render correctly in Storybook.\n\nFor example, if you're working with React's Styled Components and your components use themes, add a single global decorator to [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering) to enable them. With Vue, extend Storybook's application and register your library. Or with Angular, add the package into your `polyfills.ts` and import it:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/decorators.md","loc":{"lines":{"from":36,"to":42}}}}],["905",{"pageContent":"<CodeSnippets\n  paths={[\n    'react/storybook-preview-with-styled-components-decorator.js.mdx',\n    'react/storybook-preview-with-styled-components-decorator.ts.mdx',\n    'vue/storybook-preview-with-library-decorator.library-2.js.mdx',\n    'vue/storybook-preview-with-library-decorator.library-2.ts.mdx',\n    'vue/storybook-preview-with-library-decorator.library-3.js.mdx',\n    'vue/storybook-preview-with-library-decorator.library-3.ts.mdx',\n    'vue/storybook-preview-with-hoc-component-decorator.component-2.js.mdx',\n    'vue/storybook-preview-with-hoc-component-decorator.component-2.ts.mdx',\n    'vue/storybook-preview-with-hoc-component-decorator.component-3.js.mdx',\n    'vue/storybook-preview-with-hoc-component-decorator.component-3.ts.mdx',\n    'vue/storybook-preview-with-mixin-decorator.mixin-2.js.mdx',\n    'vue/storybook-preview-with-mixin-decorator.mixin-2.ts.mdx',\n    'angular/add-localize-package-to-polyfills.ts.mdx',\n    'angular/storybook-preview-with-angular-polyfills.js.mdx',\n  ]}\n/>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/decorators.md","loc":{"lines":{"from":44,"to":61}}}}],["906",{"pageContent":"<!-- prettier-ignore-end -->\n\nIn the example above, the values provided are hardcoded. Still, you may want to vary them, either per-story basis (i.e., if the values you're adding are relevant to a specific story) or in a user-controlled way (e.g., provide a theme switcher or a different set of icons).\n\nThe second argument to a decorator function is the **story context** which in particular contains the keys:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/decorators.md","loc":{"lines":{"from":63,"to":67}}}}],["907",{"pageContent":"The second argument to a decorator function is the **story context** which in particular contains the keys:\n\n- `args` - the story arguments. You can use some [`args`](./args.md) in your decorators and drop them in the story implementation itself.\n- `argTypes`- Storybook's [argTypes](../api/argtypes.md) allow you to customize and fine-tune your stories [`args`](./args.md).\n- `globals` - Storybook-wide [globals](../essentials/toolbars-and-globals.md#globals). In particular you can use the [toolbars feature](../essentials/toolbars-and-globals.md#global-types-toolbar-annotations) to allow you to change these values using Storybook’s UI.\n- `hooks` - Storybook's API hooks (e.g., useArgs).\n- `parameters`- the story's static metadata, most commonly used to control Storybook's behavior of features and addons.\n- `viewMode`- Storybook's current active window (e.g., canvas, docs).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/decorators.md","loc":{"lines":{"from":67,"to":74}}}}],["908",{"pageContent":"<div class=\"aside\">\n💡 This pattern can also be applied to your own stories. Some of Storybook's supported frameworks already use it (e.g., vue 2).\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/decorators.md","loc":{"lines":{"from":76,"to":78}}}}],["909",{"pageContent":"Using decorators to provide data\n\nIf your components are “connected” and require side-loaded data to render, you can use decorators to provide that data in a mocked way without having to refactor your components to take that data as an arg. There are several techniques to achieve this. Depending on exactly how you are loading that data -- read more in the [building pages in Storybook](./build-pages-with-storybook.md) section.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/decorators.md","loc":{"lines":{"from":80,"to":82}}}}],["910",{"pageContent":"Story decorators\n\nTo define a decorator for a single story, use the `decorators` key on a named export:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-decorator.js.mdx',\n    'react/button-story-decorator.ts.mdx',\n    'vue/button-story-decorator.js.mdx',\n    'vue/button-story-decorator.ts.mdx',\n    'angular/button-story-decorator.ts.mdx',\n    'web-components/button-story-decorator.js.mdx',\n    'web-components/button-story-decorator.ts.mdx',\n    'svelte/button-story-decorator.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/decorators#snippet-button-story-decorator\"\n/>\n\n\n<!-- prettier-ignore-end -->\n\nIt is useful to ensure that the story remains a “pure” rendering of the component under test and that any extra HTML or components are used only as decorators. In particular the [Source](../api/doc-block-source.md) Doc Block works best when you do this.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/decorators.md","loc":{"lines":{"from":84,"to":108}}}}],["911",{"pageContent":"Component decorators\n\nTo define a decorator for all stories of a component, use the `decorators` key of the default CSF export:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-component-decorator.js.mdx',\n    'react/button-story-component-decorator.ts.mdx',\n    'vue/button-story-component-decorator.js.mdx',\n    'vue/button-story-component-decorator.ts.mdx',\n    'angular/button-story-component-decorator.ts.mdx',\n    'web-components/button-story-component-decorator.js.mdx',\n    'web-components/button-story-component-decorator.ts.mdx',\n    'svelte/button-story-component-decorator.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/decorators.md","loc":{"lines":{"from":110,"to":129}}}}],["912",{"pageContent":"Global decorators\n\nWe can also set a decorator for **all stories** via the `decorators` export of your [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering) file (this is the file where you configure all stories):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/storybook-preview-global-decorator.js.mdx',\n    'react/storybook-preview-global-decorator.ts.mdx',\n    'vue/storybook-preview-global-decorator.js.mdx',\n    'vue/storybook-preview-global-decorator.ts.mdx',\n    'angular/storybook-preview-global-decorator.ts.mdx',\n    'web-components/storybook-preview-global-decorator.js.mdx',\n    'svelte/storybook-preview-global-decorator.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/decorators.md","loc":{"lines":{"from":131,"to":149}}}}],["913",{"pageContent":"Decorator inheritance\n\nLike parameters, decorators can be defined globally, at the component level, and for a single story (as we’ve seen).\n\nAll decorators relevant to a story will run in the following order once the story renders:\n\n- Global decorators, in the order they are defined\n- Component decorators, in the order they are defined\n- Story decorators, in the order they are defined","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/decorators.md","loc":{"lines":{"from":151,"to":159}}}}],["914",{"pageContent":"---\ntitle: 'How to write stories'\n---\n\n<YouTubeCallout id=\"P0WHt_L0-2g\" title=\"How to write Storybook stories | Component Story Format\" />\n\nA story captures the rendered state of a UI component. It’s a function that returns a component’s state given a set of arguments.\n\nStorybook uses the generic term arguments (args for short) when talking about React’s `props`, Vue’s `props`, Angular’s `@Input`, and other similar concepts.\n\n## Where to put stories\n\nA component’s stories are defined in a story file that lives alongside the component file. The story file is for development-only, and it won't be included in your production bundle.\n\n```\nButton.js | ts | jsx | tsx | vue | svelte\nButton.stories.js | ts | jsx | tsx\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":1,"to":18}}}}],["915",{"pageContent":"Component Story Format\n\nWe define stories according to the [Component Story Format](../api/csf.md) (CSF), an ES6 module-based standard that is easy to write and portable between tools.\n\nThe key ingredients are the [default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export) that describes the component, and [named exports](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_named_exports) that describe the stories.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":20,"to":24}}}}],["916",{"pageContent":"Default export\n\nThe _default_ export metadata controls how Storybook lists your stories and provides information used by addons. For example, here’s the default export for a story file `Button.stories.js`:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-default-export-with-component.js.mdx',\n    'react/button-story-default-export-with-component.ts.mdx',\n    'vue/button-story-default-export-with-component.js.mdx',\n    'vue/button-story-default-export-with-component.ts.mdx',\n    'angular/button-story-default-export-with-component.ts.mdx',\n    'svelte/button-story-default-export-with-component.js.mdx',\n    'web-components/button-story-default-export-with-component.js.mdx',\n    'html/button-story-default-export.js.mdx',\n    'html/button-story-default-export.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":26,"to":48}}}}],["917",{"pageContent":"<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\nStarting with Storybook version 7.0, story titles are analyzed statically as part of the build process. The _default_ export must contain a `title` property that can be read statically or a `component` property from which an automatic title can be computed. Using the `id` property to customize your story URL must also be statically readable.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":48,"to":54}}}}],["918",{"pageContent":"Defining stories\n\nUse the _named_ exports of a CSF file to define your component’s stories. We recommend you use UpperCamelCase for your story exports. Here’s how to render `Button` in the “primary” state and export a story called `Primary`.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story.js.mdx',\n    'react/button-story.ts.mdx',\n    'vue/button-story.js.mdx',\n    'vue/button-story.ts.mdx',\n    'angular/button-story.ts.mdx',\n    'web-components/button-story.js.mdx',\n    'web-components/button-story.ts.mdx',\n    'svelte/button-story.js.mdx',\n    'html/button-story.js.mdx',\n    'html/button-story.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/introduction#snippet-button-story\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":56,"to":79}}}}],["919",{"pageContent":"Working with React Hooks\n\n[React Hooks](https://reactjs.org/docs/hooks-intro.html) are convenient helper methods to create components using a more streamlined approach. You can use them while creating your component's stories if you need them, although you should treat them as an advanced use case. We **recommend** [args](./args.md) as much as possible when writing your own stories. As an example, here’s a story that uses React Hooks to change the button's state :\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story.with-hooks.js.mdx',\n    'react/button-story.with-hooks.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/introduction#snippet-button-story-with-hooks\"\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n💡 The recommendation mentioned above also applies to other frameworks, not only React.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":81,"to":100}}}}],["920",{"pageContent":"Rename stories\n\nYou can rename any particular story you need. For instance, to give it a more accurate name. Here's how you can change the name of the `Primary` story:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-rename-story.js.mdx',\n    'react/button-story-rename-story.ts.mdx',\n    'vue/button-story-rename-story.js.mdx',\n    'vue/button-story-rename-story.ts.mdx',\n    'angular/button-story-rename-story.ts.mdx',\n    'web-components/button-story-rename-story.js.mdx',\n    'web-components/button-story-rename-story.ts.mdx',\n    'svelte/button-story-rename-story.js.mdx',\n    'html/button-story-rename-story.js.mdx',\n    'html/button-story-rename-story.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/introduction#snippet-button-story-rename-story\"\n/>\n\n<!-- prettier-ignore-end -->\n\nYour story will now be shown in the sidebar with the given text.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":102,"to":127}}}}],["921",{"pageContent":"How to write stories\n\nA story is a function that describes how to render a component. You can have multiple stories per component, and the simplest way to create stories is to render a component with different arguments multiple times.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-with-emojis.js.mdx',\n    'react/button-story-with-emojis.ts.mdx',\n    'vue/button-story-with-emojis.js.mdx',\n    'vue/button-story-with-emojis.ts.mdx',\n    'angular/button-story-with-emojis.ts.mdx',\n    'web-components/button-story-with-emojis.js.mdx',\n    'web-components/button-story-with-emojis.ts.mdx',\n    'svelte/button-story-with-emojis.js.mdx',\n    'html/button-story-with-emojis.js.mdx',\n    'html/button-story-with-emojis.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/introduction#snippet-button-story-with-emojis\"\n/>\n\n<!-- prettier-ignore-end -->\n\nIt's straightforward for components with few stories but can be repetitive with many stories.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":129,"to":154}}}}],["922",{"pageContent":"Using args\n\nRefine this pattern by introducing `args` for your component's stories. It reduces the boilerplate code you'll need to write and maintain for each story.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-using-args.js.mdx',\n    'react/button-story-using-args.ts.mdx',\n    'vue/button-story-using-args.2.js.mdx',\n    'vue/button-story-using-args.2.ts.mdx',\n    'vue/button-story-using-args.3.js.mdx',\n    'vue/button-story-using-args.3.ts.mdx',\n    'angular/button-story-using-args.ts.mdx',\n    'web-components/button-story-using-args.js.mdx',\n    'web-components/button-story-using-args.ts.mdx',\n    'svelte/button-story-using-args.js.mdx',\n    'html/button-story-using-args.js.mdx',\n    'html/button-story-using-args.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/introduction#snippet-button-story-using-args\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":156,"to":181}}}}],["923",{"pageContent":"<!-- prettier-ignore-end -->\n\nBy introducing args into your component's stories, you're not only reducing the amount of code you need to write, but you're also decreasing data duplication, as shown by spreading the `Primary` story's args into the other stories.\n\nWhat’s more, you can import `args` to reuse when writing stories for other components, and it's helpful when you’re building composite components. For example, if we make a `ButtonGroup` story, we might remix two stories from its child component `Button`.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":181,"to":187}}}}],["924",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-group-story.js.mdx',\n    'react/button-group-story.ts.mdx',\n    'angular/button-group-story.ts.mdx',\n    'vue/button-group-story.2.js.mdx',\n    'vue/button-group-story.2.ts.mdx',\n    'vue/button-group-story.3.js.mdx',\n    'vue/button-group-story.3.ts.mdx',\n    'web-components/button-group-story.js.mdx',\n    'web-components/button-group-story.ts.mdx',\n    'svelte/button-group-story.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/introduction#snippet-button-group-story\"\n/>\n\n\n<!-- prettier-ignore-end -->\n\nWhen Button’s signature changes, you only need to change Button’s stories to reflect the new schema, and ButtonGroup’s stories will automatically be updated. This pattern allows you to reuse your data definitions across the component hierarchy, making your stories more maintainable.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":187,"to":209}}}}],["925",{"pageContent":"That’s not all! Each of the args from the story function are live editable using Storybook’s [controls](../essentials/controls.md) panel. It means your team can dynamically change components in Storybook to stress test and find edge cases.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"addon-controls-demo-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n\nAddons can enhance args. For instance, [Actions](../essentials/actions.md) auto-detects which args are callbacks and appends a logging function to them. That way, interactions (like clicks) get logged in the actions panel.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"addon-actions-demo-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":211,"to":227}}}}],["926",{"pageContent":"Using the play function\n\nStorybook's `play` function and the [`@storybook/addon-interactions`](https://storybook.js.org/addons/@storybook/addon-interactions) are convenient helper methods to test component scenarios that otherwise require user intervention. They're small code snippets that execute once your story renders. For example, suppose you wanted to validate a form component, you could write the following story using the `play` function to check how the component responds when filling in the inputs with information:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":229,"to":233}}}}],["927",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/login-form-with-play-function.js.mdx',\n    'react/login-form-with-play-function.ts.mdx',\n    'angular/login-form-with-play-function.ts.mdx',\n    'vue/login-form-with-play-function.js.mdx',\n    'vue/login-form-with-play-function.ts.mdx',\n    'web-components/login-form-with-play-function.js.mdx',\n    'web-components/login-form-with-play-function.ts.mdx',\n    'svelte/login-form-with-play-function.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/introduction#snippet-login-form-with-play-function\"\n/>\n\nWithout the help of the `play` function and the `@storybook/addon-interactions`, you had to write your own stories and manually interact with the component to test out each use case scenario possible.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":233,"to":250}}}}],["928",{"pageContent":"Using parameters\n\nParameters are Storybook’s method of defining static metadata for stories. A story’s parameters can be used to provide configuration to various addons at the level of a story or group of stories.\n\nFor instance, suppose you wanted to test your Button component against a different set of backgrounds than the other components in your app. You might add a component-level `backgrounds` parameter:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-with-blue-args.js.mdx',\n    'react/button-story-with-blue-args.ts.mdx',\n    'vue/button-story-with-blue-args.js.mdx',\n    'vue/button-story-with-blue-args.ts.mdx',\n    'angular/button-story-with-blue-args.ts.mdx',\n    'web-components/button-story-with-blue-args.js.mdx',\n    'web-components/button-story-with-blue-args.ts.mdx',\n    'svelte/button-story-with-blue-args.js.mdx',\n    'html/button-story-with-blue-args.js.mdx',\n    'html/button-story-with-blue-args.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":252,"to":275}}}}],["929",{"pageContent":"<!-- prettier-ignore-end -->\n\n![Parameters background color](./parameters-background-colors.png)\n\nThis parameter would instruct the backgrounds addon to reconfigure itself whenever a Button story is selected. Most addons are configured via a parameter-based API and can be influenced at a [global](./parameters.md#global-parameters), [component](./parameters.md#component-parameters) and [story](./parameters.md#story-parameters) level.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":275,"to":279}}}}],["930",{"pageContent":"Using decorators\n\nDecorators are a mechanism to wrap a component in arbitrary markup when rendering a story. Components are often created with assumptions about ‘where’ they render. Your styles might expect a theme or layout wrapper, or your UI might expect specific context or data providers.\n\nA simple example is adding padding to a component’s stories. Accomplish this using a decorator that wraps the stories in a `div` with padding, like so:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":281,"to":287}}}}],["931",{"pageContent":"A simple example is adding padding to a component’s stories. Accomplish this using a decorator that wraps the stories in a `div` with padding, like so:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-component-decorator.js.mdx',\n    'react/button-story-component-decorator.ts.mdx',\n    'vue/button-story-component-decorator.js.mdx',\n    'vue/button-story-component-decorator.ts.mdx',\n    'angular/button-story-component-decorator.ts.mdx',\n    'web-components/button-story-component-decorator.js.mdx',\n    'web-components/button-story-component-decorator.ts.mdx',\n    'svelte/button-story-component-decorator.js.mdx',\n    'html/button-story-component-decorator.js.mdx',\n    'html/button-story-component-decorator.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":287,"to":306}}}}],["932",{"pageContent":"<!-- prettier-ignore-end -->\n\nDecorators [can be more complex](./decorators.md#context-for-mocking) and are often provided by [addons](../configure/storybook-addons.md). You can also configure decorators at the [story](./decorators.md#story-decorators), [component](./decorators.md#component-decorators) and [global](./decorators.md#global-decorators) level.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":306,"to":308}}}}],["933",{"pageContent":"Stories for two or more components\n\nWhen building design systems or component libraries, you may have two or more components created to work together. For instance, if you have a parent `List` component, it may require child `ListItem` components.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/list-story-starter.js.mdx',\n    'react/list-story-starter.ts.mdx',\n    'angular/list-story-starter.ts.mdx',\n    'vue/list-story-starter.js.mdx',\n    'vue/list-story-starter.ts.mdx',\n    'web-components/list-story-starter.js.mdx',\n    'web-components/list-story-starter.ts.mdx',\n    'html/list-story-starter.js.mdx',\n    'html/list-story-starter.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/introduction#snippet-list-story-starter\"\n/>\n\n<!-- prettier-ignore-end -->\n\nIn such cases, it makes sense to render a different function for each story:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":310,"to":336}}}}],["934",{"pageContent":"<!-- prettier-ignore-end -->\n\nIn such cases, it makes sense to render a different function for each story:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/list-story-expanded.js.mdx',\n    'react/list-story-expanded.ts.mdx',\n    'angular/list-story-expanded.ts.mdx',\n    'vue/list-story-expanded.js.mdx',\n    'vue/list-story-expanded.ts.mdx',\n    'web-components/list-story-expanded.js.mdx',\n    'web-components/list-story-expanded.ts.mdx',\n    'html/list-story-expanded.js.mdx',\n    'html/list-story-expanded.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/introduction#snippet-list-story-expanded\"\n/>\n\n<!-- prettier-ignore-end -->\n\nYou can also reuse stories from the child `ListItem` in your `List` component. That’s easier to maintain because you don’t have to keep the identical story definitions updated in multiple places.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":336,"to":362}}}}],["935",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/list-story-reuse-data.js.mdx',\n    'react/list-story-reuse-data.ts.mdx',\n    'angular/list-story-reuse-data.ts.mdx',\n    'vue/list-story-reuse-data.2.js.mdx',\n    'vue/list-story-reuse-data.2.ts.mdx',\n    'vue/list-story-reuse-data.3.js.mdx',\n    'vue/list-story-reuse-data.3.ts.mdx',\n    'web-components/list-story-reuse-data.js.mdx',\n    'web-components/list-story-reuse-data.ts.mdx',\n    'html/list-story-reuse-data.js.mdx',\n    'html/list-story-reuse-data.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/introduction#snippet-list-story-reuse-data\"\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 Note that there are disadvantages in writing stories like this as you cannot take full advantage of the args mechanism and composing args as you build even more complex composite components. For more discussion, see the [multi component stories](../writing-stories/stories-for-multiple-components.md) workflow documentation.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":362,"to":386}}}}],["936",{"pageContent":"</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/introduction.md","loc":{"lines":{"from":386,"to":386}}}}],["937",{"pageContent":"---\ntitle: 'Loaders'\n---\n\nLoaders are asynchronous functions that load data for a story and its [decorators](./decorators.md). A story's loaders run before the story renders, and the loaded data injected into the story via its render context.\n\nLoaders can be used to load any asset, lazy load components, or fetch data from a remote API. This feature was designed as a performance optimization to handle large story imports. However, [args](./args.md) is the recommended way to manage story data. We're building up an ecosystem of tools and techniques around Args that might not be compatible with loaded data.\n\nThey are an advanced feature (i.e., escape hatch), and we only recommend using them if you have a specific need that other means can't fulfill.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/loaders.md","loc":{"lines":{"from":1,"to":9}}}}],["938",{"pageContent":"Fetching API data\n\nStories are isolated component examples that render internal data defined as part of the story or alongside the story as [args](./args.md).\n\nLoaders are helpful when you need to load story data externally (e.g., from a remote API). Consider the following example that fetches a todo item to display in a todo list:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/loader-story.js.mdx',\n    'react/loader-story.ts.mdx',\n    'vue/loader-story.js.mdx',\n    'vue/loader-story.ts.mdx',\n    'angular/loader-story.ts.mdx',\n    'web-components/loader-story.js.mdx',\n    'web-components/loader-story.ts.mdx',\n    'svelte/loader-story.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/loaders#snippet-loader-story\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/loaders.md","loc":{"lines":{"from":11,"to":34}}}}],["939",{"pageContent":"<!-- prettier-ignore-end -->\n\nThe response obtained from the remote API call is combined into a `loaded` field on the story context, which is the second argument to a story function. For example, in React, the story's args were spread first to prioritize them over the static data provided by the loader. With other frameworks (e.g., Angular), you can write your stories as you'd usually do.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/loaders.md","loc":{"lines":{"from":34,"to":36}}}}],["940",{"pageContent":"Global loaders\n\nWe can also set a loader for **all stories** via the `loaders` export of your [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering) file (this is the file where you configure all stories):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-global-loader.js.mdx',\n    'common/storybook-preview-global-loader.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nIn this example, we load a \"current user\" available as `loaded.currentUser` for all stories.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/loaders.md","loc":{"lines":{"from":38,"to":53}}}}],["941",{"pageContent":"Loader inheritance\n\nLike [parameters](./parameters.md), loaders can be defined globally, at the component level, and for a single story (as we’ve seen).\n\nAll loaders, defined at all levels that apply to a story, run before the story renders in Storybook's canvas.\n\n- All loaders run in parallel\n- All results are the `loaded` field in the story context\n- If there are keys that overlap, \"later\" loaders take precedence (from lowest to highest):\n  - Global loaders, in the order they are defined\n  - Component loaders, in the order they are defined\n  - Story loaders, in the order they are defined","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/loaders.md","loc":{"lines":{"from":55,"to":66}}}}],["942",{"pageContent":"---\ntitle: 'Naming components and hierarchy'\n---\n\nThe title of the component you export in the `default` export controls the name shown in the sidebar.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/button-story-default-export.ts.mdx',\n    'web-components/button-story-default-export.js.mdx',\n    'web-components/button-story-default-export.ts.mdx',\n    'common/button-story-default-export.js.mdx',\n    'common/button-story-default-export.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/naming-components-and-hierarchy#snippet-button-story-default-export\"\n/>\n\n<!-- prettier-ignore-end -->\n\nYields this:\n\n![Stories hierarchy without paths](./naming-hierarchy-no-path.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/naming-components-and-hierarchy.md","loc":{"lines":{"from":1,"to":25}}}}],["943",{"pageContent":"Grouping\n\nIt is also possible to group related components in an expandable interface to help with Storybook organization. To do so, use the `/` as a separator:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/button-story-grouped.ts.mdx',\n    'web-components/button-story-grouped.js.mdx',\n    'web-components/button-story-grouped.ts.mdx',\n    'common/button-story-grouped.js.mdx',\n    'common/button-story-grouped.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/naming-components-and-hierarchy#snippet-button-story-grouped\"\n/>\n\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/checkbox-story-grouped.ts.mdx',\n    'web-components/checkbox-story-grouped.js.mdx',\n    'web-components/checkbox-story-grouped.ts.mdx',\n    'common/checkbox-story-grouped.js.mdx',\n    'common/checkbox-story-grouped.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/naming-components-and-hierarchy#snippet-checkbox-story-grouped\"\n/>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/naming-components-and-hierarchy.md","loc":{"lines":{"from":27,"to":59}}}}],["944",{"pageContent":"<!-- prettier-ignore-end -->\n\nYields this:\n\n![Stories hierarchy with paths](./naming-hierarchy-with-path.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/naming-components-and-hierarchy.md","loc":{"lines":{"from":61,"to":65}}}}],["945",{"pageContent":"Roots\n\nBy default, the top-level grouping will be displayed as “root” in the Storybook UI (i.e., the uppercased, non-expandable items). If you need, you can [configure Storybook](../configure/sidebar-and-urls.md#roots) and disable this behavior. Useful if you need to provide a streamlined experience for your users; nevertheless, if you have a large Storybook composed of multiple component stories, we recommend naming your components according to the file hierarchy.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/naming-components-and-hierarchy.md","loc":{"lines":{"from":67,"to":69}}}}],["946",{"pageContent":"Single-story hoisting\n\nSingle-story components (i.e., component stories without **siblings**) whose **display name** exactly matches the component's name (last part of `title`) are automatically hoisted up to replace their parent component in the UI. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/button-story-hoisted.ts.mdx',\n    'web-components/button-story-hoisted.js.mdx',\n    'web-components/button-story-hoisted.ts.mdx',\n    'common/button-story-hoisted.js.mdx',\n    'common/button-story-hoisted.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/naming-components-and-hierarchy#snippet-button-story-hoisted\"\n/>\n\n<!-- prettier-ignore-end -->\n\n![Stories hierarchy with single story hoisting](./naming-hierarchy-single-story-hoisting.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/naming-components-and-hierarchy.md","loc":{"lines":{"from":71,"to":91}}}}],["947",{"pageContent":"<!-- prettier-ignore-end -->\n\n![Stories hierarchy with single story hoisting](./naming-hierarchy-single-story-hoisting.png)\n\nBecause story exports are automatically \"start cased\" (`myStory` becomes `\"My Story\"`), your component name should match that. Alternatively, you can override the story name using `myStory.storyName = '...'` to match the component name.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/naming-components-and-hierarchy.md","loc":{"lines":{"from":91,"to":95}}}}],["948",{"pageContent":"Sorting stories\n\nOut of the box, Storybook sorts stories based on the order in which they are imported. However, you can customize this pattern to suit your needs and provide a more intuitive experience by adding `storySort` to the `options` parameter in your `preview.js` file.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-sort-function.js.mdx',\n    'common/storybook-preview-sort-function.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\nℹ️ Asides from the unique story identifier, you can also use the `title`, `name`, and import path to sort your stories using the `storySort` function.\n\n</div>\n\nThe `storySort` can also accept a configuration object.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-empty-sort-object.js.mdx',\n    'common/storybook-preview-empty-sort-object.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/naming-components-and-hierarchy.md","loc":{"lines":{"from":97,"to":129}}}}],["949",{"pageContent":"<!-- prettier-ignore-end -->\n\n| Field           |  Type   |                       Description                        | Required |      Default Value      |          Example          |\n| --------------- | :-----: | :------------------------------------------------------: | :------: | :---------------------: | :-----------------------: |\n| **method**      | String  | Tells Storybook in which order the stories are displayed |    No    | Storybook configuration |     `'alphabetical'`      |\n| **order**       |  Array  |    The stories to be shown, ordered by supplied name     |    No    |    Empty Array `[]`     | `['Intro', 'Components']` |\n| **includeName** | Boolean |          Include story name in sort calculation          |    No    |         `false`         |          `true`           |\n| **locales**     | String  |           The locale required to be displayed            |    No    |      System locale      |          `en-US`          |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/naming-components-and-hierarchy.md","loc":{"lines":{"from":129,"to":136}}}}],["950",{"pageContent":"To sort your stories alphabetically, set `method` to `'alphabetical'` and optionally set the `locales` string. To sort your stories using a custom list, use the `order` array; stories that don't match an item in the `order` list will appear after the items in the list.\n\nThe `order` array can accept a nested array to sort 2nd-level story kinds. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-with-ordered-pages.js.mdx',\n    'common/storybook-preview-with-ordered-pages.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nWhich would result in this story ordering:\n\n1. `Intro` and then `Intro/*` stories\n2. `Pages` story\n3. `Pages/Home` and `Pages/Home/*` stories\n4. `Pages/Login` and `Pages/Login/*` stories\n5. `Pages/Admin` and `Pages/Admin/*` stories\n6. `Pages/*` stories\n7. `Components` and `Components/*` stories\n8. All other stories","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/naming-components-and-hierarchy.md","loc":{"lines":{"from":138,"to":162}}}}],["951",{"pageContent":"If you want specific categories to sort to the end of the list, you can insert a `*` into your `order` array to indicate where \"all other stories\" should go:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-preview-with-ordered-pages-and-wildcard.js.mdx',\n    'common/storybook-preview-with-ordered-pages-and-wildcard.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nIn this example, the `WIP` category would be displayed at the end of the list.\n\nNote that the `order` option is independent of the `method` option; stories are sorted first by the `order` array and then by either the `method: 'alphabetical'` or the default `configure()` import order.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/naming-components-and-hierarchy.md","loc":{"lines":{"from":164,"to":179}}}}],["952",{"pageContent":"---\ntitle: 'Parameters'\n---\n\nParameters are a set of static, named metadata about a story, typically used to control the behavior of Storybook features and addons.\n\nFor example, let’s customize the backgrounds addon via a parameter. We’ll use `parameters.backgrounds` to define which backgrounds appear in the backgrounds toolbar when a story is selected.\n\n## Story parameters\n\nWe can set a parameter for a single story with the `parameters` key on a CSF export:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'angular/component-story-custom-params.ts.mdx',\n   'web-components/component-story-custom-params.js.mdx',\n   'web-components/component-story-custom-params.ts.mdx',\n   'common/component-story-custom-params.js.mdx',\n   'common/component-story-custom-params.ts.mdx',   \n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/parameters#snippet-component-story-custom-params\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/parameters.md","loc":{"lines":{"from":1,"to":27}}}}],["953",{"pageContent":"Component parameters\n\nWe can set the parameters for all stories of a component using the `parameters` key on the default CSF export:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/button-story-with-blue-args.js.mdx',\n    'react/button-story-with-blue-args.ts.mdx',\n    'vue/button-story-with-blue-args.js.mdx',\n    'vue/button-story-with-blue-args.ts.mdx',\n    'angular/button-story-with-blue-args.ts.mdx',\n    'web-components/button-story-with-blue-args.js.mdx',\n    'web-components/button-story-with-blue-args.ts.mdx',\n    'svelte/button-story-with-blue-args.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/parameters.md","loc":{"lines":{"from":29,"to":48}}}}],["954",{"pageContent":"Global parameters\n\nWe can also set the parameters for **all stories** via the `parameters` export of your [`.storybook/preview.js`](../configure/overview.md#configure-story-rendering) file (this is the file where you configure all stories):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'common/preview-story-custom-params.js.mdx',\n   'common/preview-story-custom-params.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nSetting a global parameter is a common way to configure addons. With backgrounds, you configure the list of backgrounds that every story can render in.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/parameters.md","loc":{"lines":{"from":50,"to":65}}}}],["955",{"pageContent":"Rules of parameter inheritance\n\nThe way the global, component and story parameters are combined is:\n\n- More specific parameters take precedence (so a story parameter overwrites a component parameter which overwrites a global parameter).\n- Parameters are **merged** so keys are only ever overwritten, never dropped.\n\nThe merging of parameters is important. It means it is possible to override a single specific sub-parameter on a per-story basis but still retain the majority of the parameters defined globally.\n\nIf you are defining an API that relies on parameters (e.g. an [**addon**](../addons/introduction.md)) it is a good idea to take this behavior into account.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/parameters.md","loc":{"lines":{"from":67,"to":76}}}}],["956",{"pageContent":"---\ntitle: 'Play function'\n---\n\n<YouTubeCallout id=\"dcuzwCHI940\" title=\"Component testing in Storybook with play functions\" />\n\n`Play` functions are small snippets of code executed after the story renders. Enabling you to interact with your components and test scenarios that otherwise required user intervention.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/play-function.md","loc":{"lines":{"from":1,"to":7}}}}],["957",{"pageContent":"Setup the interactions addon\n\nWe recommend installing Storybook's [`addon-interactions`](https://storybook.js.org/addons/@storybook/addon-interactions) before you start writing stories with the `play` function. It's the perfect complement for it, including a handy set of UI controls to allow you command over the execution flow. At any time, you can pause, resume, rewind, and step through each interaction. Also providing you with an easy-to-use debugger for potential issues.\n\nRun the following command to install the addon and the required dependencies.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addon-interactions-addon-full-install.yarn.js.mdx',\n    'common/storybook-addon-interactions-addon-full-install.npm.js.mdx',\n    'common/storybook-addon-interactions-addon-full-install.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nUpdate your Storybook configuration (in `.storybook/main.js|ts`) to include the interactions addon.\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/play-function.md","loc":{"lines":{"from":9,"to":29}}}}],["958",{"pageContent":"<!-- prettier-ignore-end -->\n\nUpdate your Storybook configuration (in `.storybook/main.js|ts`) to include the interactions addon.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'common/storybook-interactions-addon-registration.js.mdx',\n   'common/storybook-interactions-addon-registration.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/play-function.md","loc":{"lines":{"from":29,"to":42}}}}],["959",{"pageContent":"Writing stories with the play function\n\nStorybook's `play` functions are small code snippets that run once the story finishes rendering. Aided by the `addon-interactions`, it allows you to build component interactions and test scenarios that were impossible without user intervention. For example, if you were working on a registration form and wanted to validate it, you could write the following story with the `play` function:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'angular/register-component-with-play-function.ts.mdx',\n   'web-components/register-component-with-play-function.js.mdx',\n   'web-components/register-component-with-play-function.ts.mdx',\n   'common/register-component-with-play-function.js.mdx',\n   'common/register-component-with-play-function.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/play-function#snippet-register-component-with-play-function\"\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/play-function.md","loc":{"lines":{"from":44,"to":64}}}}],["960",{"pageContent":"<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 See the [Interaction testing documentation](../writing-tests/interaction-testing.md#api-for-user-events) for an overview of the available API events.\n\n</div>\n\nWhen Storybook finishes rendering the story, it executes the steps defined within the `play` function, interacting with the component and filling the form's information. All of this without the need for user intervention. If you check your `Interactions` panel, you'll see the step-by-step flow.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/play-function.md","loc":{"lines":{"from":64,"to":72}}}}],["961",{"pageContent":"Composing stories\n\nThanks to the [Component Story Format](../api/csf.md), an ES6 module based file format, you can also combine your `play` functions, similar to other existing Storybook features (e.g., [args](./args.md)). For example, if you wanted to verify a specific workflow for your component, you could write the following stories:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'angular/my-component-play-function-composition.ts.mdx',\n   'web-components/my-component-play-function-composition.js.mdx',\n   'web-components/my-component-play-function-composition.ts.mdx',\n   'common/my-component-play-function-composition.js.mdx',\n   'common/my-component-play-function-composition.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/play-function#snippet-my-component-play-function-composition\"\n/>\n\n<!-- prettier-ignore-end -->\n\nBy combining the stories, you're recreating the entire component workflow and can spot potential issues while reducing the boilerplate code you need to write.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/play-function.md","loc":{"lines":{"from":74,"to":94}}}}],["962",{"pageContent":"Working with events\n\nMost modern UIs are built focusing on interaction (e.g., clicking a button, selecting options, ticking checkboxes), providing rich experiences to the end-user. With the `play` function, you can incorporate the same level of interaction into your stories.\n\nA common type of component interaction is a button click. If you need to reproduce it in your story, you can define your story's `play` function as the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'angular/my-component-play-function-with-clickevent.ts.mdx',\n   'web-components/my-component-play-function-with-clickevent.js.mdx',\n   'web-components/my-component-play-function-with-clickevent.ts.mdx',\n   'common/my-component-play-function-with-clickevent.js.mdx',\n   'common/my-component-play-function-with-clickevent.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/play-function#snippet-my-component-play-function-with-clickevent\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/play-function.md","loc":{"lines":{"from":96,"to":116}}}}],["963",{"pageContent":"<!-- prettier-ignore-end -->\n\nWhen Storybook loads the story and the function executes, it interacts with the component and triggers the button click, similar to what a user would do.\n\nAsides from click events, you can also script additional events with the `play` function. For example, if your component includes a select with various options, you can write the following story and test each scenario:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'angular/my-component-play-function-with-selectevent.ts.mdx',\n   'web-components/my-component-play-function-with-selectevent.js.mdx',\n   'web-components/my-component-play-function-with-selectevent.ts.mdx',\n   'common/my-component-play-function-with-selectevent.js.mdx',\n   'common/my-component-play-function-with-selectevent.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/play-function#snippet-my-component-play-function-with-selectevent\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/play-function.md","loc":{"lines":{"from":116,"to":136}}}}],["964",{"pageContent":"<!-- prettier-ignore-end -->\n\nIn addition to events, you can also create interactions with the `play` function based on other types of asynchronous methods. For instance, let's assume that you're working with a component with validation logic implemented (e.g., email validation, password strength). In that case, you can introduce delays within your `play` function to emulate user interaction and assert if the values provided are valid or not:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'angular/my-component-play-function-with-delay.ts.mdx',\n   'web-components/my-component-play-function-with-delay.js.mdx',\n   'web-components/my-component-play-function-with-delay.ts.mdx',\n   'common/my-component-play-function-with-delay.js.mdx',\n   'common/my-component-play-function-with-delay.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/play-function#snippet-my-component-play-function-with-delay\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/play-function.md","loc":{"lines":{"from":136,"to":154}}}}],["965",{"pageContent":"<!-- prettier-ignore-end -->\n\nWhen Storybook loads the story, it interacts with the component, filling in its inputs and triggering any validation logic defined.\n\nYou can also use the `play` function to verify the existence of an element based on a specific interaction. For instance, if you're working on a component and want to check what happens if a user introduces the wrong information. In that case, you could write the following story:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'angular/my-component-play-function-waitfor.ts.mdx',\n   'web-components/my-component-play-function-waitfor.js.mdx',\n   'web-components/my-component-play-function-waitfor.ts.mdx',\n   'common/my-component-play-function-waitfor.js.mdx',\n   'common/my-component-play-function-waitfor.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/play-function#snippet-my-component-play-function-waitfor\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/play-function.md","loc":{"lines":{"from":154,"to":174}}}}],["966",{"pageContent":"Querying elements\n\nIf you need, you can also adjust your `play` function to find elements based on queries (e.g., role, text content). For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'angular/my-component-play-function-alt-queries.ts.mdx',\n   'web-components/my-component-play-function-alt-queries.js.mdx',\n   'web-components/my-component-play-function-alt-queries.ts.mdx',\n   'common/my-component-play-function-alt-queries.js.mdx',\n   'common/my-component-play-function-alt-queries.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/play-function#snippet-my-component-play-function-alt-queries\"\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n 💡 You can read more about the querying elements in the <a href=\"https://testing-library.com/docs/queries/about/\"> Testing library documentation</a>.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/play-function.md","loc":{"lines":{"from":176,"to":198}}}}],["967",{"pageContent":"<div class=\"aside\">\n 💡 You can read more about the querying elements in the <a href=\"https://testing-library.com/docs/queries/about/\"> Testing library documentation</a>.\n</div>\n\nWhen Storybook loads the story, the `play` function starts its execution and queries the DOM tree expecting the element to be available when the story renders. In case there's a failure in your test, you'll be able to verify its root cause quickly.\n\nOtherwise, if the component is not immediately available, for instance, due to a previous step defined inside your `play` function or some asynchronous behavior, you can adjust your story and wait for the change to the DOM tree to happen before querying the element. For example:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/play-function.md","loc":{"lines":{"from":198,"to":206}}}}],["968",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'angular/my-component-play-function-query-findby.ts.mdx',\n   'web-components/my-component-play-function-query-findby.js.mdx',\n   'web-components/my-component-play-function-query-findby.ts.mdx',\n   'common/my-component-play-function-query-findby.js.mdx',\n   'common/my-component-play-function-query-findby.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/play-function#snippet-my-component-play-function-query-findby\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/play-function.md","loc":{"lines":{"from":206,"to":220}}}}],["969",{"pageContent":"Working with the Canvas\n\nBy default, each interaction you write inside your `play` function will be executed starting from the top-level element of the Canvas. This is acceptable for smaller components (e.g., buttons, checkboxes, text inputs), but can be inefficient for complex components (e.g., forms, pages), or for multiple stories. To accommodate this, you can adjust your interactions to start execution from the component's root. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'angular/my-component-play-function-with-canvas.ts.mdx',\n   'web-components/my-component-play-function-with-canvas.js.mdx',\n   'web-components/my-component-play-function-with-canvas.ts.mdx',\n   'common/my-component-play-function-with-canvas.js.mdx',\n   'common/my-component-play-function-with-canvas.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/play-function#snippet-my-component-play-function-with-canvas\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/play-function.md","loc":{"lines":{"from":222,"to":240}}}}],["970",{"pageContent":"<!-- prettier-ignore-end -->\n\nApplying these changes to your stories can provide a performance boost and improved error handling with [`addon-interactions`](https://storybook.js.org/addons/@storybook/addon-interactions).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/play-function.md","loc":{"lines":{"from":240,"to":242}}}}],["971",{"pageContent":"---\ntitle: 'Stories for multiple components'\n---\n\nIt's useful to write stories that [render two or more components](../writing-stories/introduction.md#stories-for-two-or-more-components) at once if those components are designed to work together. For example, `ButtonGroups`, `Lists`, and `Page` components.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/stories-for-multiple-components.md","loc":{"lines":{"from":1,"to":5}}}}],["972",{"pageContent":"Reusing subcomponent stories\n\nThe simplest approach we can take is to reuse the stories of the `ListItem` in the `List`:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/list-story-unchecked.js.mdx',\n    'react/list-story-unchecked.ts.mdx',\n    'vue/list-story-unchecked.2.js.mdx',\n    'vue/list-story-unchecked.2.ts.mdx',\n    'vue/list-story-unchecked.3.js.mdx',\n    'vue/list-story-unchecked.3.ts.mdx',\n    'angular/list-story-unchecked.ts.mdx',\n    'web-components/list-story-unchecked.js.mdx',\n    'web-components/list-story-unchecked.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/stories-for-multiple-components#snippet-list-story-unchecked\"\n/>\n\n<!-- prettier-ignore-end -->\n\nBy rendering the `Unchecked` story with its args, we are able to reuse the input data from the `ListItem` stories in the `List`.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/stories-for-multiple-components.md","loc":{"lines":{"from":7,"to":31}}}}],["973",{"pageContent":"<!-- prettier-ignore-end -->\n\nBy rendering the `Unchecked` story with its args, we are able to reuse the input data from the `ListItem` stories in the `List`.\n\nHowever, we still aren’t using args to control the `ListItem` stories, which means we cannot change them with controls and we cannot reuse them in other, more complex component stories.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/stories-for-multiple-components.md","loc":{"lines":{"from":31,"to":35}}}}],["974",{"pageContent":"Using children as an arg\n\nOne way we improve that situation is by pulling the rendered subcomponent out into a `children` arg:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/list-story-with-unchecked-children.js.mdx',\n    'react/list-story-with-unchecked-children.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/stories-for-multiple-components#snippet-list-story-with-unchecked-children\"\n/>\n\n<!-- prettier-ignore-end -->\n\nNow that `children` is an arg, we can potentially reuse it in another story.\n\nHowever, there are some caveats when using this approach that you should be aware of.\n\nThe `children` `args` as any other arg needs to be JSON serializable. It means that you should:\n\n- Avoid using empty values\n- Use caution with components that include third party libraries\n\nAs they could lead into errors with your Storybook.\n\n<div class=\"aside\">","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/stories-for-multiple-components.md","loc":{"lines":{"from":37,"to":65}}}}],["975",{"pageContent":"- Avoid using empty values\n- Use caution with components that include third party libraries\n\nAs they could lead into errors with your Storybook.\n\n<div class=\"aside\">\n\nWe're currently working on improving the overall experience for the children arg and allow you to edit children arg in a control and allow you to use other types of components in the near future. But for now you need to factor in this caveat when you're implementing your stories.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/stories-for-multiple-components.md","loc":{"lines":{"from":65,"to":74}}}}],["976",{"pageContent":"Creating a Template Component\n\nAnother option that is more “data”-based is to create a special “story-generating” template component:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/list-story-template.js.mdx',\n    'react/list-story-template.ts.mdx',\n    'vue/list-story-template.2.js.mdx',\n    'vue/list-story-template.2.ts.mdx',\n    'vue/list-story-template.3.js.mdx',\n    'vue/list-story-template.3.ts.mdx',\n    'angular/list-story-template.ts.mdx',\n    'web-components/list-story-template.js.mdx',\n    'web-components/list-story-template.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-stories/stories-for-multiple-components#snippet-list-story-template\"\n/>\n\n<!-- prettier-ignore-end -->\n\nThis approach is a little more complex to setup, but it means you can more easily reuse the `args` to each story in a composite component. It also means that you can alter the args to the component with the Controls addon.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-stories/stories-for-multiple-components.md","loc":{"lines":{"from":76,"to":100}}}}],["977",{"pageContent":"---\ntitle: 'Accessibility tests'\n---\n\n<YouTubeCallout id=\"rNLL0SICr9w\" title=\"STOP fighting accessibility | automate a11y checks\" />\n\nAccessibility is the practice of making websites inclusive to all. That means supporting requirements such as: keyboard navigation, screen reader support, touch-friendly, usable color contrast, reduced motion, and zoom support.\n\nAccessibility tests audit the rendered DOM against a set of heuristics based on [WCAG](https://www.w3.org/WAI/standards-guidelines/wcag/) rules and other industry-accepted best practices. They act as the first line of QA to catch blatant accessibility violations.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"component-accessibility-testing.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":1,"to":16}}}}],["978",{"pageContent":"Accessibility checks with a11y addon\n\nStorybook provides an official [a11y addon](https://storybook.js.org/addons/@storybook/addon-a11y). Powered by Deque's [axe-core](https://github.com/dequelabs/axe-core), which automatically catches up to [57% of WCAG issues](https://www.deque.com/blog/automated-testing-study-identifies-57-percent-of-digital-accessibility-issues/).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":18,"to":20}}}}],["979",{"pageContent":"Set up the a11y addon\n\nIf you want to check accessibility for your stories using the [addon](https://storybook.js.org/addons/@storybook/addon-a11y/), you'll need to install it and add it to your Storybook.\n\nRun the following command to install the addon.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-a11y-install.yarn.js.mdx',\n    'common/storybook-a11y-install.npm.js.mdx',\n    'common/storybook-a11y-install.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nUpdate your Storybook configuration (in `.storybook/main.js|ts`) to include the accessibility addon.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-a11y-register.js.mdx',\n    'common/storybook-a11y-register.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nStart your Storybook, and you will see some noticeable differences in the UI. A new toolbar icon and the accessibility panel where you can inspect the results of the tests.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":22,"to":53}}}}],["980",{"pageContent":"<!-- prettier-ignore-end -->\n\nStart your Storybook, and you will see some noticeable differences in the UI. A new toolbar icon and the accessibility panel where you can inspect the results of the tests.\n\n![Storybook accessibility addon running](./storybook-a11y-addon-optimized.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":53,"to":57}}}}],["981",{"pageContent":"How it works\n\nStorybook's a11y addon runs [Axe](https://github.com/dequelabs/axe-core) on the selected story. Allowing you to catch and fix accessibility issues during development. For example, if you’re working on a button component and included the following set of stories:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":59,"to":63}}}}],["982",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/component-story-with-accessibility.js.mdx',\n    'react/component-story-with-accessibility.ts.mdx',\n    'angular/component-story-with-accessibility.ts.mdx',\n    'vue/component-story-with-accessibility.2.js.mdx',\n    'vue/component-story-with-accessibility.2.ts.mdx',\n    'vue/component-story-with-accessibility.3.js.mdx',\n    'vue/component-story-with-accessibility.3.ts.mdx',\n    'svelte/component-story-with-accessibility.js.mdx',\n    'web-components/component-story-with-accessibility.js.mdx',\n    'web-components/component-story-with-accessibility.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-tests/accessibility-testing#snippet-component-story-with-accessibility\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":63,"to":82}}}}],["983",{"pageContent":"<!-- prettier-ignore-end -->\n\nCycling through both stories, you will see that the `Inaccessible` story contains some issues that need fixing. Opening the violations tab in the accessibility panel provides a clear description of the accessibility issue and guidelines for solving it.\n\n![Storybook accessibility addon running](./storybook-a11y-addon-optimized.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":82,"to":86}}}}],["984",{"pageContent":"Configure\n\nOut of the box, Storybook's accessibility addon includes a set of accessibility rules that cover most issues. You can also fine-tune the [addon configuration](https://github.com/storybookjs/storybook/tree/next/code/addons/a11y#parameters) or override [Axe's ruleset](https://github.com/storybookjs/storybook/tree/next/code/addons/a11y#handling-failing-rules) to best suit your needs.\n\n#### Global a11y configuration\n\nIf you need to dismiss an accessibility rule or modify its settings across all stories, you can add the following to your [storybook/preview.js](../configure/overview.md#configure-story-rendering):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addon-a11y-global-config.js.mdx',\n    'common/storybook-addon-a11y-global-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":88,"to":105}}}}],["985",{"pageContent":"Component-level a11y configuration\n\nYou can also customize your own set of rules for all stories of a component. Update your story's default export and add a parameter with the required configuration:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/storybook-addon-a11y-component-config.ts.mdx',\n    'web-components/storybook-addon-a11y-component-config.js.mdx',\n    'web-components/storybook-addon-a11y-component-config.ts.mdx',\n    'common/storybook-addon-a11y-component-config.js.mdx',\n    'common/storybook-addon-a11y-component-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":107,"to":123}}}}],["986",{"pageContent":"Story-level a11y configuration\n\nCustomize the a11y ruleset at the story level by updating your story to include a new parameter:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/storybook-addon-a11y-story-config.js.mdx',\n    'react/storybook-addon-a11y-story-config.ts.mdx',\n    'angular/storybook-addon-a11y-story-config.ts.mdx',\n    'vue/storybook-addon-a11y-story-config.js.mdx',\n    'vue/storybook-addon-a11y-story-config.ts.mdx',\n    'svelte/storybook-addon-a11y-story-config.js.mdx',\n    'web-components/storybook-addon-a11y-story-config.js.mdx',\n    'web-components/storybook-addon-a11y-story-config.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-tests/accessibility-testing#snippet-storybook-addon-a11y-story-config\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":125,"to":146}}}}],["987",{"pageContent":"How to disable a11y tests\n\nDisable accessibility testing for stories or components by adding the following parameter to your story’s export or component’s default export respectively:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n   'react/storybook-addon-a11y-disable.js.mdx',\n   'react/storybook-addon-a11y-disable.ts.mdx',\n   'angular/storybook-addon-a11y-disable.ts.mdx',\n   'vue/storybook-addon-a11y-disable.js.mdx',\n   'vue/storybook-addon-a11y-disable.ts.mdx',\n   'svelte/storybook-addon-a11y-disable.js.mdx',\n   'web-components/storybook-addon-a11y-disable.js.mdx',\n   'web-components/storybook-addon-a11y-disable.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-tests/accessibility-testing#snippet-storybook-addon-a11y-disable\"\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":148,"to":169}}}}],["988",{"pageContent":"Automate accessibility tests with test runner\n\nThe most accurate way to check accessibility is manually on real devices. However, you can use automated tools to catch common accessibility issues. For example, [Axe](https://www.deque.com/axe/), on average, catches upwards to [57% of WCAG issues](https://www.deque.com/blog/automated-testing-study-identifies-57-percent-of-digital-accessibility-issues/) automatically.\n\nThese tools work by auditing the rendered DOM against heuristics based on [WCAG](https://www.w3.org/WAI/standards-guidelines/wcag/) rules and other industry-accepted best practices. You can then integrate these tools into your test automation pipeline using the Storybook [test runner](./test-runner.md#test-hook-api-experimental) and [axe-playwright](https://github.com/abhinaba-ghosh/axe-playwright).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":171,"to":175}}}}],["989",{"pageContent":"Setup\n\nTo enable accessibility testing with the test runner, you will need to take additional steps to set it up properly. We recommend you go through the [test runner documentation](./test-runner.md) before proceeding with the rest of the required configuration.\n\nRun the following command to install the required dependencies.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-axe-playwright.yarn.js.mdx',\n    'common/storybook-test-runner-axe-playwright.npm.js.mdx',\n    'common/storybook-test-runner-axe-playwright.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nAdd a new [configuration file](./test-runner.md#test-hook-api-experimental) inside your Storybook directory with the following inside:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-a11y-config.js.mdx',\n    'common/storybook-test-runner-a11y-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":177,"to":208}}}}],["990",{"pageContent":"<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-a11y-config.js.mdx',\n    'common/storybook-test-runner-a11y-config.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 `preRender` and `postRender` are convenient hooks that allow you to extend the test runner's default configuration. They are **experimental** and subject to changes. Read more about them [here](./test-runner.md#test-hook-api-experimental).\n\n</div>\n\nWhen you execute the test runner (for example, with `yarn test-storybook`), it will run the accessibility audit and any [interaction tests](./interaction-testing.md) you might have configured for each component story.\n\nIt starts checking for issues by traversing the DOM tree starting from the story's root element and generates a detailed report based on the issues it encountered.\n\n![Accessibility testing with the test runner](./test-runner-a11y-optimized.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":208,"to":227}}}}],["991",{"pageContent":"A11y config with the test runner\n\nThe test runner provides [helper methods](./test-runner.md#helpers), allowing access to the story's information. You can use them to extend the test runner's configuration and provide additional options you may have for a specific story. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-a11y-configure.js.mdx',\n    'common/storybook-test-runner-a11y-configure.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":229,"to":242}}}}],["992",{"pageContent":"Disable a11y tests with the test runner\n\nAdditionally, if you have already [disabled accessibility](#how-to-disable-a11y-tests) tests for any particular story, you can also configure the test runner to avoid testing it as well. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-a11y-disable.js.mdx',\n    'common/storybook-test-runner-a11y-disable.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n---\n\n#### What’s the difference between browser-based and linter-based accessibility tests?\n\nBrowser-based accessibility tests, like those found in Storybook, evaluate the rendered DOM because that gives you the highest accuracy. Auditing code that hasn't been compiled yet is one step removed from the real thing, so you won't catch everything the user might experience.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":244,"to":263}}}}],["993",{"pageContent":"Learn about other UI tests\n\n- [Test runner](./test-runner.md) to automate test execution\n- [Visual tests](./visual-testing.md) for appearance\n- Accessibility tests for accessibility\n- [Interaction tests](./interaction-testing.md) for user behavior simulation\n- [Coverage tests](./test-coverage.md) for measuring code coverage\n- [Snapshot tests](./snapshot-testing.md) for rendering errors and warnings\n- [Import stories in other tests](./importing-stories-in-tests.md) for other tools","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/accessibility-testing.md","loc":{"lines":{"from":265,"to":273}}}}],["994",{"pageContent":"---\ntitle: 'Import stories in tests'\n---\n\nTeams test a variety of UI characteristics using different tools. Each tool requires you to replicate the same component state over and over. That’s a maintenance headache. Ideally, you’d set up your tests in the same way and reuse that across tools.\n\nStorybook enables you to isolate a component and capture all of its use cases in a `*.stories.js` file. Stories are standard JavaScript modules so they’re cross compatible with the whole JavaScript ecosystem. No API lock-in.\n\nStories are a practical starting point for UI testing. Import stories into tools like [Jest](https://jestjs.io/), [Testing Library](https://testing-library.com/), [Puppeteer](https://pptr.dev/), [Cypress](https://www.cypress.io/), and [Playwright](https://playwright.dev/) to save time and maintenance work.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/importing-stories-in-tests.md","loc":{"lines":{"from":1,"to":9}}}}],["995",{"pageContent":"Setup the testing addon for your framework\n\nStorybook has test addons for core frameworks React, Vue (2,3), and Angular. This allows you to reuse stories along with all of their mocks, dependencies, and context.\n\n- [@storybook/testing-react](https://storybook.js.org/addons/@storybook/testing-react)\n- [@storybook/testing-vue](https://storybook.js.org/addons/@storybook/testing-vue)\n- [@storybook/testing-vue3](https://storybook.js.org/addons/@storybook/testing-vue3)\n- [@storybook/testing-angular](https://storybook.js.org/addons/@storybook/testing-angular)\n\n### Install the addon\n\nRun the following command to add Storybook's testing addon into your environment:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-testing-addon-install.yarn.js.mdx',\n    'common/storybook-testing-addon-install.npm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/importing-stories-in-tests.md","loc":{"lines":{"from":11,"to":33}}}}],["996",{"pageContent":"Optional configuration\n\nIf you've set up global decorators or parameters and you need to use them in your tests, add the following to your test configuration file:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/storybook-testing-addon-optional-config.js.mdx',\n    'vue/storybook-testing-addon-optional-config.2.js.mdx',\n    'vue/storybook-testing-addon-optional-config.3.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nUpdate your test script to include the configuration file:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/storybook-testing-addon-optional-config-scripts.json.mdx',\n    'vue/storybook-testing-addon-optional-config-scripts.json.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/importing-stories-in-tests.md","loc":{"lines":{"from":35,"to":62}}}}],["997",{"pageContent":"Example with Testing Library\n\n[Testing Library](https://testing-library.com/) is a suite of helper libraries for browser-based interaction tests. With [Component Story Format](../api/csf.md), your stories are reusable with Testing Library. Each named export (story) is renderable within your testing setup.\n\n<div class=\"aside\">\n\n💡 You can use Testing Library out-of-the-box with [Storybook Interaction Testing](./interaction-testing.md).\n\n</div>\n\nFor example, if you were working on a login component and wanted to test the invalid credentials scenario, here's how you could write your test:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/component-test-with-testing-library.js.mdx',\n    'vue/component-test-with-testing-library.js.mdx',\n    'angular/component-test-with-testing-library.ts.mdx',\n    'svelte/component-test-with-testing-library.js.mdx',\n    'preact/component-test-with-testing-library.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/importing-stories-in-tests.md","loc":{"lines":{"from":64,"to":88}}}}],["998",{"pageContent":"<!-- prettier-ignore-end -->\n\nOnce the test runs, it loads the story and renders it. [Testing Library](https://testing-library.com/) then emulates the user's behavior and checks if the component state has updated.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/importing-stories-in-tests.md","loc":{"lines":{"from":88,"to":90}}}}],["999",{"pageContent":"Example with Cypress\n\n[Cypress](https://www.cypress.io/) is an end-to-end testing framework. It enables you to test a complete instance of your application by simulating user behavior. With Component Story Format, your stories are reusable with Cypress. Each named export (in other words, a story) is renderable within your testing setup.\n\nAn example of an end-to-end test with Cypress and Storybook is testing a login component for the correct inputs. For example, if you had the following story:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/importing-stories-in-tests.md","loc":{"lines":{"from":92,"to":98}}}}],["1000",{"pageContent":"An example of an end-to-end test with Cypress and Storybook is testing a login component for the correct inputs. For example, if you had the following story:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/login-form-with-play-function.js.mdx',\n    'react/login-form-with-play-function.ts.mdx',\n    'angular/login-form-with-play-function.ts.mdx',\n    'vue/login-form-with-play-function.js.mdx',\n    'vue/login-form-with-play-function.ts.mdx',\n    'web-components/login-form-with-play-function.js.mdx',\n    'web-components/login-form-with-play-function.ts.mdx',\n    'svelte/login-form-with-play-function.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-tests/importing-stories-in-tests#snippet-login-form-with-play-function\"\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n 💡 The play function contains small snippets of code that run after the story renders. It allows you to sequence interactions in stories.\n\n</div>\n\nWith Cypress, you could write the following test:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/importing-stories-in-tests.md","loc":{"lines":{"from":98,"to":124}}}}],["1001",{"pageContent":"</div>\n\nWith Cypress, you could write the following test:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/component-cypress-test.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nWhen Cypress runs your test, it loads Storybook's isolated iframe and checks if the inputs match the test values.\n\n![Cypress running successfully](./cypress-success-run-tests-optimized.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/importing-stories-in-tests.md","loc":{"lines":{"from":124,"to":140}}}}],["1002",{"pageContent":"Example with Playwright\n\n[Playwright](https://playwright.dev/) is a browser automation tool and end-to-end testing framework from Microsoft. It offers cross-browser automation, mobile testing with device emulation, and headless testing. With Component Story Format, your stories are reusable with Playwright. Each named export (in other words, a story) is renderable within your testing setup.\n\nA real-life scenario of user flow testing with Playwright would be how to test a login form for validity. For example, if you had the following story already created:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/importing-stories-in-tests.md","loc":{"lines":{"from":142,"to":148}}}}],["1003",{"pageContent":"A real-life scenario of user flow testing with Playwright would be how to test a login form for validity. For example, if you had the following story already created:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/login-form-with-play-function.js.mdx',\n    'react/login-form-with-play-function.ts.mdx',\n    'angular/login-form-with-play-function.ts.mdx',\n    'vue/login-form-with-play-function.js.mdx',\n    'vue/login-form-with-play-function.ts.mdx',\n    'web-components/login-form-with-play-function.js.mdx',\n    'web-components/login-form-with-play-function.ts.mdx',\n    'svelte/login-form-with-play-function.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-tests/importing-stories-in-tests#snippet-login-form-with-play-function\"\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n 💡 The play function contains small snippets of code that run after the story renders. It allows you to sequence interactions in stories.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/importing-stories-in-tests.md","loc":{"lines":{"from":148,"to":171}}}}],["1004",{"pageContent":"<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n 💡 The play function contains small snippets of code that run after the story renders. It allows you to sequence interactions in stories.\n</div>\n\nWith Playwright, you can write a test to check if the inputs are filled and match the story:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/component-playwright-test.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nOnce you execute Playwright, it opens a new browser window, loads Storybook's isolated iframe, asserts if the inputs contain the specified values, and displays the test results in the terminal.\n\n---","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/importing-stories-in-tests.md","loc":{"lines":{"from":171,"to":191}}}}],["1005",{"pageContent":"Learn about other UI tests\n\n- [Test runner](./test-runner.md) to automate test execution\n- [Visual tests](./visual-testing.md) for appearance\n- [Accessibility tests](./accessibility-testing.md) for accessibility\n- [Interaction tests](./interaction-testing.md) for user behavior simulation\n- [Coverage tests](./test-coverage.md) for measuring code coverage\n- [Snapshot tests](./snapshot-testing.md) for rendering errors and warnings\n- Import stories in other tests for other tools","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/importing-stories-in-tests.md","loc":{"lines":{"from":193,"to":201}}}}],["1006",{"pageContent":"---\ntitle: 'Interaction tests'\n---\n\nAs you build more complex UIs like pages, components become responsible for more than just rendering the UI. They fetch data and manage state. Interaction tests allow you to verify these functional aspects of UIs.\n\nIn a nutshell, you start by supplying the appropriate props for the initial state of a component. Then simulate user behavior such as clicks and form entries. Finally, check whether the UI and component state update correctly.\n\nIn Storybook, this familiar workflow happens in your browser. That makes it easier to debug failures because you're running tests in the same environment as you develop components: the browser.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"component-interaction-testing.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":1,"to":16}}}}],["1007",{"pageContent":"How does component testing in Storybook work?\n\nYou start by writing a [**story**](../writing-stories/introduction.md) to set up the component's initial state. Then simulate user behavior using the **play** function. Finally, use the **test-runner** to confirm that the component renders correctly and that your interaction tests with the **play** function pass. Additionally, you can automate test execution via the [command line](./test-runner.md#cli-options) or in your [CI environment](./test-runner.md#set-up-ci-to-run-tests).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":18,"to":20}}}}],["1008",{"pageContent":"- The [`play`](../writing-stories/play-function.md) function is a small snippet of code that runs after a story finishes rendering. You can use this to test user workflows.\n- The test is written using Storybook-instrumented versions of [Jest](https://jestjs.io/) and [Testing Library](https://testing-library.com/).\n- [`@storybook/addon-interactions`](https://storybook.js.org/addons/@storybook/addon-interactions/) visualizes the test in Storybook and provides a playback interface for convenient browser-based debugging.\n- [`@storybook/test-runner`](https://github.com/storybookjs/test-runner) is a standalone utility—powered by [Jest](https://jestjs.io/) and [Playwright](https://playwright.dev/)—that executes all of your interactions tests and catches broken stories.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":22,"to":25}}}}],["1009",{"pageContent":"Set up the interactions addon\n\nTo enable interaction testing with Storybook, you'll need to take additional steps to set it up properly. We recommend you go through the [test runner documentation](./test-runner.md) before proceeding with the rest of the required configuration.\n\nRun the following command to install the interactions addon and related dependencies.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addon-interactions-addon-full-install.yarn.js.mdx',\n    'common/storybook-addon-interactions-addon-full-install.npm.js.mdx',\n    'common/storybook-addon-interactions-addon-full-install.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nUpdate your Storybook configuration (in `.storybook/main.js|ts`) to include the interactions addon.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-interactions-addon-registration.js.mdx',\n    'common/storybook-interactions-addon-registration.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":27,"to":56}}}}],["1010",{"pageContent":"Write an interaction test\n\nThe test itself is defined inside a `play` function connected to a story. Here's an example of how to set up an interaction test with Storybook and the `play` function:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'react/login-form-with-play-function.js.mdx',\n    'react/login-form-with-play-function.ts.mdx',\n    'angular/login-form-with-play-function.ts.mdx',\n    'vue/login-form-with-play-function.js.mdx',\n    'vue/login-form-with-play-function.ts.mdx',\n    'web-components/login-form-with-play-function.js.mdx',\n    'web-components/login-form-with-play-function.ts.mdx',\n    'svelte/login-form-with-play-function.js.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-tests/interaction-testing#snippet-login-form-with-play-function\"\n/>\n\n<!-- prettier-ignore-end -->\n\nOnce the story loads in the UI, it simulates the user's behavior and verifies the underlying logic.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":58,"to":81}}}}],["1011",{"pageContent":"<!-- prettier-ignore-end -->\n\nOnce the story loads in the UI, it simulates the user's behavior and verifies the underlying logic.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"addon-interaction-example-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":81,"to":90}}}}],["1012",{"pageContent":"API for user-events\n\nUnder the hood, Storybook’s interaction addon mirrors Testing Library’s [`user-events`](https://testing-library.com/docs/user-event/intro/) API. If you’re familiar with [Testing Library](https://testing-library.com/), you should be at home in Storybook.\n\nBelow is an abridged API for user-event. For more, check out the [official user-event docs](https://testing-library.com/docs/user-event/utility/).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":92,"to":96}}}}],["1013",{"pageContent":"| User events       | Description                                                                                                                                              |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `clear`           | Selects the text inside inputs, or textareas and deletes it <br/>`userEvent.clear(await within(canvasElement).getByRole('myinput'));`                    |\n| `click`           | Clicks the element, calling a click() function <br/>`userEvent.click(await within(canvasElement).getByText('mycheckbox'));`                              |\n| `dblClick`        | Clicks the element twice <br/>`userEvent.dblClick(await within(canvasElement).getByText('mycheckbox'));`                                                 |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":98,"to":102}}}}],["1014",{"pageContent":"| `dblClick`        | Clicks the element twice <br/>`userEvent.dblClick(await within(canvasElement).getByText('mycheckbox'));`                                                 |\n| `deselectOptions` | Removes the selection from a specific option of a select element <br/>`userEvent.deselectOptions(await within(canvasElement).getByRole('listbox','1'));` |\n| `hover`           | Hovers an element <br/>`userEvent.hover(await within(canvasElement).getByTestId('example-test'));`                                                       |\n| `keyboard`        | Simulates the keyboard events <br/>`userEvent.keyboard(‘foo’);`                                                                                          |\n| `selectOptions`   | Selects the specified option, or options of a select element <br/>`userEvent.selectOptions(await within(canvasElement).getByRole('listbox'),['1','2']);` |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":102,"to":106}}}}],["1015",{"pageContent":"| `selectOptions`   | Selects the specified option, or options of a select element <br/>`userEvent.selectOptions(await within(canvasElement).getByRole('listbox'),['1','2']);` |\n| `type`            | Writes text inside inputs, or textareas <br/>`userEvent.type(await within(canvasElement).getByRole('my-input'),'Some text');`                            |\n| `unhover`         | Unhovers out of element <br/>`userEvent.unhover(await within(canvasElement).getByLabelText(/Example/i));`                                                |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":106,"to":108}}}}],["1016",{"pageContent":"Group interactions with the `step` function\n\nFor complex flows, it can be worthwhile to group sets of related interactions together using the `step` function. This allows you to provide a custom label that describes a set of interactions:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/storybook-interactions-step-function.ts.mdx',\n    'web-components/storybook-interactions-step-function.js.mdx',\n    'web-components/storybook-interactions-step-function.ts.mdx',\n    'common/storybook-interactions-step-function.js.mdx',\n    'common/storybook-interactions-step-function.ts.mdx',\n  ]}\n  usesCsf3\n  csf2Path=\"writing-tests/interaction-testing#snippet-storybook-interactions-step-function\"\n/>\n\n<!-- prettier-ignore-end -->\n\nThis will show your interactions nested in a collapsible group:\n\n![Interaction testing with labeled steps](./storybook-addon-interactions-steps.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":110,"to":132}}}}],["1017",{"pageContent":"Interactive debugger\n\nIf you check your interactions panel, you'll see the step-by-step flow. It also offers a handy set of UI controls to pause, resume, rewind, and step through each interaction.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"addon-interactions-playback-controls-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":134,"to":143}}}}],["1018",{"pageContent":"Permalinks for reproductions\n\nThe `play` function is executed after the story is rendered. If there’s an error, it’ll be shown in the interaction addon panel to help with debugging.\n\nSince Storybook is a webapp, anyone with the URL can reproduce the error with the same detailed information without any additional environment configuration or tooling required.\n\n![Interaction testing with a component](./storybook-addon-interactions-error-optimized.png)\n\nStreamline interaction testing further by automatically [publishing Storybook](../sharing/publish-storybook.md) in pull requests. That gives teams a universal reference point to test and debug stories.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":145,"to":153}}}}],["1019",{"pageContent":"Execute tests with the test-runner\n\nStorybook only runs the interaction test when you're viewing a story. Therefore, you'd have to go through each story to run all your checks. As your Storybook grows, it becomes unrealistic to review each change manually. Storybook [test-runner](https://github.com/storybookjs/test-runner) automates the process by running all tests for you. To execute the test-runner, open a new terminal window and run the following command:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-execute.yarn.js.mdx',\n    'common/storybook-test-runner-execute.npm.js.mdx',\n    'common/storybook-test-runner-execute.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n![Interaction test with test runner](./storybook-interaction-test-runner-loginform-optimized.png)\n\n<div class=\"aside\">\n\n💡 If you need, you can provide additional flags to the test-runner. Read the [documentation](./test-runner.md#cli-options) to learn more.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":155,"to":177}}}}],["1020",{"pageContent":"Automate\n\nOnce you're ready to push your code into a pull request, you'll want to automatically run all your checks using a Continuous Integration (CI) service before merging it. Read our [documentation](./test-runner.md#set-up-ci-to-run-tests) for a detailed guide on setting up a CI environment to run tests.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":179,"to":181}}}}],["1021",{"pageContent":"Troubleshooting","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":183,"to":183}}}}],["1022",{"pageContent":"The TypeScript types aren't recognized\n\nIf you're writing interaction tests with TypeScript, you may run into a situation where the TypeScript types aren't recognized in your IDE. This a known issue with newer package managers (e.g., pnpm, Yarn) and how they hoist dependencies. If you're working with Yarn the process happens automatically and the types should be recognized. However, if you're working with pnpm, you'll need to create a `.npmrc` file in the root of your project and add the following:\n\n```text\n// .npmrc\npublic-hoist-pattern[]=@types*\n```\n\nIf you're still encountering issues, you can always add the [`@types/testing-library__jest-dom`](https://www.npmjs.com/package/@types/testing-library__jest-dom) package to your project.\n\n---","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":185,"to":196}}}}],["1023",{"pageContent":"What’s the difference between interaction tests and visual tests?\n\nInteraction tests can be expensive to maintain when applied wholesale to every component. We recommend combining them with other methods like visual testing for comprehensive coverage with less maintenance work.\n\n#### What's the difference between interaction tests and using Jest + Testing Library alone?\n\nInteraction tests integrate Jest and Testing Library into Storybook. The biggest benefit is the ability to view the component you're testing in a real browser. That helps you debug visually, instead of getting a dump of the (fake) DOM in the command line or hitting the limitations of how JSDOM mocks browser functionality. It's also more convenient to keep stories and tests together in one file than having them spread across files.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":198,"to":204}}}}],["1024",{"pageContent":"Learn about other UI tests\n\n- [Test runner](./test-runner.md) to automate test execution\n- [Visual tests](./visual-testing.md) for appearance\n- [Accessibility tests](./accessibility-testing.md) for accessibility\n- Interaction tests for user behavior simulation\n- [Coverage tests](./test-coverage.md) for measuring code coverage\n- [Snapshot tests](./snapshot-testing.md) for rendering errors and warnings\n- [Import stories in other tests](./importing-stories-in-tests.md) for other tools","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/interaction-testing.md","loc":{"lines":{"from":206,"to":214}}}}],["1025",{"pageContent":"---\ntitle: 'How to test UIs with Storybook'\n---\n\nStorybook provides a clean-room environment for testing components in isolation. Stories make it easy to explore a component in all its variations, no matter how complex.\n\nThat means stories are a pragmatic starting point for your UI testing strategy. You already write stories as a natural part of UI development, testing those stories is a low-effort way to prevent UI bugs over time.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"stories-are-tests-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n\nThe simplest testing method is manual “spot checking”. You run Storybook locally, then eyeball every story to verify its appearance and behavior. [Publish](../sharing/publish-storybook.md) your Storybook online to share reproductions and get teammates involved.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/introduction.md","loc":{"lines":{"from":1,"to":16}}}}],["1026",{"pageContent":"To test a component in isolation, you often have to mock data, dependencies, or even network requests. Check out our guide on [mocking in Storybook](../writing-stories/build-pages-with-storybook.md#mocking-connected-components) for more info.\n\nStorybook also comes with tools, [a test runner](./test-runner.md), and [handy integrations](./importing-stories-in-tests.md) with the larger JavaScript ecosystem to expand your UI test coverage. These docs detail how you can use Storybook for UI testing.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/introduction.md","loc":{"lines":{"from":18,"to":20}}}}],["1027",{"pageContent":"- [**Test runner**](./test-runner.md) to automatically test your entire Storybook and catch broken stories.\n- [**Visual tests**](./visual-testing.md) capture a screenshot of every story then compare it against baselines to detect appearance and integration issues\n- [**Accessibility tests**](./accessibility-testing.md) catch usability issues related to visual, hearing, mobility, cognitive, speech, or neurological disabilities\n- [**Interaction tests**](./interaction-testing.md) verify component functionality by simulating user behaviour, firing events, and ensuring that state is updated as expected\n- [**Coverage tests**](./test-coverage.md) to measure how much of your code is covered by your tests\n- [**Snapshot tests**](./snapshot-testing.md) detect changes in the rendered markup to surface rendering errors or warnings\n- [**Import stories in other tests**](./importing-stories-in-tests.md) to QA even more UI characteristics","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/introduction.md","loc":{"lines":{"from":22,"to":28}}}}],["1028",{"pageContent":"---\ntitle: 'Snapshot tests'\n---\n\nSnapshot tests compare the rendered markup of every story against known baselines. It’s a way to identify markup changes that trigger rendering errors and warnings.\n\nStorybook is a helpful tool for snapshot testing because every story is essentially a test specification. Any time you write or update a story, you get a snapshot test for free.\n\n![Example Snapshot test](./snapshot-test.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/snapshot-testing.md","loc":{"lines":{"from":1,"to":9}}}}],["1029",{"pageContent":"Setup Storyshots\n\n[Storyshots](https://storybook.js.org/addons/@storybook/addon-storyshots/) is the official Storybook addon that enables snapshot testing, powered by [Jest](https://jestjs.io/docs/getting-started).\n\nRun the following command to install Storyshots:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-addon-storyshots-install.yarn.js.mdx',\n    'common/storybook-addon-storyshots-install.npm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nAdd a test file to your environment with the following contents to configure Storyshots:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-storyshots-config.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n💡 You can name the test file differently to suit your needs. Bear in mind that it requires to be picked up by Jest.\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/snapshot-testing.md","loc":{"lines":{"from":11,"to":42}}}}],["1030",{"pageContent":"<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n💡 You can name the test file differently to suit your needs. Bear in mind that it requires to be picked up by Jest.\n</div>\n\nRun your first test. Storyshots will recognize your stories (based on [.storybook/main.js's setup](https://storybook.js.org/docs/react/configure/story-rendering)) and save them in the **snapshots** directory.\n\n```shell\nnpm test storybook.test.js","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/snapshot-testing.md","loc":{"lines":{"from":42,"to":51}}}}],["1031",{"pageContent":"![Successful snapshot tests](./storyshots-pass.png)\n\nWhen you make changes to your components or stories, rerun the test to identify the changes to the rendered markup.\n\n![Failing snapshots](./storyshots-fail.png)\n\nIf they're intentional, accept them as new baselines. If the changes are bugs, fix the underlying code, then rerun the snapshot tests.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/snapshot-testing.md","loc":{"lines":{"from":54,"to":60}}}}],["1032",{"pageContent":"Configure the snapshot's directory\n\nIf your project has a custom setup for snapshot testing, you'll need to take additional steps to run Storyshots. You'll need to install both [@storybook/addon-storyshots-puppeteer](https://storybook.js.org/addons/@storybook/addon-storyshots-puppeteer) and [puppeteer](https://github.com/puppeteer/puppeteer):\n\n```shell\n# With npm\nnpm i -D @storybook/addon-storyshots-puppeteer puppeteer\n\n# With yarn\nyarn add @storybook/addon-storyshots-puppeteer puppeteer\n```\n\nNext, update your test file (for example, `storybook.test.js`) to the following:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-storyshots-custom-directory.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n💡 Don't forget to replace your-custom-directory with your own.\n</div>\n\nWhen you run your tests, the snapshots will be available in the directory you've specified.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/snapshot-testing.md","loc":{"lines":{"from":62,"to":90}}}}],["1033",{"pageContent":"Framework configuration\n\nBy default, Storyshots detects your project's framework. If you run into a situation where this is not the case, you can adjust the configuration object and specify your framework. For example, if you wanted to configure the addon for a Vue 3 project:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-storyshots-custom-framework.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nThese are the frameworks currently supported by Storyshots: `angular`, `html`, `preact`, `react`, `react-native`, `svelte`, `vue`, `vue3`, and `web-components`.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/snapshot-testing.md","loc":{"lines":{"from":92,"to":106}}}}],["1034",{"pageContent":"Additional customization\n\nStoryshots is highly customizable and includes options for various advanced use cases. You can read more in the [addon’s documentation](https://github.com/storybookjs/storybook/tree/master/addons/storyshots/storyshots-core#options).\n\n---\n\n#### What’s the difference between snapshot tests and visual tests?\n\nVisual tests capture images of stories and compare them against image baselines. Snapshot tests take DOM snapshots and compare them against DOM baselines. Visual tests are better suited for verifying appearance. Snapshot tests are useful for smoke testing and ensuring the DOM doesn’t change.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/snapshot-testing.md","loc":{"lines":{"from":108,"to":116}}}}],["1035",{"pageContent":"Learn about other UI tests\n\n- [Test runner](./test-runner.md) to automate test execution\n- [Visual tests](./visual-testing.md) for appearance\n- [Accessibility tests](./accessibility-testing.md) for accessibility\n- [Interaction tests](./interaction-testing.md) for user behavior simulation\n- [Coverage tests](./test-coverage.md) for measuring code coverage\n- Snapshot tests for rendering errors and warnings\n- [Import stories in other tests](./importing-stories-in-tests.md) for other tools","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/snapshot-testing.md","loc":{"lines":{"from":118,"to":126}}}}],["1036",{"pageContent":"---\ntitle: 'Test coverage'\n---\n\n<YouTubeCallout id=\"wEa6W8uUGSA\" title=\"These tests use NO CODE | component testing in Storybook\" />\n\nTest coverage is the practice of measuring whether existing tests fully cover your code. That means surfacing areas which aren't currently being tested, such as: conditions, logic branches, functions and variables.\n\nCoverage tests examine the instrumented code against a set of industry-accepted best practices. They act as the last line of QA to improve the quality of your test suite.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"component-test-coverage-whitebg.mp4\"\n    type=\"video/mp4\"\n  />\n</video>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-coverage.md","loc":{"lines":{"from":1,"to":16}}}}],["1037",{"pageContent":"Code instrumentation with the coverage addon\n\nStorybook provides an official [test coverage addon](https://storybook.js.org/addons/@storybook/addon-coverage). Powered by [Istanbul](https://istanbul.js.org/), which allows out-of-the-box code instrumentation for the most commonly used frameworks and builders in the JavaScript ecosystem.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-coverage.md","loc":{"lines":{"from":18,"to":20}}}}],["1038",{"pageContent":"Set up the coverage addon\n\nEngineered to work alongside modern testing tools (e.g., [Playwright](https://playwright.dev/)), the coverage addon automatically instruments your code and generates code coverage data. For an optimal experience, we recommend using the [test runner](./test-runner.md) alongside the coverage addon to run your tests.\n\nRun the following command to install the addon.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-coverage-addon-install.yarn.js.mdx',\n    'common/storybook-coverage-addon-install.npm.js.mdx',\n    'common/storybook-coverage-addon-install.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nUpdate your Storybook configuration (in `.storybook/main.js|ts`) to include the coverage addon.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-coverage-addon-registration.js.mdx',\n    'common/storybook-coverage-addon-registration.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nStart your Storybook with:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-coverage.md","loc":{"lines":{"from":22,"to":53}}}}],["1039",{"pageContent":"<!-- prettier-ignore-end -->\n\nStart your Storybook with:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-run-dev.yarn.js.mdx',\n    'common/storybook-run-dev.npm.js.mdx',\n    'common/storybook-run-dev.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nFinally, open a new terminal window and run the test-runner with:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-coverage.yarn.js.mdx',\n    'common/storybook-test-runner-coverage.npm.js.mdx',\n    'common/storybook-test-runner-coverage.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n![Coverage test output](./test-runner-coverage-result.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-coverage.md","loc":{"lines":{"from":53,"to":83}}}}],["1040",{"pageContent":"Configure\n\nBy default, the [`@storybook/addon-coverage`](https://storybook.js.org/addons/@storybook/addon-coverage) offers zero-config support for Storybook and instruments your code via [`babel-plugin-istanbul`](https://github.com/istanbuljs/babel-plugin-istanbul) for [Babel](https://babeljs.io/), or [`vite-plugin-istanbul`](https://github.com/iFaxity/vite-plugin-istanbul) for [Vite](https://vitejs.dev/). However, you can extend your Storybook configuration file (i.e., `.storybook/main.js|ts`) and provide additional options to the addon. Listed below are the available options and examples of how to use them.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-coverage-addon-config-options.js.mdx',\n    'common/storybook-coverage-addon-config-options.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-coverage.md","loc":{"lines":{"from":85,"to":98}}}}],["1041",{"pageContent":"| Option                 | Description                                                                                                                                            | Plugin      |\n| ---------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ | ----------- |\n| `cwd`                  | Defines the current working directory <br/>`options: { istanbul: { cwd: process.cwd(),}}`                                                              | Babel, Vite |\n| `include`              | Select the files to collect coverage <br/>`options: { istanbul: { include: ['**/stories/**'],}}`                                                       | Babel, Vite |\n| `exclude`              | Select the files to exclude from coverage <br/>`options: { istanbul: { exclude: ['**/stories/**'],}}`                                                  | Babel, Vite |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-coverage.md","loc":{"lines":{"from":100,"to":104}}}}],["1042",{"pageContent":"| `exclude`              | Select the files to exclude from coverage <br/>`options: { istanbul: { exclude: ['**/stories/**'],}}`                                                  | Babel, Vite |\n| `extension`            | Sets additional file extensions for coverage <br/>`options: { istanbul: { extension: ['.js', '.cjs', '.mjs'],}}`                                       | Babel, Vite |\n| `nycrcPath`            | Defines the relative path for the existing nyc configuration file <br/>`options: { istanbul: { nycrcPath: '../nyc.config.js',}}`                       | Babel, Vite |\n| `excludeNodeModules`   | Disables `node_modules` directory introspection <br/>`options: { istanbul: { excludeNodeModules:false,}}`                                              | Babel       |\n| `ignoreClassMethods`   | Configures a set of method names to ignore from being collected <br/>`options: { istanbul: { ignoreClassMethods: ['example', 'myMethod'],}}`           | Babel       |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-coverage.md","loc":{"lines":{"from":104,"to":108}}}}],["1043",{"pageContent":"| `ignoreClassMethods`   | Configures a set of method names to ignore from being collected <br/>`options: { istanbul: { ignoreClassMethods: ['example', 'myMethod'],}}`           | Babel       |\n| `useInlineSourceMaps`  | Enables coverage collection on source maps <br/>`options: { istanbul: { useInlineSourceMaps: false,}}`                                                 | Babel       |\n| `inputSourceMap`       | Sets the value to store the source map.<br/> Useful for instrumenting code programmatically <br/>`options: { istanbul: { inputSourceMap: sourceMap,}}` | Babel       |\n| `onCover`              | Hook to monitor coverage collection for all tests <br/>`options: { istanbul: { onCover: (fileName, fileCoverage) => {},}}`                             | Babel       |\n| `requireEnv`           | Overrides the `VITE_COVERAGE` environment variable's value by granting access to the `env` variables <br/>`options: { istanbul: { requireEnv: true,}}` | Vite        |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-coverage.md","loc":{"lines":{"from":108,"to":112}}}}],["1044",{"pageContent":"| `requireEnv`           | Overrides the `VITE_COVERAGE` environment variable's value by granting access to the `env` variables <br/>`options: { istanbul: { requireEnv: true,}}` | Vite        |\n| `cypress`              | Replaces the `VITE_COVERAGE` environment variable with `CYPRESS_COVERAGE`. <br/>Requires Cypress <br/>`options: { istanbul: { cypress: true,}}`        | Vite        |\n| `checkProd`            | Configures the plugin to skip instrumentation in production environments <br/>`options: { istanbul: { checkProd: true,}}`                              | Vite        |\n| `forceBuildInstrument` | Configures the plugin to add instrumentation in build mode <br/>`options: { istanbul: { forceBuildInstrument: true,}}`                                 | Vite        |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-coverage.md","loc":{"lines":{"from":112,"to":115}}}}],["1045",{"pageContent":"What about other coverage reporting tools?\n\nOut of the box, code coverage tests work seamlessly with Storybook's test-runner and the [`@storybook/addon-coverage`](https://storybook.js.org/addons/@storybook/addon-coverage). However, that doesn't mean you can't use additional reporting tools (e.g., [Codecov](https://about.codecov.io/)). For instance, if you're working with [LCOV](https://wiki.documentfoundation.org/Development/Lcov), you can use the generated output (in `coverage/storybook/coverage-storybook.json`) and create your own report with:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-coverage-report-lcov.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n---","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-coverage.md","loc":{"lines":{"from":117,"to":131}}}}],["1046",{"pageContent":"Troubleshooting\n\n### Run test coverage in other frameworks\n\nIf you intend on running coverage tests in frameworks with special files like Vue or Svelte, you'll need to adjust your configuration and enable the required file extensions. For example, if you're using Vue, you'll need to add the following to your nyc configuration file (i.e., `.nycrc.json` or `nyc.config.js`):\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-coverage-report-vue.json.mdx',\n    'common/storybook-coverage-report-vue.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-coverage.md","loc":{"lines":{"from":133,"to":148}}}}],["1047",{"pageContent":"The coverage addon doesn't support instrumented code\n\nAs the [coverage addon](https://storybook.js.org/addons/@storybook/addon-coverage) is based on Babel and Vite plugins for code instrumentation, frameworks that don't rely upon these libraries (e.g., Angular configured with Webpack), will require additional configuration to enable code instrumentation. In that case, you can refer to the following [repository](https://github.com/yannbf/storybook-coverage-recipes) for more information.\n\n#### Learn about other UI tests\n\n- [Test runner](./test-runner.md) to automate test execution\n- [Visual tests](./visual-testing.md) for appearance\n- [Accessibility tests](./accessibility-testing.md) for accessibility\n- [Interaction tests](./interaction-testing.md) for user behavior simulation\n- Coverage tests for measuring code coverage\n- [Snapshot tests](./snapshot-testing.md) for rendering errors and warnings\n- [Import stories in other tests](./importing-stories-in-tests.md) for other tools","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-coverage.md","loc":{"lines":{"from":150,"to":162}}}}],["1048",{"pageContent":"---\ntitle: 'Test runner'\n---\n\nStorybook test runner turns all of your stories into executable tests. It is powered by [Jest](https://jestjs.io/) and [Playwright](https://playwright.dev/).\n\n- For those [without a play function](../writing-stories/introduction.md): it verifies whether the story renders without any errors.\n- For those [with a play function](../writing-stories/play-function.md): it also checks for errors in the play function and that all assertions passed.\n\nThese tests run in a live browser and can be executed via the [command line](#cli-options) or your [CI server](#set-up-ci-to-run-tests).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":1,"to":10}}}}],["1049",{"pageContent":"Setup\n\nThe test-runner is a standalone, framework-agnostic utility that runs parallel to your Storybook. You will need to take some additional steps to set it up properly. Detailed below is our recommendation to configure and execute it.\n\nRun the following command to install it.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-install.yarn.js.mdx',\n    'common/storybook-test-runner-install.npm.js.mdx',\n    'common/storybook-test-runner-install.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nUpdate your `package.json` scripts and enable the test runner.\n\n```json\n{\n  \"scripts\": {\n    \"test-storybook\": \"test-storybook\"\n  }\n}","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":12,"to":37}}}}],["1050",{"pageContent":"Start your Storybook with:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'angular/storybook-run-dev.with-builder.js.mdx',\n    'common/storybook-run-dev.yarn.js.mdx',\n    'common/storybook-run-dev.npm.js.mdx',\n    'common/storybook-run-dev.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n💡 Storybook's test runner requires either a locally running Storybook instance or a published Storybook to run all the existing tests.\n</div>\n\nFinally, open a new terminal window and run the test-runner with:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-execute.yarn.js.mdx',\n    'common/storybook-test-runner-execute.npm.js.mdx',\n    'common/storybook-test-runner-execute.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":40,"to":71}}}}],["1051",{"pageContent":"Configure\n\nTest runner offers zero-config support for Storybook. However, you can run `test-storybook --eject` for more fine-grained control. It generates a `test-runner-jest.config.js` file at the root of your project, which you can modify. Additionally, you can extend the generated configuration file and provide [testEnvironmentOptions](https://github.com/playwright-community/jest-playwright#configuration) as the test runner also uses [jest-playwright](https://github.com/playwright-community/jest-playwright) under the hood.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":73,"to":75}}}}],["1052",{"pageContent":"CLI Options\n\nThe test-runner is powered by [Jest](https://jestjs.io/) and accepts a subset of its [CLI options](https://jestjs.io/docs/cli) (for example, `--watch`, `--maxWorkers`).\nIf you're already using any of those flags in your project, you should be able to migrate them into Storybook's test-runner without any issues. Listed below are all the available flags and examples of using them.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":77,"to":80}}}}],["1053",{"pageContent":"| Options                         | Description                                                                                                                      |\n| ------------------------------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| `--help`                        | Output usage information <br/>`test-storybook --help`                                                                            |\n| `-s`, `--stories-json`          | Run in stories json mode. Automatically detected (requires a compatible Storybook) <br/>`test-storybook --stories-json`          |\n| `--no-stories-json`             | Disables stories json mode <br/>`test-storybook --no-stories-json`                                                               |\n| `-c`, `--config-dir [dir-name]` | Directory where to load Storybook configurations from <br/>`test-storybook -c .storybook`                                        |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":82,"to":87}}}}],["1054",{"pageContent":"| `-c`, `--config-dir [dir-name]` | Directory where to load Storybook configurations from <br/>`test-storybook -c .storybook`                                        |\n| `--watch`                       | Run in watch mode <br/>`test-storybook --watch`                                                                                  |\n| `--url`                         | Define the URL to run tests in. Useful for custom Storybook URLs <br/>`test-storybook --url http://the-storybook-url-here.com`   |\n| `--browsers`                    | Define browsers to run tests in. One or multiple of: chromium, firefox, webkit <br/>`test-storybook --browsers firefox chromium` |\n| `--maxWorkers [amount]`         | Specifies the maximum number of workers the worker-pool will spawn for running tests <br/>`test-storybook --maxWorkers=2`        |\n| `--no-cache`                    | Disable the cache <br/>`test-storybook --no-cache`                                                                               |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":87,"to":92}}}}],["1055",{"pageContent":"| `--no-cache`                    | Disable the cache <br/>`test-storybook --no-cache`                                                                               |\n| `--clearCache`                  | Deletes the Jest cache directory and then exits without running tests <br/>`test-storybook --clearCache`                         |\n| `--verbose`                     | Display individual test results with the test suite hierarchy <br/>`test-storybook --verbose`                                    |\n| `-u`, `--updateSnapshot`        | Use this flag to re-record every snapshot that fails during this test run <br/>`test-storybook -u`                               |\n| `--eject`                       | Creates a local configuration file to override defaults of the test-runner <br/>`test-storybook --eject`                         |\n| `--coverage`                    | Runs [coverage tests](./test-coverage.md) on your stories and components <br/> `test-storybook --coverage`                       |","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":92,"to":97}}}}],["1056",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-execute-with-flags.yarn.js.mdx',\n    'common/storybook-test-runner-execute-with-flags.npm.js.mdx',\n    'common/storybook-test-runner-execute-with-flags.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":99,"to":109}}}}],["1057",{"pageContent":"Run tests against a deployed Storybook\n\nBy default, the test-runner assumes that you're running it against a locally served Storybook on port `6006`. If you want to define a target URL to run against deployed Storybooks, you can use the `--url` flag or set the `TARGET_URL` environment variable. For example:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-execute-with-url.yarn.js.mdx',\n    'common/storybook-test-runner-execute-with-url.npm.js.mdx',\n    'common/storybook-test-runner-execute-with-url.pnpm.js.mdx',\n    'common/storybook-test-runner-execute-with-url.env-var.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":111,"to":126}}}}],["1058",{"pageContent":"Set up CI to run tests\n\nYou can also configure the test-runner to run tests on a CI environment. Documented below are some recipes to help you get started.\n\n### Run against deployed Storybooks via Github Actions deployment\n\nIf you're publishing your Storybook with services such as [Vercel](https://vercel.com/) or [Netlify](https://www.netlify.com/), they emit a `deployment_status` event in GitHub Actions. You can use it and set the `deployment_status.target_url` as the `TARGET_URL` environment variable. Here's how:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-with-deploy-event-workflow.yml.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 The published Storybook must be publicly available for this example to work. We recommend running the test server using the recipe [below](#run-against-non-deployed-storybooks) if it requires authentication.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":128,"to":150}}}}],["1059",{"pageContent":"Run against non-deployed Storybooks\n\nYou can use your CI provider (for example, [GitHub Actions](https://github.com/features/actions), [GitLab Pipelines](https://docs.gitlab.com/ee/ci/pipelines/), [CircleCI](https://circleci.com/)) to build and run the test runner against your built Storybook. Here's a recipe that relies on third-party libraries, that is to say, [concurrently](https://www.npmjs.com/package/concurrently), [http-server](https://www.npmjs.com/package/http-server), and [wait-on](https://www.npmjs.com/package/wait-on) to build Storybook and run tests with the test-runner.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-local-build-workflow.yml.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":152,"to":166}}}}],["1060",{"pageContent":"<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-local-build-workflow.yml.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 By default Storybook outputs the [build](../sharing/publish-storybook.md#build-storybook-as-a-static-web-application) to the `storybook-static` directory. If you're using a different build directory, you'll need to adjust the recipe accordingly.\n\n</div>","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":166,"to":180}}}}],["1061",{"pageContent":"What's the difference between Chromatic and Test runner?\n\nThe test-runner is a generic testing tool that can run locally or on CI and be configured or extended to run all kinds of tests.\n\n[Chromatic](https://www.chromatic.com/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook) is a cloud-based service that runs [visual](./visual-testing.md) and [interaction tests](./interaction-testing.md) (and soon accessibility tests) without setting up the test runner. It also syncs with your git provider and manages access control for private projects.\n\nHowever, you might want to pair the test runner and Chromatic in some cases.\n\n- Use it locally and Chromatic on your CI.\n- Use Chromatic for visual and interaction tests and run other custom tests using the test runner.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":182,"to":191}}}}],["1062",{"pageContent":"Advanced configuration","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":193,"to":193}}}}],["1063",{"pageContent":"Test hook API (experimental)\n\nThe test-runner renders a story and executes its [play function](../writing-stories/play-function.md) if one exists. However, certain behaviors are impossible to achieve via the play function, which executes in the browser. For example, if you want the test-runner to take visual snapshots for you, this is possible via Playwright/Jest but must be executed in Node.\n\nThe test-runner exports test hooks that can be overridden globally to enable use cases like visual or DOM snapshots. These hooks give you access to the test lifecycle _before_ and _after_ the story is rendered.\nListed below are the available hooks and an overview of how to use them.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":195,"to":200}}}}],["1064",{"pageContent":"| Hook         | Description                                                                   |\n| ------------ | ----------------------------------------------------------------------------- |\n| `setup`      | Executes once before all the tests run<br/>`setup() {}`                       |\n| `preRender`  | Executes before a story is rendered<br/>`async preRender(page, context) {}`   |\n| `postRender` | Executes after the story is rendered<br/>`async postRender(page, context) {}` |\n\n<div class=\"aside\">\n\n💡 These test hooks are experimental and may be subject to breaking changes. We encourage you to test as much as possible within the story's [play function](../writing-stories/play-function.md).\n\n</div>\n\nTo enable the hooks API, you'll need to add a new configuration file inside your Storybook directory and set them up as follows:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":202,"to":216}}}}],["1065",{"pageContent":"</div>\n\nTo enable the hooks API, you'll need to add a new configuration file inside your Storybook directory and set them up as follows:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-hooks-example.js.mdx',\n    'common/storybook-test-runner-hooks-example.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 Except for the `setup` function, all other functions run asynchronously. Both `preRender` and `postRender` functions include two additional arguments, a [Playwright page](https://playwright.dev/docs/pages) and a context object which contains the `id`, `title`, and the `name` of the story.\n\n</div>\n\nWhen the test-runner executes, your existing tests will go through the following lifecycle:","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":216,"to":237}}}}],["1066",{"pageContent":"</div>\n\nWhen the test-runner executes, your existing tests will go through the following lifecycle:\n\n- The `setup` function is executed before all the tests run.\n- The context object is generated containing the required information.\n- Playwright navigates to the story's page.\n- The `preRender` function is executed.\n- The story is rendered, and any existing `play` functions are executed.\n- The `postRender` function is executed.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":237,"to":246}}}}],["1067",{"pageContent":"Helpers\n\nThe test-runner exports a few helpers that can be used to make your tests more readable and maintainable by accessing Storybook's internals (e.g., `args`, `parameters`). Listed below are the available helpers and an overview of how to use them.\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-helper-function.js.mdx',\n    'common/storybook-test-runner-helper-function.ts.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":248,"to":261}}}}],["1068",{"pageContent":"Stories.json mode\n\nThe test-runner transforms your story files into tests when testing a local Storybook. For a remote Storybook, it uses the Storybook's [stories.json](../configure/overview.md#feature-flags) file (a static index of all the stories) to run the tests.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":263,"to":265}}}}],["1069",{"pageContent":"Why?\n\nSuppose you run into a situation where the local and remote Storybooks appear out of sync, or you might not even have access to the code. In that case, the `stories.json` file is guaranteed to be the most accurate representation of the deployed Storybook you are testing. To test a local Storybook using this feature, use the `--stories-json` flag as follows:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-with-stories-json.yarn.js.mdx',\n    'common/storybook-test-runner-with-stories-json.npm.js.mdx',\n    'common/storybook-test-runner-with-stories-json.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\n<div class=\"aside\">\n\n💡 The `stories.json` mode is not compatible with watch mode.\n\n</div>\n\nIf you need to disable it, use the `--no-stories-json` flag:\n\n<!-- prettier-ignore-start -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":267,"to":291}}}}],["1070",{"pageContent":"<div class=\"aside\">\n\n💡 The `stories.json` mode is not compatible with watch mode.\n\n</div>\n\nIf you need to disable it, use the `--no-stories-json` flag:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/storybook-test-runner-disable-stories-json.yarn.js.mdx',\n    'common/storybook-test-runner-disable-stories-json.npm.js.mdx',\n    'common/storybook-test-runner-disable-stories-json.pnpm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":291,"to":309}}}}],["1071",{"pageContent":"How do I check if my Storybook has a `stories.json` file?\n\nStories.json mode requires a `stories.json` file. Open a browser window and navigate to your deployed Storybook instance (for example, `https://your-storybook-url-here.com/stories.json`). You should see a JSON file that starts with a `\"v\": 3` key, immediately followed by another key called \"stories\", which contains a map of story IDs to JSON objects. If that is the case, your Storybook supports [stories.json mode](../configure/overview.md#feature-flags).\n\n---","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":311,"to":315}}}}],["1072",{"pageContent":"Troubleshooting\n\n### The test runner seems flaky and keeps timing out\n\nIf your tests time out with the following message:\n\n```shell\nTimeout - Async callback was not invoked within the 15000 ms timeout specified by jest.setTimeout\n```\n\nIt might be that Playwright couldn't handle testing the number of stories you have in your project. Perhaps you have a large number of stories, or your CI environment has a really low RAM configuration. In such cases, you should limit the number of workers that run in parallel by adjusting your command as follows:\n\n```json\n{\n  \"scripts\": {\n    \"test-storybook:ci\": \"yarn test-storybook --maxWorkers=2\"\n  }\n}\n```","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":317,"to":335}}}}],["1073",{"pageContent":"The error output in the CLI is too short\n\nBy default, the test runner truncates error outputs at 1000 characters, and you can check the full output directly in Storybook in the browser. However, if you want to change that limit, you can do so by setting the `DEBUG_PRINT_LIMIT` environment variable to a number of your choosing, for example, `DEBUG_PRINT_LIMIT=5000 yarn test-storybook`.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":337,"to":339}}}}],["1074",{"pageContent":"Run the test runner in other CI environments\n\nAs the test runner is based on Playwright, you might need to use specific docker images or other configurations depending on your CI setup. In that case, you can refer to the [Playwright CI docs](https://playwright.dev/docs/ci) for more information.\n\n#### Learn about other UI tests\n\n- Test runner to automate test execution\n- [Visual tests](./visual-testing.md) for appearance\n- [Accessibility tests](./accessibility-testing.md) for accessibility\n- [Interaction tests](./interaction-testing.md) for user behavior simulation\n- [Coverage tests](./test-coverage.md) for measuring code coverage\n- [Snapshot tests](./snapshot-testing.md) for rendering errors and warnings\n- [Import stories in other tests](./importing-stories-in-tests.md) for other tools","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/test-runner.md","loc":{"lines":{"from":341,"to":353}}}}],["1075",{"pageContent":"---\ntitle: 'Visual tests'\n---\n\nVisual tests, also called visual regression tests, catch bugs in UI appearance. They work by taking screenshots of every story and comparing them commit-to-commit to identify changes.\n\nIdeal for verifying what the user sees: layout, color, size, and contrast. Storybook is a fantastic tool for visual testing because every story is essentially a test specification. Any time you write or update a story, you get a spec for free.\n\n<video autoPlay muted playsInline loop>\n  <source\n    src=\"component-visual-testing-optimized.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n\nThere are [many tools](https://github.com/mojoaxel/awesome-regression-testing) for visual testing. We recommend [Chromatic](https://www.chromatic.com?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook) by Storybook maintainers to run visual tests in a lightning-fast cloud browser environment.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/visual-testing.md","loc":{"lines":{"from":1,"to":16}}}}],["1076",{"pageContent":"For a self-managed alternative to Chromatic, we offer [StoryShots](https://github.com/storybookjs/storybook/tree/main/addons/storyshots). It allows you to run visual tests on stories by integrating with [jest-image-snapshot](https://github.com/storybookjs/storybook/tree/main/addons/storyshots/storyshots-puppeteer#imagesnapshots).","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/visual-testing.md","loc":{"lines":{"from":18,"to":18}}}}],["1077",{"pageContent":"Setup Chromatic addon\n\nChromatic is a cloud service built for Storybook. It allows you to run visual tests with zero-config.\n\nTo get started, sign up with your [GitHub](https://github.com/), [GitLab](https://about.gitlab.com/), [Bitbucket](https://bitbucket.org/), or email and generate a unique `<project-token>` for your Storybook.\n\nNext, install the [chromatic](https://www.npmjs.com/package/chromatic) CLI package from npm:\n\n<!-- prettier-ignore-start -->\n\n<CodeSnippets\n  paths={[\n    'common/chromatic-install.yarn.js.mdx',\n    'common/chromatic-install.npm.js.mdx',\n  ]}\n/>\n\n<!-- prettier-ignore-end -->\n\nRun the following command after the package finishes installing:\n\n```shell\nnpx chromatic --project-token <your-project-token>\n```\n\n<div class=\"aside\">\n \n Don't forget to replace `your-project-token` with the one provided by Chromatic.\n \n</div>\n\n```shell\nBuild 1 published.\n\nView it online at https://www.chromatic.com/build?appId=...&number=1.","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/visual-testing.md","loc":{"lines":{"from":20,"to":54}}}}],["1078",{"pageContent":"<div class=\"aside\">\n💡 Before running Chromatic's CLI ensure you have at least two commits added to the repository to prevent build failures, as Chromatic relies on a full Git history graph to establish the baselines. Read more about baselines in Chromatic's <a href=\"https://www.chromatic.com/docs/branching-and-baselines?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook\"> documentation</a>\n</div>\n\nWhen Chromatic finishes, it should have successfully deployed your Storybook and established the baselines, that is to say, the starting point for all your component's stories. Additionally, providing you with a link to the published Storybook that you can share with your team to gather feedback.\n\n![Chromatic project first build](./chromatic-first-build-optimized.png)","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/visual-testing.md","loc":{"lines":{"from":57,"to":63}}}}],["1079",{"pageContent":"Catching UI changes\n\nEach time you run Chromatic, it will generate new snapshots and compare them against the existing baselines. That’s ideal for detecting UI changes and preventing potential UI regressions.\n\nFor example, let's assume you're working on a component and you tweak the styling. When Chromatic is re-run, it will highlight the difference between the baseline and the updated component.\n\n![Chromatic project second build](./chromatic-second-build-optimized.png)\n\nIf the changes are intentional, accept them as baselines. Otherwise, deny them to prevent UI regressions.\n\nLearn how to [integrate Chromatic UI Tests](https://www.chromatic.com/docs/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook) into your CI pipeline.\n\n---","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/visual-testing.md","loc":{"lines":{"from":65,"to":77}}}}],["1080",{"pageContent":"What’s the difference between visual tests and snapshot tests?\n\nSnapshot tests compare the rendered markup of every story against known baselines. This means the test compares blobs of HTML and not what the user actually sees. Which in turn, can lead to an increase in false positives as code changes don’t always yield visual changes in the component.\n\n#### Learn about other UI tests\n\n- [Test runner](./test-runner.md) to automate test execution\n- Visual tests for appearance\n- [Accessibility tests](./accessibility-testing.md) for accessibility\n- [Interaction tests](./interaction-testing.md) for user behavior simulation\n- [Coverage tests](./test-coverage.md) for measuring code coverage\n- [Snapshot tests](./snapshot-testing.md) for rendering errors and warnings\n- [Import stories in other tests](./importing-stories-in-tests.md) for other tools","metadata":{"source":"/Users/marcus/personal/monkeylabs/docs/writing-tests/visual-testing.md","loc":{"lines":{"from":79,"to":91}}}}]]